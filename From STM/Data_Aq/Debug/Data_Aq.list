
Data_Aq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013598  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08013868  08013868  00023868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013adc  08013adc  00023adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013ae4  08013ae4  00023ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013ae8  08013ae8  00023ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000080a4  24000000  08013aec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240080a4  0801bb90  000380a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24008104  0801bbf0  00038104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f9ec  24008164  0801bc50  00038164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24027b50  0801bc50  00047b50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00038164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049c05  00000000  00000000  00038192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d95  00000000  00000000  00081d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002430  00000000  00000000  00088b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f8  00000000  00000000  0008af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b16e  00000000  00000000  0008d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ef71  00000000  00000000  000c82c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016a5a4  00000000  00000000  000f7237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002617db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ea8  00000000  00000000  00261830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24008164 	.word	0x24008164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013850 	.word	0x08013850

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24008168 	.word	0x24008168
 800030c:	08013850 	.word	0x08013850

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <ADS8588H_Init_Struct>:
		GPIO_TypeDef	*ADC_OS1_Port, uint16_t 	ADC_OS1_pin,
		GPIO_TypeDef	*ADC_OS2_Port, uint16_t 	ADC_OS2_pin,
		uint8_t OSR,
		OSPI_HandleTypeDef	*hopsi
		)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	807b      	strh	r3, [r7, #2]
	/*
	 * Link timer source to ADC driver
	 */
	ADC->ADC_Time.ADC_htim = htim;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	605a      	str	r2, [r3, #4]

	/*
	 * Load time delay base defaults
	 */
	ADS8588H_Time_Delay_Base(ADC);
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f000 f846 	bl	800075e <ADS8588H_Time_Delay_Base>

	/*
	 * Link OPSI source to ADC driver
	 */
	ADC->OPSI.hopsi = hopsi;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	/*
	 * From section 7.3.7 of the data sheet
	 * Configure OSR bits for internal digital filtering
	 */
	ADS8588H_OSR_SETUP(ADC);
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f000 f84f 	bl	800077e <ADS8588H_OSR_SETUP>

	/*
	 * Link Reset GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_Reset_Port = ADC_Reset_Port;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	609a      	str	r2, [r3, #8]
	ADC->ADC_GPIO.ADC_Reset_pin = ADC_Reset_pin;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	887a      	ldrh	r2, [r7, #2]
 80006ea:	819a      	strh	r2, [r3, #12]

	/*
	 * Link Conv_AB GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_Conv_AB_Port = ADC_Conv_AB_Port;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	69ba      	ldr	r2, [r7, #24]
 80006f0:	611a      	str	r2, [r3, #16]
	ADC->ADC_GPIO.ADC_Conv_AB_pin = ADC_Conv_AB_pin;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	8bba      	ldrh	r2, [r7, #28]
 80006f6:	829a      	strh	r2, [r3, #20]

	/*
	 * Link CS GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_CS_Port = ADC_CS_Port;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	6a3a      	ldr	r2, [r7, #32]
 80006fc:	619a      	str	r2, [r3, #24]
	ADC->ADC_GPIO.ADC_CS_pin = ADC_CS_pin;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000702:	839a      	strh	r2, [r3, #28]

	/*
	 * Link BUSY 1 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_BUSY_1_Port = ADC_BUSY_1_Port;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000708:	621a      	str	r2, [r3, #32]
	ADC->ADC_GPIO.ADC_BUSY_1_pin = ADC_BUSY_1_pin;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800070e:	849a      	strh	r2, [r3, #36]	; 0x24

	/*
	 * Link BUSY 2 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_BUSY_2_Port = ADC_BUSY_2_Port;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
	ADC->ADC_GPIO.ADC_BUSY_2_pin = ADC_BUSY_2_pin;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800071a:	859a      	strh	r2, [r3, #44]	; 0x2c

	/*
	 * Link BUSY 3 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_BUSY_3_Port = ADC_BUSY_3_Port;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
	ADC->ADC_GPIO.ADC_BUSY_3_pin = ADC_BUSY_3_pin;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000726:	869a      	strh	r2, [r3, #52]	; 0x34

	/*
	 * Link OSR 0 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_OS0_Port = ADC_OS0_Port;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800072c:	639a      	str	r2, [r3, #56]	; 0x38
	ADC->ADC_GPIO.ADC_OS0_pin = ADC_OS0_pin;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000734:	879a      	strh	r2, [r3, #60]	; 0x3c

	/*
	 * Link OSR 1 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_OS1_Port = ADC_OS1_Port;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800073a:	641a      	str	r2, [r3, #64]	; 0x40
	ADC->ADC_GPIO.ADC_OS1_pin = ADC_OS1_pin;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8000742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	/*
	 * Link OSR 2 GPIO pins to ADC driver
	 */
	ADC->ADC_GPIO.ADC_OS2_Port = ADC_OS2_Port;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800074a:	649a      	str	r2, [r3, #72]	; 0x48
	ADC->ADC_GPIO.ADC_OS2_pin = ADC_OS2_pin;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000752:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <ADS8588H_Time_Delay_Base>:

void ADS8588H_Time_Delay_Base(ADS8588H_Interface_t *ADC)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
	ADC->ADC_Time.Delay.convAB_Delay = DEFAULT_CONVAB_DELAY;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	801a      	strh	r2, [r3, #0]
	ADC->ADC_Time.Delay.reset_Delay = DEFAULT_RESET_DELAY;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2201      	movs	r2, #1
 8000770:	805a      	strh	r2, [r3, #2]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <ADS8588H_OSR_SETUP>:

void ADS8588H_OSR_SETUP(ADS8588H_Interface_t *ADC)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
	/*
	 * First process bit field
	 */
	ADC->ADC_OSR.OS0 = ADC->ADC_OSR.OS0 & OSR_BIT_0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	b2da      	uxtb	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	ADC->ADC_OSR.OS1 = (ADC->ADC_OSR.OS1 & OSR_BIT_1) >> OSR_BIT_1_MASK;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800079e:	105b      	asrs	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	ADC->ADC_OSR.OS2 = (ADC->ADC_OSR.OS2 & OSR_BIT_2) >> OSR_BIT_2_MASK;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80007b4:	109b      	asrs	r3, r3, #2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/*
	 * Set OSR values.
	 */
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_OS0_Port,
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80007d2:	461a      	mov	r2, r3
 80007d4:	f003 fe3e 	bl	8004454 <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_OS0_pin,
			ADC->ADC_OSR.OS0);
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_OS1_Port,
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80007e8:	461a      	mov	r2, r3
 80007ea:	f003 fe33 	bl	8004454 <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_OS1_pin,
			ADC->ADC_OSR.OS1);
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_OS2_Port,
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80007fe:	461a      	mov	r2, r3
 8000800:	f003 fe28 	bl	8004454 <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_OS2_pin,
			ADC->ADC_OSR.OS2);
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <ADS8588H_Init>:

void ADS8588H_Init(ADS8588H_Interface_t *ADC)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	/*
	 * Initialize time delay source
	 */
	HAL_TIM_Base_Start(ADC->ADC_Time.ADC_htim);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	f008 fdfb 	bl	8009414 <HAL_TIM_Base_Start>

	/*
	* From section 7.4.1.6 of data sheet
	* Needed for settling internal references.
	*/
	ADS8588H_Reset(ADC);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f804 	bl	800082c <ADS8588H_Reset>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <ADS8588H_Reset>:

void ADS8588H_Reset(ADS8588H_Interface_t *ADC)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_Reset_Port,
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6898      	ldr	r0, [r3, #8]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	899b      	ldrh	r3, [r3, #12]
 800083c:	2201      	movs	r2, #1
 800083e:	4619      	mov	r1, r3
 8000840:	f003 fe08 	bl	8004454 <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_Reset_pin,
			SET);

	ADC_Delay_us(ADC,ADC->ADC_Time.Delay.reset_Delay);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	885b      	ldrh	r3, [r3, #2]
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 f898 	bl	8000980 <ADC_Delay_us>

	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_Reset_Port,
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6898      	ldr	r0, [r3, #8]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	899b      	ldrh	r3, [r3, #12]
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	f003 fdfa 	bl	8004454 <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_Reset_pin,
			RESET);
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <ADC_SERVICE_ROUTINE>:

void ADC_SERVICE_ROUTINE(ADS8588H_Interface_t *ADC)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	ADS8588H_CONV_AB(ADC);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f83d 	bl	80008f0 <ADS8588H_CONV_AB>
	ADS8588H_POLL_BUSY(ADC);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f858 	bl	800092c <ADS8588H_POLL_BUSY>
	ADS8588H_READ_ALL(ADC);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f804 	bl	800088a <ADS8588H_READ_ALL>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <ADS8588H_READ_ALL>:

void ADS8588H_READ_ALL(ADS8588H_Interface_t *ADC)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_CS_Port,
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6998      	ldr	r0, [r3, #24]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	8b9b      	ldrh	r3, [r3, #28]
 800089a:	2200      	movs	r2, #0
 800089c:	4619      	mov	r1, r3
 800089e:	f003 fdd9 	bl	8004454 <HAL_GPIO_WritePin>

	/*
	 * Read adc stuff
	 */

	ADC->OPSI.res = HAL_OSPI_Receive(ADC->OPSI.hopsi,ADC->DATA.raw_data ,HAL_MAX_DELAY-1);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3354      	adds	r3, #84	; 0x54
 80008ac:	f06f 0201 	mvn.w	r2, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	f001 fc36 	bl	8002122 <HAL_OSPI_Receive>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	if(ADC->OPSI.res != HAL_OK) Error_Handler();
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <ADS8588H_READ_ALL+0x44>
 80008ca:	f000 fe77 	bl	80015bc <Error_Handler>
	ADC->OPSI.hopsi->State = HAL_OSPI_STATE_CMD_CFG;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008d4:	2204      	movs	r2, #4
 80008d6:	655a      	str	r2, [r3, #84]	; 0x54

	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_CS_Port,
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6998      	ldr	r0, [r3, #24]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	8b9b      	ldrh	r3, [r3, #28]
 80008e0:	2201      	movs	r2, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	f003 fdb6 	bl	8004454 <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_CS_pin,
			SET);
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <ADS8588H_CONV_AB>:

void ADS8588H_CONV_AB(ADS8588H_Interface_t *ADC)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_Conv_AB_Port,
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6918      	ldr	r0, [r3, #16]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	8a9b      	ldrh	r3, [r3, #20]
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	f003 fda6 	bl	8004454 <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_Conv_AB_pin,
			RESET);

	ADC_Delay_us(ADC,ADC->ADC_Time.Delay.convAB_Delay);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f836 	bl	8000980 <ADC_Delay_us>

	HAL_GPIO_WritePin(ADC->ADC_GPIO.ADC_Conv_AB_Port,
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6918      	ldr	r0, [r3, #16]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	8a9b      	ldrh	r3, [r3, #20]
 800091c:	2201      	movs	r2, #1
 800091e:	4619      	mov	r1, r3
 8000920:	f003 fd98 	bl	8004454 <HAL_GPIO_WritePin>
			ADC->ADC_GPIO.ADC_Conv_AB_pin,
			SET);
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <ADS8588H_POLL_BUSY>:

void ADS8588H_POLL_BUSY(ADS8588H_Interface_t *ADC)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	/*
	 * Wait until all 3 ADCs are ready
	 */
	while(!HAL_GPIO_ReadPin(ADC->ADC_GPIO.ADC_BUSY_1_Port, ADC->ADC_GPIO.ADC_BUSY_1_pin) &&
 8000934:	bf00      	nop
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6a1a      	ldr	r2, [r3, #32]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	4610      	mov	r0, r2
 8000942:	f003 fd6f 	bl	8004424 <HAL_GPIO_ReadPin>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d115      	bne.n	8000978 <ADS8588H_POLL_BUSY+0x4c>
			!HAL_GPIO_ReadPin(ADC->ADC_GPIO.ADC_BUSY_2_Port, ADC->ADC_GPIO.ADC_BUSY_2_pin) &&
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000954:	4619      	mov	r1, r3
 8000956:	4610      	mov	r0, r2
 8000958:	f003 fd64 	bl	8004424 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
	while(!HAL_GPIO_ReadPin(ADC->ADC_GPIO.ADC_BUSY_1_Port, ADC->ADC_GPIO.ADC_BUSY_1_pin) &&
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10a      	bne.n	8000978 <ADS8588H_POLL_BUSY+0x4c>
			!HAL_GPIO_ReadPin(ADC->ADC_GPIO.ADC_BUSY_3_Port, ADC->ADC_GPIO.ADC_BUSY_3_pin));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800096a:	4619      	mov	r1, r3
 800096c:	4610      	mov	r0, r2
 800096e:	f003 fd59 	bl	8004424 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
			!HAL_GPIO_ReadPin(ADC->ADC_GPIO.ADC_BUSY_2_Port, ADC->ADC_GPIO.ADC_BUSY_2_pin) &&
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0de      	beq.n	8000936 <ADS8588H_POLL_BUSY+0xa>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <ADC_Delay_us>:



void ADC_Delay_us(ADS8588H_Interface_t *ADC, uint16_t us)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
	/*
	 * Reset timer counter
	 */
	__HAL_TIM_SET_COUNTER(ADC->ADC_Time.ADC_htim, WIPE_COUNTER);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
	/*
	 * Wait till time expires
	 */
	while ((uint16_t)__HAL_TIM_GET_COUNTER(ADC->ADC_Time.ADC_htim) < us);
 8000996:	bf00      	nop
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	887a      	ldrh	r2, [r7, #2]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <ADC_Delay_us+0x18>
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b085      	sub	sp, #20
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e024      	b.n	8000a12 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	e01a      	b.n	8000a04 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2bff      	cmp	r3, #255	; 0xff
 80009d2:	dd0a      	ble.n	80009ea <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	025a      	lsls	r2, r3, #9
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4413      	add	r3, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e009      	b.n	80009fe <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	025a      	lsls	r2, r3, #9
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	4413      	add	r3, r2
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a0a:	dbe0      	blt.n	80009ce <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	dbd6      	blt.n	80009c8 <HalfKBWrite+0x12>
			}

		}

	}
}
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
  HalfKBWrite((char *)stext,chunk_mult);
 8000a2e:	2140      	movs	r1, #64	; 0x40
 8000a30:	483a      	ldr	r0, [pc, #232]	; (8000b1c <main+0xf4>)
 8000a32:	f7ff ffc0 	bl	80009b6 <HalfKBWrite>
  for(int i = 0; i <65;i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	e009      	b.n	8000a50 <main+0x28>
  {
  	  pData[i]=i;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	b2d9      	uxtb	r1, r3
 8000a40:	4a37      	ldr	r2, [pc, #220]	; (8000b20 <main+0xf8>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	460a      	mov	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <65;i++)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b40      	cmp	r3, #64	; 0x40
 8000a54:	ddf2      	ble.n	8000a3c <main+0x14>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f002 fdb3 	bl	80035c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f87d 	bl	8000b58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a5e:	f000 f8f5 	bl	8000c4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a62:	f000 fb07 	bl	8001074 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a66:	f000 f921 	bl	8000cac <MX_ETH_Init>
  MX_MDMA_Init();
 8000a6a:	f000 fa9f 	bl	8000fac <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 8000a6e:	f000 f9cf 	bl	8000e10 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a72:	f00b fabf 	bl	800bff4 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000a76:	f000 fa45 	bl	8000f04 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a7a:	f000 fa8f 	bl	8000f9c <MX_USB_OTG_HS_USB_Init>
  MX_OCTOSPI1_Init();
 8000a7e:	f000 f961 	bl	8000d44 <MX_OCTOSPI1_Init>
  MX_TIM13_Init();
 8000a82:	f000 f9f3 	bl	8000e6c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  EnableMemMappedQuadMode();
 8000a86:	f000 fd01 	bl	800148c <EnableMemMappedQuadMode>
  ADS8588H_Init_Struct(&ADC,
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <main+0xfc>)
 8000a8c:	9311      	str	r3, [sp, #68]	; 0x44
 8000a8e:	2306      	movs	r3, #6
 8000a90:	9310      	str	r3, [sp, #64]	; 0x40
 8000a92:	2320      	movs	r3, #32
 8000a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <main+0x100>)
 8000a98:	930e      	str	r3, [sp, #56]	; 0x38
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	930d      	str	r3, [sp, #52]	; 0x34
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <main+0x100>)
 8000aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <main+0x100>)
 8000aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8000aaa:	2304      	movs	r3, #4
 8000aac:	9309      	str	r3, [sp, #36]	; 0x24
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <main+0x100>)
 8000ab0:	9308      	str	r3, [sp, #32]
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	9307      	str	r3, [sp, #28]
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <main+0x100>)
 8000ab8:	9306      	str	r3, [sp, #24]
 8000aba:	2301      	movs	r3, #1
 8000abc:	9305      	str	r3, [sp, #20]
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <main+0x100>)
 8000ac0:	9304      	str	r3, [sp, #16]
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	9303      	str	r3, [sp, #12]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <main+0x104>)
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	2301      	movs	r3, #1
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <main+0x104>)
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <main+0x108>)
 8000ad6:	4917      	ldr	r1, [pc, #92]	; (8000b34 <main+0x10c>)
 8000ad8:	4817      	ldr	r0, [pc, #92]	; (8000b38 <main+0x110>)
 8000ada:	f7ff fded 	bl	80006b8 <ADS8588H_Init_Struct>
		  ADC_OS1_GPIO_Port,	ADC_OS1_Pin,
		  ADC_OS2_GPIO_Port,	ADC_OS2_Pin,
		  OSR_64,
		  &hospi1
		  );
  ADS8588H_Init(&ADC);
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <main+0x110>)
 8000ae0:	f7ff fe94 	bl	800080c <ADS8588H_Init>


  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4814      	ldr	r0, [pc, #80]	; (8000b3c <main+0x114>)
 8000aea:	f003 fcb3 	bl	8004454 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aee:	f00e fc0b 	bl	800f308 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SDCard */
  SDCardHandle = osThreadNew(StartSDCardTask, NULL, &SDCard_attributes);
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <main+0x118>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4813      	ldr	r0, [pc, #76]	; (8000b44 <main+0x11c>)
 8000af8:	f00e fc87 	bl	800f40a <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <main+0x120>)
 8000b00:	6013      	str	r3, [r2, #0]

  /* creation of ServiceADC */
  ServiceADCHandle = osThreadNew(StartServiceADC, NULL, &ServiceADC_attributes);
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <main+0x124>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4812      	ldr	r0, [pc, #72]	; (8000b50 <main+0x128>)
 8000b08:	f00e fc7f 	bl	800f40a <osThreadNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <main+0x12c>)
 8000b10:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b12:	f00e fc3f 	bl	800f394 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //  char str[80]={0};
  //  HAL_UART_Transmit(&huart3, (uint8_t*)str, sprintf(str, "time taken %d \r\n", timestop-timestart), 10);
    Error_Handler();
 8000b16:	f000 fd51 	bl	80015bc <Error_Handler>
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <main+0xf2>
 8000b1c:	24000028 	.word	0x24000028
 8000b20:	24008180 	.word	0x24008180
 8000b24:	2402717c 	.word	0x2402717c
 8000b28:	58021400 	.word	0x58021400
 8000b2c:	58020c00 	.word	0x58020c00
 8000b30:	58021800 	.word	0x58021800
 8000b34:	24027464 	.word	0x24027464
 8000b38:	2402704c 	.word	0x2402704c
 8000b3c:	58020400 	.word	0x58020400
 8000b40:	08013914 	.word	0x08013914
 8000b44:	080014f5 	.word	0x080014f5
 8000b48:	240271e0 	.word	0x240271e0
 8000b4c:	08013938 	.word	0x08013938
 8000b50:	0800156d 	.word	0x0800156d
 8000b54:	24027514 	.word	0x24027514

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09c      	sub	sp, #112	; 0x70
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	224c      	movs	r2, #76	; 0x4c
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f012 f9e2 	bl	8012f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f012 f9dc 	bl	8012f30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f003 ff51 	bl	8004a20 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <SystemClock_Config+0xec>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a2f      	ldr	r2, [pc, #188]	; (8000c44 <SystemClock_Config+0xec>)
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b8c:	6193      	str	r3, [r2, #24]
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <SystemClock_Config+0xec>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b9a:	bf00      	nop
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <SystemClock_Config+0xec>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba8:	d1f8      	bne.n	8000b9c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <SystemClock_Config+0xf0>)
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	f023 0303 	bic.w	r3, r3, #3
 8000bb2:	4a25      	ldr	r2, [pc, #148]	; (8000c48 <SystemClock_Config+0xf0>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bba:	2321      	movs	r3, #33	; 0x21
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bbe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000bd4:	f240 1313 	movw	r3, #275	; 0x113
 8000bd8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bde:	2304      	movs	r3, #4
 8000be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000be6:	2304      	movs	r3, #4
 8000be8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 ff4c 	bl	8004a94 <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c02:	f000 fcdb 	bl	80015bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	233f      	movs	r3, #63	; 0x3f
 8000c08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c12:	2308      	movs	r3, #8
 8000c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c1a:	2340      	movs	r3, #64	; 0x40
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f004 fadd 	bl	80051ec <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c38:	f000 fcc0 	bl	80015bc <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3770      	adds	r7, #112	; 0x70
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58024800 	.word	0x58024800
 8000c48:	58024400 	.word	0x58024400

08000c4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ae      	sub	sp, #184	; 0xb8
 8000c50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	22b4      	movs	r2, #180	; 0xb4
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f012 f969 	bl	8012f30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_SDMMC;
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <PeriphCommonClock_Config+0x5c>)
 8000c60:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000c66:	2319      	movs	r3, #25
 8000c68:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c76:	23c0      	movs	r3, #192	; 0xc0
 8000c78:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8000c82:	2320      	movs	r3, #32
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c8a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fe7a 	bl	8005988 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000c9a:	f000 fc8f 	bl	80015bc <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	37b8      	adds	r7, #184	; 0xb8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	02010000 	.word	0x02010000

08000cac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <MX_ETH_Init+0x84>)
 8000cb4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cc4:	22e1      	movs	r2, #225	; 0xe1
 8000cc6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cdc:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cde:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_ETH_Init+0x80>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_ETH_Init+0x80>)
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <MX_ETH_Init+0x90>)
 8000cf0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cf4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cf8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_ETH_Init+0x80>)
 8000cfc:	f002 fdd4 	bl	80038a8 <HAL_ETH_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d06:	f000 fc59 	bl	80015bc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d0a:	2234      	movs	r2, #52	; 0x34
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <MX_ETH_Init+0x94>)
 8000d10:	f012 f90e 	bl	8012f30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_ETH_Init+0x94>)
 8000d16:	2221      	movs	r2, #33	; 0x21
 8000d18:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_ETH_Init+0x94>)
 8000d1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d20:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_ETH_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24027588 	.word	0x24027588
 8000d30:	40028000 	.word	0x40028000
 8000d34:	240081c4 	.word	0x240081c4
 8000d38:	24008104 	.word	0x24008104
 8000d3c:	240080a4 	.word	0x240080a4
 8000d40:	24027610 	.word	0x24027610

08000d44 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d5c:	4a2a      	ldr	r2, [pc, #168]	; (8000e08 <MX_OCTOSPI1_Init+0xc4>)
 8000d5e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 8;
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d74:	2208      	movs	r2, #8
 8000d76:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 30;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d92:	221e      	movs	r2, #30
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000db0:	2208      	movs	r2, #8
 8000db2:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000dc0:	4810      	ldr	r0, [pc, #64]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000dc2:	f000 ff21 	bl	8001c08 <HAL_OSPI_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_OCTOSPI1_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f000 fbf6 	bl	80015bc <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000dd8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000ddc:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_OCTOSPI1_Init+0xc8>)
 8000de0:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_OCTOSPI1_Init+0xc0>)
 8000dec:	f001 fa9c 	bl	8002328 <HAL_OSPIM_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_OCTOSPI1_Init+0xb6>
  {
    Error_Handler();
 8000df6:	f000 fbe1 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2402717c 	.word	0x2402717c
 8000e08:	52005000 	.word	0x52005000
 8000e0c:	01000001 	.word	0x01000001

08000e10 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_SDMMC1_SD_Init+0x50>)
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <MX_SDMMC1_SD_Init+0x54>)
 8000e18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_SDMMC1_SD_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_SDMMC1_SD_Init+0x50>)
 8000e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e26:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_SDMMC1_SD_Init+0x50>)
 8000e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_SDMMC1_SD_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_SDMMC1_SD_Init+0x50>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  __HAL_RCC_SDMMC1_FORCE_RESET();
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <MX_SDMMC1_SD_Init+0x58>)
 8000e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <MX_SDMMC1_SD_Init+0x58>)
 8000e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e46:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RCC_SDMMC1_RELEASE_RESET();
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <MX_SDMMC1_SD_Init+0x58>)
 8000e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <MX_SDMMC1_SD_Init+0x58>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END SDMMC1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	240271e4 	.word	0x240271e4
 8000e64:	52007000 	.word	0x52007000
 8000e68:	58024400 	.word	0x58024400

08000e6c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_TIM13_Init+0x90>)
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <MX_TIM13_Init+0x94>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_TIM13_Init+0x90>)
 8000e8c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000e90:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_TIM13_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_TIM13_Init+0x90>)
 8000e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_TIM13_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_TIM13_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_TIM13_Init+0x90>)
 8000eae:	f008 fa59 	bl	8009364 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8000eb8:	f000 fb80 	bl	80015bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8000ebc:	480f      	ldr	r0, [pc, #60]	; (8000efc <MX_TIM13_Init+0x90>)
 8000ebe:	f008 fbad 	bl	800961c <HAL_TIM_OC_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8000ec8:	f000 fb78 	bl	80015bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_TIM13_Init+0x90>)
 8000ee4:	f008 fd1a 	bl	800991c <HAL_TIM_OC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8000eee:	f000 fb65 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3720      	adds	r7, #32
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	24027464 	.word	0x24027464
 8000f00:	40001c00 	.word	0x40001c00

08000f04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f4e:	f009 f921 	bl	800a194 <HAL_UART_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f58:	f000 fb30 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f60:	f00a f9b4 	bl	800b2cc <HAL_UARTEx_SetTxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6a:	f000 fb27 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f72:	f00a f9e9 	bl	800b348 <HAL_UARTEx_SetRxFifoThreshold>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f000 fb1e 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f82:	f00a f96a 	bl	800b25a <HAL_UARTEx_DisableFifoMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f000 fb16 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	240270e8 	.word	0x240270e8
 8000f98:	40004800 	.word	0x40004800

08000f9c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <MX_MDMA_Init+0xbc>)
 8000fb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <MX_MDMA_Init+0xbc>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <MX_MDMA_Init+0xbc>)
 8000fc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fd2:	4a27      	ldr	r2, [pc, #156]	; (8001070 <MX_MDMA_Init+0xc4>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fd8:	221d      	movs	r2, #29
 8000fda:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_MDMA_Init+0xc0>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_MDMA_Init+0xc0>)
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_MDMA_Init+0xc0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_MDMA_Init+0xc0>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_MDMA_Init+0xc0>)
 8001008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_MDMA_Init+0xc0>)
 8001010:	2201      	movs	r2, #1
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_MDMA_Init+0xc0>)
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_MDMA_Init+0xc0>)
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_MDMA_Init+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_MDMA_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <MX_MDMA_Init+0xc0>)
 800102e:	f003 fa44 	bl	80044ba <HAL_MDMA_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8001038:	f000 fac0 	bl	80015bc <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <MX_MDMA_Init+0xc0>)
 8001042:	f003 fa86 	bl	8004552 <HAL_MDMA_ConfigPostRequestMask>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 800104c:	f000 fab6 	bl	80015bc <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2105      	movs	r1, #5
 8001054:	207a      	movs	r0, #122	; 0x7a
 8001056:	f002 fbff 	bl	8003858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800105a:	207a      	movs	r0, #122	; 0x7a
 800105c:	f002 fc16 	bl	800388c <HAL_NVIC_EnableIRQ>

}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024400 	.word	0x58024400
 800106c:	2402751c 	.word	0x2402751c
 8001070:	52000040 	.word	0x52000040

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	4b9d      	ldr	r3, [pc, #628]	; (8001300 <MX_GPIO_Init+0x28c>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a9b      	ldr	r2, [pc, #620]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b99      	ldr	r3, [pc, #612]	; (8001300 <MX_GPIO_Init+0x28c>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	4b95      	ldr	r3, [pc, #596]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a94      	ldr	r2, [pc, #592]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b91      	ldr	r3, [pc, #580]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c6:	4b8e      	ldr	r3, [pc, #568]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a8c      	ldr	r2, [pc, #560]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b8a      	ldr	r3, [pc, #552]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e4:	4b86      	ldr	r3, [pc, #536]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a85      	ldr	r2, [pc, #532]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b82      	ldr	r3, [pc, #520]	; (8001300 <MX_GPIO_Init+0x28c>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b7f      	ldr	r3, [pc, #508]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a7d      	ldr	r2, [pc, #500]	; (8001300 <MX_GPIO_Init+0x28c>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b7b      	ldr	r3, [pc, #492]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b77      	ldr	r3, [pc, #476]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	4a76      	ldr	r2, [pc, #472]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001130:	4b73      	ldr	r3, [pc, #460]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800113e:	4b70      	ldr	r3, [pc, #448]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	4b68      	ldr	r3, [pc, #416]	; (8001300 <MX_GPIO_Init+0x28c>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	4a67      	ldr	r2, [pc, #412]	; (8001300 <MX_GPIO_Init+0x28c>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116c:	4b64      	ldr	r3, [pc, #400]	; (8001300 <MX_GPIO_Init+0x28c>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ADC_OS0_Pin|ADC_OS1_Pin|ADC_OS2_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2138      	movs	r1, #56	; 0x38
 800117e:	4861      	ldr	r0, [pc, #388]	; (8001304 <MX_GPIO_Init+0x290>)
 8001180:	f003 f968 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f244 0101 	movw	r1, #16385	; 0x4001
 800118a:	485f      	ldr	r0, [pc, #380]	; (8001308 <MX_GPIO_Init+0x294>)
 800118c:	f003 f962 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_RESET_GPIO_Port, ADC_RESET_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2101      	movs	r1, #1
 8001194:	485d      	ldr	r0, [pc, #372]	; (800130c <MX_GPIO_Init+0x298>)
 8001196:	f003 f95d 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dummy_Data_GPIO_Port, Dummy_Data_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2102      	movs	r1, #2
 800119e:	485b      	ldr	r0, [pc, #364]	; (800130c <MX_GPIO_Init+0x298>)
 80011a0:	f003 f958 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011aa:	4859      	ldr	r0, [pc, #356]	; (8001310 <MX_GPIO_Init+0x29c>)
 80011ac:	f003 f952 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADC_CONV_AB_Pin|ADC_CS_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2103      	movs	r1, #3
 80011b4:	4856      	ldr	r0, [pc, #344]	; (8001310 <MX_GPIO_Init+0x29c>)
 80011b6:	f003 f94d 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2102      	movs	r1, #2
 80011be:	4855      	ldr	r0, [pc, #340]	; (8001314 <MX_GPIO_Init+0x2a0>)
 80011c0:	f003 f948 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	484f      	ldr	r0, [pc, #316]	; (8001318 <MX_GPIO_Init+0x2a4>)
 80011da:	f002 ff7b 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_BUSY_1_Pin ADC_BUSY_2_Pin ADC_BUSY_3_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY_1_Pin|ADC_BUSY_2_Pin|ADC_BUSY_3_Pin;
 80011de:	2307      	movs	r3, #7
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4844      	ldr	r0, [pc, #272]	; (8001304 <MX_GPIO_Init+0x290>)
 80011f2:	f002 ff6f 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_OS0_Pin ADC_OS1_Pin ADC_OS2_Pin */
  GPIO_InitStruct.Pin = ADC_OS0_Pin|ADC_OS1_Pin|ADC_OS2_Pin;
 80011f6:	2338      	movs	r3, #56	; 0x38
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	483d      	ldr	r0, [pc, #244]	; (8001304 <MX_GPIO_Init+0x290>)
 800120e:	f002 ff61 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001212:	f244 0301 	movw	r3, #16385	; 0x4001
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4837      	ldr	r0, [pc, #220]	; (8001308 <MX_GPIO_Init+0x294>)
 800122c:	f002 ff52 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_RESET_Pin */
  GPIO_InitStruct.Pin = ADC_RESET_Pin;
 8001230:	2301      	movs	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_RESET_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	4831      	ldr	r0, [pc, #196]	; (800130c <MX_GPIO_Init+0x298>)
 8001248:	f002 ff44 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dummy_Data_Pin */
  GPIO_InitStruct.Pin = Dummy_Data_Pin;
 800124c:	2302      	movs	r3, #2
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001254:	2301      	movs	r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Dummy_Data_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	482a      	ldr	r0, [pc, #168]	; (800130c <MX_GPIO_Init+0x298>)
 8001264:	f002 ff36 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin ADC_CONV_AB_Pin ADC_CS_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|ADC_CONV_AB_Pin|ADC_CS_Pin;
 8001268:	f240 4303 	movw	r3, #1027	; 0x403
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	4823      	ldr	r0, [pc, #140]	; (8001310 <MX_GPIO_Init+0x29c>)
 8001282:	f002 ff27 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	481c      	ldr	r0, [pc, #112]	; (800130c <MX_GPIO_Init+0x298>)
 800129c:	f002 ff1a 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4819      	ldr	r0, [pc, #100]	; (800131c <MX_GPIO_Init+0x2a8>)
 80012b6:	f002 ff0d 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80012ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80012cc:	230a      	movs	r3, #10
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <MX_GPIO_Init+0x2a8>)
 80012d8:	f002 fefc 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80012dc:	2302      	movs	r3, #2
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <MX_GPIO_Init+0x2a0>)
 80012f4:	f002 feee 	bl	80040d4 <HAL_GPIO_Init>

}
 80012f8:	bf00      	nop
 80012fa:	3738      	adds	r7, #56	; 0x38
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	58024400 	.word	0x58024400
 8001304:	58021400 	.word	0x58021400
 8001308:	58020400 	.word	0x58020400
 800130c:	58021800 	.word	0x58021800
 8001310:	58020c00 	.word	0x58020c00
 8001314:	58021000 	.word	0x58021000
 8001318:	58020800 	.word	0x58020800
 800131c:	58020000 	.word	0x58020000

08001320 <WriteTime>:

/* USER CODE BEGIN 4 */

void WriteTime()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM.TXT", aPLUS);
 8001324:	2233      	movs	r2, #51	; 0x33
 8001326:	4918      	ldr	r1, [pc, #96]	; (8001388 <WriteTime+0x68>)
 8001328:	4818      	ldr	r0, [pc, #96]	; (800138c <WriteTime+0x6c>)
 800132a:	f00c feb9 	bl	800e0a0 <f_open>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <WriteTime+0x70>)
 8001334:	701a      	strb	r2, [r3, #0]
	if(res != FR_OK)
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <WriteTime+0x70>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <WriteTime+0x22>
	{
		Error_Handler();
 800133e:	f000 f93d 	bl	80015bc <Error_Handler>
	}
	sprintf(text, "\n#######################%u\n",(uint)HAL_GetTick());
 8001342:	f002 f98d 	bl	8003660 <HAL_GetTick>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4912      	ldr	r1, [pc, #72]	; (8001394 <WriteTime+0x74>)
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <WriteTime+0x78>)
 800134e:	f011 fecb 	bl	80130e8 <siprintf>
	res = f_write(&SDFile, text, strlen((char *)text), (void *)&byteswritten);
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <WriteTime+0x78>)
 8001354:	f7fe ffdc 	bl	8000310 <strlen>
 8001358:	4602      	mov	r2, r0
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <WriteTime+0x7c>)
 800135c:	490e      	ldr	r1, [pc, #56]	; (8001398 <WriteTime+0x78>)
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <WriteTime+0x6c>)
 8001360:	f00d f863 	bl	800e42a <f_write>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <WriteTime+0x70>)
 800136a:	701a      	strb	r2, [r3, #0]
	if((byteswritten == 0) || (res != FR_OK))
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <WriteTime+0x7c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d006      	beq.n	8001382 <WriteTime+0x62>
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <WriteTime+0x70>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <WriteTime+0x62>
	{

	}
	else
	{
		f_close(&SDFile);
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <WriteTime+0x6c>)
 800137e:	f00d fa81 	bl	800e884 <f_close>
	}
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	08013888 	.word	0x08013888
 800138c:	2402769c 	.word	0x2402769c
 8001390:	24027518 	.word	0x24027518
 8001394:	08013890 	.word	0x08013890
 8001398:	24000000 	.word	0x24000000
 800139c:	24027178 	.word	0x24027178

080013a0 <FS_MOUNT>:



static void FS_MOUNT(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af02      	add	r7, sp, #8
	res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	4914      	ldr	r1, [pc, #80]	; (80013fc <FS_MOUNT+0x5c>)
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <FS_MOUNT+0x60>)
 80013ac:	f00c fe14 	bl	800dfd8 <f_mount>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <FS_MOUNT+0x64>)
 80013b6:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <FS_MOUNT+0x64>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d119      	bne.n	80013f4 <FS_MOUNT+0x54>
	{
		/* check whether the FS has been already created */
		if (isFsCreated == 0)
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <FS_MOUNT+0x68>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d115      	bne.n	80013f4 <FS_MOUNT+0x54>
		{
			res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 80013c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <FS_MOUNT+0x6c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	2107      	movs	r1, #7
 80013d4:	4809      	ldr	r0, [pc, #36]	; (80013fc <FS_MOUNT+0x5c>)
 80013d6:	f00d fa85 	bl	800e8e4 <f_mkfs>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <FS_MOUNT+0x64>)
 80013e0:	701a      	strb	r2, [r3, #0]
			if(res != FR_OK)
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <FS_MOUNT+0x64>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <FS_MOUNT+0x4e>
			{
				Error_Handler();
 80013ea:	f000 f8e7 	bl	80015bc <Error_Handler>
			}
		isFsCreated = 1;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <FS_MOUNT+0x68>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	24027698 	.word	0x24027698
 8001400:	240278cc 	.word	0x240278cc
 8001404:	24027518 	.word	0x24027518
 8001408:	24008028 	.word	0x24008028
 800140c:	24027264 	.word	0x24027264

08001410 <FS_SPAM>:

static void FS_SPAM(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
	res = f_open(&SDFile, "STM32.BIN", aPLUS);
 8001416:	2233      	movs	r2, #51	; 0x33
 8001418:	4917      	ldr	r1, [pc, #92]	; (8001478 <FS_SPAM+0x68>)
 800141a:	4818      	ldr	r0, [pc, #96]	; (800147c <FS_SPAM+0x6c>)
 800141c:	f00c fe40 	bl	800e0a0 <f_open>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <FS_SPAM+0x70>)
 8001426:	701a      	strb	r2, [r3, #0]
	if(res == FR_OK)
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <FS_SPAM+0x70>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11e      	bne.n	800146e <FS_SPAM+0x5e>
	{
		for(int repeat = 0; repeat<100; repeat++)
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	e00d      	b.n	8001452 <FS_SPAM+0x42>
		{
			/* Write data to the text file */
			res = f_write(&SDFile, stext, sizeof(stext), (void *)&byteswritten);
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <FS_SPAM+0x74>)
 8001438:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800143c:	4912      	ldr	r1, [pc, #72]	; (8001488 <FS_SPAM+0x78>)
 800143e:	480f      	ldr	r0, [pc, #60]	; (800147c <FS_SPAM+0x6c>)
 8001440:	f00c fff3 	bl	800e42a <f_write>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <FS_SPAM+0x70>)
 800144a:	701a      	strb	r2, [r3, #0]
		for(int repeat = 0; repeat<100; repeat++)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b63      	cmp	r3, #99	; 0x63
 8001456:	ddee      	ble.n	8001436 <FS_SPAM+0x26>
		}

		if((byteswritten > 0) && (res == FR_OK))
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <FS_SPAM+0x74>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <FS_SPAM+0x5e>
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <FS_SPAM+0x70>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <FS_SPAM+0x5e>
		{
			/* Close the open text file */
			f_close(&SDFile);
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <FS_SPAM+0x6c>)
 800146a:	f00d fa0b 	bl	800e884 <f_close>
		}
	}
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	080138ac 	.word	0x080138ac
 800147c:	2402769c 	.word	0x2402769c
 8001480:	24027518 	.word	0x24027518
 8001484:	24027178 	.word	0x24027178
 8001488:	24000028 	.word	0x24000028

0800148c <EnableMemMappedQuadMode>:


void EnableMemMappedQuadMode(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b096      	sub	sp, #88	; 0x58
 8001490:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	HAL_StatusTypeDef res;
//	OSPI_MemoryMappedTypeDef sMemMappedCfg;

	sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
	sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.FlashId = HAL_OSPI_FLASH_ID_1;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_NONE;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
	// sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
	// sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
	// sCommand.Instruction = 0;

	sCommand.AddressMode = HAL_OSPI_ADDRESS_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
	// sCommand.AddressSize = HAL_OSPI_ADDRESS_8_BITS;
	// sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
	// sCommand.Address = 0xF;
	sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30

	sCommand.DataMode = HAL_OSPI_DATA_8_LINES;
 80014ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	// Using Single Data Rate (SDR)
	sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = HAL_OSPI_SIOO_INST_ONLY_FIRST_CMD;
 80014b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80014bc:	653b      	str	r3, [r7, #80]	; 0x50

	sCommand.NbData = 64;
 80014be:	2340      	movs	r3, #64	; 0x40
 80014c0:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	64bb      	str	r3, [r7, #72]	; 0x48

	res = HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4619      	mov	r1, r3
 80014ce:	4808      	ldr	r0, [pc, #32]	; (80014f0 <EnableMemMappedQuadMode+0x64>)
 80014d0:	f000 fd9a 	bl	8002008 <HAL_OSPI_Command>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (res != HAL_OK)
 80014da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <EnableMemMappedQuadMode+0x5a>
	{
		Error_Handler();
 80014e2:	f000 f86b 	bl	80015bc <Error_Handler>
	}
}
 80014e6:	bf00      	nop
 80014e8:	3758      	adds	r7, #88	; 0x58
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2402717c 	.word	0x2402717c

080014f4 <StartSDCardTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDCardTask */
void StartSDCardTask(void *argument)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Disable SD card task when integrating ADC
	vTaskSuspend(NULL);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f00f fe07 	bl	8011110 <vTaskSuspend>
	int counter = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
	vTaskSuspend(ServiceADCHandle);
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <StartSDCardTask+0x6c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f00f fe00 	bl	8011110 <vTaskSuspend>
	FS_MOUNT();
 8001510:	f7ff ff46 	bl	80013a0 <FS_MOUNT>
	vTaskResume(ServiceADCHandle);
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <StartSDCardTask+0x6c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f00f fea1 	bl	8011260 <vTaskResume>
  /* Infinite loop */
  for(;;)
  {
	counter++;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2102      	movs	r1, #2
 8001528:	480e      	ldr	r0, [pc, #56]	; (8001564 <StartSDCardTask+0x70>)
 800152a:	f002 ff93 	bl	8004454 <HAL_GPIO_WritePin>
	WriteTime();
 800152e:	f7ff fef7 	bl	8001320 <WriteTime>
	FS_SPAM();
 8001532:	f7ff ff6d 	bl	8001410 <FS_SPAM>
	WriteTime();
 8001536:	f7ff fef3 	bl	8001320 <WriteTime>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2102      	movs	r1, #2
 800153e:	4809      	ldr	r0, [pc, #36]	; (8001564 <StartSDCardTask+0x70>)
 8001540:	f002 ff88 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8001544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <StartSDCardTask+0x74>)
 800154a:	f002 ff9c 	bl	8004486 <HAL_GPIO_TogglePin>
	if(counter>=1){
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	dde4      	ble.n	800151e <StartSDCardTask+0x2a>
		osDelay(10000);
 8001554:	f242 7010 	movw	r0, #10000	; 0x2710
 8001558:	f00d ffe9 	bl	800f52e <osDelay>
	counter++;
 800155c:	e7df      	b.n	800151e <StartSDCardTask+0x2a>
 800155e:	bf00      	nop
 8001560:	24027514 	.word	0x24027514
 8001564:	58021000 	.word	0x58021000
 8001568:	58020400 	.word	0x58020400

0800156c <StartServiceADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServiceADC */
void StartServiceADC(void *argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	//vTaskSuspend(NULL);
  /* Infinite loop */
	/*
	* Perform task every xFrequency ticks
	*/
	const TickType_t xFrequency = 1;
 8001574:	2301      	movs	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8001578:	f00f ffec 	bl	8011554 <xTaskGetTickCount>
 800157c:	4603      	mov	r3, r0
 800157e:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	ADC_SERVICE_ROUTINE(&ADC);
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <StartServiceADC+0x28>)
 8001582:	f7ff f971 	bl	8000868 <ADC_SERVICE_ROUTINE>
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	68f9      	ldr	r1, [r7, #12]
 800158c:	4618      	mov	r0, r3
 800158e:	f00f fd0d 	bl	8010fac <vTaskDelayUntil>
	ADC_SERVICE_ROUTINE(&ADC);
 8001592:	e7f5      	b.n	8001580 <StartServiceADC+0x14>
 8001594:	2402704c 	.word	0x2402704c

08001598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015aa:	f002 f845 	bl	8003638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40010000 	.word	0x40010000

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2101      	movs	r1, #1
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <Error_Handler+0x2c>)
 80015c6:	f002 ff45 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2102      	movs	r1, #2
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <Error_Handler+0x30>)
 80015d0:	f002 ff40 	bl	8004454 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <Error_Handler+0x2c>)
 80015dc:	f002 ff3a 	bl	8004454 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x28>
 80015e6:	bf00      	nop
 80015e8:	58020400 	.word	0x58020400
 80015ec:	58021000 	.word	0x58021000

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_MspInit+0x38>)
 80015f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_MspInit+0x38>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_MspInit+0x38>)
 8001608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	210f      	movs	r1, #15
 8001618:	f06f 0001 	mvn.w	r0, #1
 800161c:	f002 f91c 	bl	8003858 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58024400 	.word	0x58024400

0800162c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a59      	ldr	r2, [pc, #356]	; (80017b0 <HAL_ETH_MspInit+0x184>)
 800164a:	4293      	cmp	r3, r2
 800164c:	f040 80ab 	bne.w	80017a6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001652:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001656:	4a57      	ldr	r2, [pc, #348]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800165c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001660:	4b54      	ldr	r3, [pc, #336]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001662:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800166a:	623b      	str	r3, [r7, #32]
 800166c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800166e:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001674:	4a4f      	ldr	r2, [pc, #316]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800167e:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800168c:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 800168e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800169c:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 800169e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b0:	4a40      	ldr	r2, [pc, #256]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ec:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170a:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 800170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_ETH_MspInit+0x188>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001722:	2332      	movs	r3, #50	; 0x32
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001732:	230b      	movs	r3, #11
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	481e      	ldr	r0, [pc, #120]	; (80017b8 <HAL_ETH_MspInit+0x18c>)
 800173e:	f002 fcc9 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001742:	2386      	movs	r3, #134	; 0x86
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001752:	230b      	movs	r3, #11
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	4817      	ldr	r0, [pc, #92]	; (80017bc <HAL_ETH_MspInit+0x190>)
 800175e:	f002 fcb9 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001774:	230b      	movs	r3, #11
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4810      	ldr	r0, [pc, #64]	; (80017c0 <HAL_ETH_MspInit+0x194>)
 8001780:	f002 fca8 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001784:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001796:	230b      	movs	r3, #11
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <HAL_ETH_MspInit+0x198>)
 80017a2:	f002 fc97 	bl	80040d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3738      	adds	r7, #56	; 0x38
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40028000 	.word	0x40028000
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020800 	.word	0x58020800
 80017bc:	58020000 	.word	0x58020000
 80017c0:	58020400 	.word	0x58020400
 80017c4:	58021800 	.word	0x58021800

080017c8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a83      	ldr	r2, [pc, #524]	; (80019f4 <HAL_OSPI_MspInit+0x22c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	f040 80ff 	bne.w	80019ea <HAL_OSPI_MspInit+0x222>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80017ec:	4b82      	ldr	r3, [pc, #520]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 80017ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017f2:	4a81      	ldr	r2, [pc, #516]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 80017f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80017fc:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 80017fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800180a:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 800180c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001810:	4a79      	ldr	r2, [pc, #484]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 8001812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001816:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800181a:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 800181c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001828:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	4a72      	ldr	r2, [pc, #456]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 8001830:	f043 0310 	orr.w	r3, r3, #16
 8001834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001846:	4b6c      	ldr	r3, [pc, #432]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	4a6a      	ldr	r2, [pc, #424]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 800184e:	f043 0320 	orr.w	r3, r3, #32
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001856:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a63      	ldr	r2, [pc, #396]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <HAL_OSPI_MspInit+0x230>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    PC3_C     ------> OCTOSPIM_P1_IO6
    PE7     ------> OCTOSPIM_P1_IO4
    PE10     ------> OCTOSPIM_P1_IO7
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001882:	2304      	movs	r3, #4
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001892:	2309      	movs	r3, #9
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4857      	ldr	r0, [pc, #348]	; (80019fc <HAL_OSPI_MspInit+0x234>)
 800189e:	f002 fc19 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80018a2:	f44f 7350 	mov.w	r3, #832	; 0x340
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80018b4:	230a      	movs	r3, #10
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4850      	ldr	r0, [pc, #320]	; (8001a00 <HAL_OSPI_MspInit+0x238>)
 80018c0:	f002 fc08 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80018d6:	2309      	movs	r3, #9
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	4847      	ldr	r0, [pc, #284]	; (8001a00 <HAL_OSPI_MspInit+0x238>)
 80018e2:	f002 fbf7 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e6:	230c      	movs	r3, #12
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 80018f6:	2304      	movs	r3, #4
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4840      	ldr	r0, [pc, #256]	; (8001a04 <HAL_OSPI_MspInit+0x23c>)
 8001902:	f002 fbe7 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001906:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001918:	230a      	movs	r3, #10
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	4836      	ldr	r0, [pc, #216]	; (80019fc <HAL_OSPI_MspInit+0x234>)
 8001924:	f002 fbd6 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 800193a:	230b      	movs	r3, #11
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	482d      	ldr	r0, [pc, #180]	; (80019fc <HAL_OSPI_MspInit+0x234>)
 8001946:	f002 fbc5 	bl	80040d4 <HAL_GPIO_Init>

    /* OCTOSPI1 MDMA Init */
    /* OCTOSPI1_FIFO_TH Init */
    hmdma_octospi1_fifo_th.Instance = MDMA_Channel1;
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 800194c:	4a2f      	ldr	r2, [pc, #188]	; (8001a0c <HAL_OSPI_MspInit+0x244>)
 800194e:	601a      	str	r2, [r3, #0]
    hmdma_octospi1_fifo_th.Init.Request = MDMA_REQUEST_OCTOSPI1_FIFO_TH;
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 8001952:	2216      	movs	r2, #22
 8001954:	605a      	str	r2, [r3, #4]
    hmdma_octospi1_fifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
    hmdma_octospi1_fifo_th.Init.Priority = MDMA_PRIORITY_LOW;
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
    hmdma_octospi1_fifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
    hmdma_octospi1_fifo_th.Init.SourceInc = MDMA_SRC_INC_DOUBLEWORD;
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 800196a:	f240 3202 	movw	r2, #770	; 0x302
 800196e:	615a      	str	r2, [r3, #20]
    hmdma_octospi1_fifo_th.Init.DestinationInc = MDMA_DEST_INC_DOUBLEWORD;
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 8001972:	f640 4208 	movw	r2, #3080	; 0xc08
 8001976:	619a      	str	r2, [r3, #24]
    hmdma_octospi1_fifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 800197a:	2220      	movs	r2, #32
 800197c:	61da      	str	r2, [r3, #28]
    hmdma_octospi1_fifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	621a      	str	r2, [r3, #32]
    hmdma_octospi1_fifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 8001986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198a:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_octospi1_fifo_th.Init.BufferTransferLength = 1;
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 800198e:	2201      	movs	r2, #1
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_octospi1_fifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 8001994:	2200      	movs	r2, #0
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_octospi1_fifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 800199a:	2200      	movs	r2, #0
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_octospi1_fifo_th.Init.SourceBlockAddressOffset = 0;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_octospi1_fifo_th.Init.DestBlockAddressOffset = 0;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_octospi1_fifo_th) != HAL_OK)
 80019aa:	4817      	ldr	r0, [pc, #92]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 80019ac:	f002 fd85 	bl	80044ba <HAL_MDMA_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_OSPI_MspInit+0x1f2>
    {
      Error_Handler();
 80019b6:	f7ff fe01 	bl	80015bc <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_octospi1_fifo_th, 0, 0) != HAL_OK)
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 80019c0:	f002 fdc7 	bl	8004552 <HAL_MDMA_ConfigPostRequestMask>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_OSPI_MspInit+0x206>
    {
      Error_Handler();
 80019ca:	f7ff fdf7 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(hospi,hmdma,hmdma_octospi1_fifo_th);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 80019d2:	651a      	str	r2, [r3, #80]	; 0x50
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_OSPI_MspInit+0x240>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	205c      	movs	r0, #92	; 0x5c
 80019e0:	f001 ff3a 	bl	8003858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80019e4:	205c      	movs	r0, #92	; 0x5c
 80019e6:	f001 ff51 	bl	800388c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80019ea:	bf00      	nop
 80019ec:	3730      	adds	r7, #48	; 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	52005000 	.word	0x52005000
 80019f8:	58024400 	.word	0x58024400
 80019fc:	58021000 	.word	0x58021000
 8001a00:	58021400 	.word	0x58021400
 8001a04:	58020800 	.word	0x58020800
 8001a08:	24026fe0 	.word	0x24026fe0
 8001a0c:	52000080 	.word	0x52000080

08001a10 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ae8 <HAL_SD_MspInit+0xd8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d155      	bne.n	8001ade <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a38:	4a2c      	ldr	r2, [pc, #176]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a50:	4b26      	ldr	r3, [pc, #152]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	4a25      	ldr	r2, [pc, #148]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_SD_MspInit+0xdc>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a8c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a90:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4811      	ldr	r0, [pc, #68]	; (8001af0 <HAL_SD_MspInit+0xe0>)
 8001aaa:	f002 fb13 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001abe:	230c      	movs	r3, #12
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480a      	ldr	r0, [pc, #40]	; (8001af4 <HAL_SD_MspInit+0xe4>)
 8001aca:	f002 fb03 	bl	80040d4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	2031      	movs	r0, #49	; 0x31
 8001ad4:	f001 fec0 	bl	8003858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001ad8:	2031      	movs	r0, #49	; 0x31
 8001ada:	f001 fed7 	bl	800388c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	52007000 	.word	0x52007000
 8001aec:	58024400 	.word	0x58024400
 8001af0:	58020800 	.word	0x58020800
 8001af4:	58020c00 	.word	0x58020c00

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_TIM_Base_MspInit+0x3c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10e      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b10:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40001c00 	.word	0x40001c00
 8001b38:	58024400 	.word	0x58024400

08001b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0b6      	sub	sp, #216	; 0xd8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	22b4      	movs	r2, #180	; 0xb4
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f011 f9e7 	bl	8012f30 <memset>
  if(huart->Instance==USART3)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_UART_MspInit+0xc0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d142      	bne.n	8001bf2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 ff04 	bl	8005988 <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b86:	f7ff fd19 	bl	80015bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_UART_MspInit+0xc4>)
 8001b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_UART_MspInit+0xc4>)
 8001b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_UART_MspInit+0xc4>)
 8001b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_UART_MspInit+0xc4>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <HAL_UART_MspInit+0xc4>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_UART_MspInit+0xc4>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be0:	2307      	movs	r3, #7
 8001be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <HAL_UART_MspInit+0xc8>)
 8001bee:	f002 fa71 	bl	80040d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	37d8      	adds	r7, #216	; 0xd8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40004800 	.word	0x40004800
 8001c00:	58024400 	.word	0x58024400
 8001c04:	58020c00 	.word	0x58020c00

08001c08 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f001 fd24 	bl	8003660 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e0a6      	b.n	8001d74 <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 809f 	bne.w	8001d74 <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fdc6 	bl	80017c8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001c3c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fb61 	bl	8002308 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_OSPI_Init+0x178>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68d1      	ldr	r1, [r2, #12]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6912      	ldr	r2, [r2, #16]
 8001c58:	3a01      	subs	r2, #1
 8001c5a:	0412      	lsls	r2, r2, #16
 8001c5c:	4311      	orrs	r1, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6952      	ldr	r2, [r2, #20]
 8001c62:	3a01      	subs	r2, #1
 8001c64:	0212      	lsls	r2, r2, #8
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	69d2      	ldr	r2, [r2, #28]
 8001c74:	4311      	orrs	r1, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1a      	ldr	r2, [r3, #32]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cae:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	021a      	lsls	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f001 f878 	bl	8002dcc <OSPI_WaitFlagStateUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d146      	bne.n	8001d74 <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d1c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d107      	bne.n	8001d5c <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0202 	orr.w	r2, r2, #2
 8001d5a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d64:	d103      	bne.n	8001d6e <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d6c:	e002      	b.n	8001d74 <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	f8e0f88c 	.word	0xf8e0f88c

08001d84 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3350      	adds	r3, #80	; 0x50
 8001d92:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d03a      	beq.n	8001e2a <HAL_OSPI_IRQHandler+0xa6>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d035      	beq.n	8001e2a <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b18      	cmp	r3, #24
 8001dc2:	d10f      	bne.n	8001de4 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001de2:	e012      	b.n	8001e0a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b28      	cmp	r3, #40	; 0x28
 8001de8:	d10f      	bne.n	8001e0a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e04:	1e5a      	subs	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e20:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fa34 	bl	8002290 <HAL_OSPI_FifoThresholdCallback>
 8001e28:	e0e7      	b.n	8001ffa <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d067      	beq.n	8001f04 <HAL_OSPI_IRQHandler+0x180>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d062      	beq.n	8001f04 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b28      	cmp	r3, #40	; 0x28
 8001e42:	d131      	bne.n	8001ea8 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d015      	beq.n	8001e78 <HAL_OSPI_IRQHandler+0xf4>
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001e76:	e0bd      	b.n	8001ff4 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 80b9 	bne.w	8001ff4 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2202      	movs	r2, #2
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001e98:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fa09 	bl	80022b8 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001ea6:	e0a5      	b.n	8001ff4 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2202      	movs	r2, #2
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b18      	cmp	r3, #24
 8001eca:	d103      	bne.n	8001ed4 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f9fd 	bl	80022cc <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001ed2:	e08f      	b.n	8001ff4 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d103      	bne.n	8001ee2 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f9e2 	bl	80022a4 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001ee0:	e088      	b.n	8001ff4 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee8:	f040 8084 	bne.w	8001ff4 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f9c1 	bl	800227c <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001efa:	e07b      	b.n	8001ff4 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f9b3 	bl	8002268 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001f02:	e077      	b.n	8001ff4 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01e      	beq.n	8001f4c <HAL_OSPI_IRQHandler+0x1c8>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d019      	beq.n	8001f4c <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f9cb 	bl	80022e0 <HAL_OSPI_StatusMatchCallback>
 8001f4a:	e056      	b.n	8001ffa <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03c      	beq.n	8001fd0 <HAL_OSPI_IRQHandler+0x24c>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d037      	beq.n	8001fd0 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2201      	movs	r2, #1
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001f76:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01a      	beq.n	8001fc2 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_OSPI_IRQHandler+0x280>)
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fb24 	bl	80045f6 <HAL_MDMA_Abort_IT>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f954 	bl	8002268 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8001fc0:	e01a      	b.n	8001ff8 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f94d 	bl	8002268 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8001fce:	e013      	b.n	8001ff8 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00f      	beq.n	8001ffa <HAL_OSPI_IRQHandler+0x276>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f981 	bl	80022f4 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001ff2:	e002      	b.n	8001ffa <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8001ff4:	bf00      	nop
 8001ff6:	e000      	b.n	8001ffa <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8001ff8:	bf00      	nop
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	08002d55 	.word	0x08002d55

08002008 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002014:	f001 fb24 	bl	8003660 <HAL_GetTick>
 8002018:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d104      	bne.n	8002036 <HAL_OSPI_Command+0x2e>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002034:	d115      	bne.n	8002062 <HAL_OSPI_Command+0x5a>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b14      	cmp	r3, #20
 800203a:	d107      	bne.n	800204c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d00e      	beq.n	8002062 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d00a      	beq.n	8002062 <HAL_OSPI_Command+0x5a>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b24      	cmp	r3, #36	; 0x24
 8002050:	d15b      	bne.n	800210a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d003      	beq.n	8002062 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800205e:	2b03      	cmp	r3, #3
 8002060:	d153      	bne.n	800210a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2200      	movs	r2, #0
 800206a:	2120      	movs	r1, #32
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fead 	bl	8002dcc <OSPI_WaitFlagStateUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d14c      	bne.n	8002116 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fed9 	bl	8002e3c <OSPI_ConfigCmd>
 800208a:	4603      	mov	r3, r0
 800208c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800208e:	7ffb      	ldrb	r3, [r7, #31]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d140      	bne.n	8002116 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10e      	bne.n	80020ba <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2201      	movs	r2, #1
 80020a4:	2102      	movs	r1, #2
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fe90 	bl	8002dcc <OSPI_WaitFlagStateUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2202      	movs	r2, #2
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80020b8:	e02d      	b.n	8002116 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2204      	movs	r2, #4
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80020c8:	e025      	b.n	8002116 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10b      	bne.n	80020ea <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	2b24      	cmp	r3, #36	; 0x24
 80020d8:	d103      	bne.n	80020e2 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2204      	movs	r2, #4
 80020de:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80020e0:	e019      	b.n	8002116 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2214      	movs	r2, #20
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80020e8:	e015      	b.n	8002116 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d111      	bne.n	8002116 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	2b14      	cmp	r3, #20
 80020f8:	d103      	bne.n	8002102 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2204      	movs	r2, #4
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8002100:	e009      	b.n	8002116 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2224      	movs	r2, #36	; 0x24
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8002108:	e005      	b.n	8002116 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2210      	movs	r2, #16
 8002112:	659a      	str	r2, [r3, #88]	; 0x58
 8002114:	e000      	b.n	8002118 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8002116:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002118:	7ffb      	ldrb	r3, [r7, #31]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08c      	sub	sp, #48	; 0x30
 8002126:	af02      	add	r7, sp, #8
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800212e:	f001 fa97 	bl	8003660 <HAL_GetTick>
 8002132:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3350      	adds	r3, #80	; 0x50
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002142:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800214c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2208      	movs	r2, #8
 800215e:	659a      	str	r2, [r3, #88]	; 0x58
 8002160:	e07c      	b.n	800225c <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	2b04      	cmp	r3, #4
 8002168:	d172      	bne.n	8002250 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002196:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021a0:	d104      	bne.n	80021ac <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	649a      	str	r2, [r3, #72]	; 0x48
 80021aa:	e011      	b.n	80021d0 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80021b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	649a      	str	r2, [r3, #72]	; 0x48
 80021c4:	e004      	b.n	80021d0 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	2201      	movs	r2, #1
 80021d8:	2106      	movs	r1, #6
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fdf6 	bl	8002dcc <OSPI_WaitFlagStateUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80021e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d114      	bne.n	8002218 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	64da      	str	r2, [r3, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1dc      	bne.n	80021d0 <HAL_OSPI_Receive+0xae>
 8002216:	e000      	b.n	800221a <HAL_OSPI_Receive+0xf8>
          break;
 8002218:	bf00      	nop

      if (status == HAL_OK)
 800221a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11c      	bne.n	800225c <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2201      	movs	r2, #1
 800222a:	2102      	movs	r1, #2
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fdcd 	bl	8002dcc <OSPI_WaitFlagStateUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8002238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2202      	movs	r2, #2
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2202      	movs	r2, #2
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
 800224e:	e005      	b.n	800225c <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2210      	movs	r2, #16
 800225a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800225c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002260:	4618      	mov	r0, r3
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b094      	sub	sp, #80	; 0x50
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4aa3      	ldr	r2, [pc, #652]	; (80025d4 <HAL_OSPIM_Config+0x2ac>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d105      	bne.n	8002356 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002354:	e004      	b.n	8002360 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002356:	2301      	movs	r3, #1
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002366:	e01d      	b.n	80023a4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800236c:	3301      	adds	r3, #1
 800236e:	b2d8      	uxtb	r0, r3
 8002370:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002374:	f107 0114 	add.w	r1, r7, #20
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	4619      	mov	r1, r3
 8002384:	f000 fee6 	bl	8003154 <OSPIM_GetConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2208      	movs	r2, #8
 8002398:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800239a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800239e:	3301      	adds	r3, #1
 80023a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80023a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d9dd      	bls.n	8002368 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80023ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 84c3 	bne.w	8002d3c <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80023b6:	4b87      	ldr	r3, [pc, #540]	; (80025d4 <HAL_OSPIM_Config+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80023c2:	4b84      	ldr	r3, [pc, #528]	; (80025d4 <HAL_OSPIM_Config+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a83      	ldr	r2, [pc, #524]	; (80025d4 <HAL_OSPIM_Config+0x2ac>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80023ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80023da:	4b7f      	ldr	r3, [pc, #508]	; (80025d8 <HAL_OSPIM_Config+0x2b0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80023e6:	4b7c      	ldr	r3, [pc, #496]	; (80025d8 <HAL_OSPIM_Config+0x2b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7b      	ldr	r2, [pc, #492]	; (80025d8 <HAL_OSPIM_Config+0x2b0>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80023f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80023fe:	4977      	ldr	r1, [pc, #476]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 8002400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800240e:	4413      	add	r3, r2
 8002410:	3b34      	subs	r3, #52	; 0x34
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3b01      	subs	r3, #1
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	486f      	ldr	r0, [pc, #444]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 800241e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800242c:	4413      	add	r3, r2
 800242e:	3b34      	subs	r3, #52	; 0x34
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3b01      	subs	r3, #1
 8002434:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4403      	add	r3, r0
 800243c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800243e:	4b67      	ldr	r3, [pc, #412]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80ca 	beq.w	80025e0 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800244c:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a62      	ldr	r2, [pc, #392]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002458:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800245c:	2b01      	cmp	r3, #1
 800245e:	f040 8178 	bne.w	8002752 <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8002462:	495e      	ldr	r1, [pc, #376]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 8002464:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002474:	4413      	add	r3, r2
 8002476:	3b3c      	subs	r3, #60	; 0x3c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	4856      	ldr	r0, [pc, #344]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 8002484:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002494:	4413      	add	r3, r2
 8002496:	3b3c      	subs	r3, #60	; 0x3c
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3b01      	subs	r3, #1
 800249c:	f041 0202 	orr.w	r2, r1, #2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4403      	add	r3, r0
 80024a4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80024a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024b6:	4413      	add	r3, r2
 80024b8:	3b38      	subs	r3, #56	; 0x38
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d021      	beq.n	8002504 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 80024c0:	4946      	ldr	r1, [pc, #280]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 80024c2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024d2:	4413      	add	r3, r2
 80024d4:	3b38      	subs	r3, #56	; 0x38
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3b01      	subs	r3, #1
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	483e      	ldr	r0, [pc, #248]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 80024e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80024f2:	4413      	add	r3, r2
 80024f4:	3b38      	subs	r3, #56	; 0x38
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	f041 0220 	orr.w	r2, r1, #32
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4403      	add	r3, r0
 8002502:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002504:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002514:	4413      	add	r3, r2
 8002516:	3b30      	subs	r3, #48	; 0x30
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d025      	beq.n	800256a <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 800251e:	492f      	ldr	r1, [pc, #188]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 8002520:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002530:	4413      	add	r3, r2
 8002532:	3b30      	subs	r3, #48	; 0x30
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3b01      	subs	r3, #1
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	4826      	ldr	r0, [pc, #152]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 8002544:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002554:	4413      	add	r3, r2
 8002556:	3b30      	subs	r3, #48	; 0x30
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4403      	add	r3, r0
 8002568:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800256a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800257a:	4413      	add	r3, r2
 800257c:	3b2c      	subs	r3, #44	; 0x2c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80e6 	beq.w	8002752 <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8002586:	4915      	ldr	r1, [pc, #84]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 8002588:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002598:	4413      	add	r3, r2
 800259a:	3b2c      	subs	r3, #44	; 0x2c
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	480c      	ldr	r0, [pc, #48]	; (80025dc <HAL_OSPIM_Config+0x2b4>)
 80025ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025bc:	4413      	add	r3, r2
 80025be:	3b2c      	subs	r3, #44	; 0x2c
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4403      	add	r3, r0
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	e0be      	b.n	8002752 <HAL_OSPIM_Config+0x42a>
 80025d4:	52005000 	.word	0x52005000
 80025d8:	5200a000 	.word	0x5200a000
 80025dc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80025e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025ee:	4413      	add	r3, r2
 80025f0:	3b3c      	subs	r3, #60	; 0x3c
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80ac 	beq.w	8002752 <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80025fa:	499d      	ldr	r1, [pc, #628]	; (8002870 <HAL_OSPIM_Config+0x548>)
 80025fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800260a:	4413      	add	r3, r2
 800260c:	3b3c      	subs	r3, #60	; 0x3c
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3b01      	subs	r3, #1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	4895      	ldr	r0, [pc, #596]	; (8002870 <HAL_OSPIM_Config+0x548>)
 800261a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002628:	4413      	add	r3, r2
 800262a:	3b3c      	subs	r3, #60	; 0x3c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	f021 0201 	bic.w	r2, r1, #1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4403      	add	r3, r0
 8002638:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800263a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002648:	4413      	add	r3, r2
 800264a:	3b38      	subs	r3, #56	; 0x38
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01f      	beq.n	8002692 <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002652:	4987      	ldr	r1, [pc, #540]	; (8002870 <HAL_OSPIM_Config+0x548>)
 8002654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002662:	4413      	add	r3, r2
 8002664:	3b38      	subs	r3, #56	; 0x38
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3b01      	subs	r3, #1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	487f      	ldr	r0, [pc, #508]	; (8002870 <HAL_OSPIM_Config+0x548>)
 8002672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002680:	4413      	add	r3, r2
 8002682:	3b38      	subs	r3, #56	; 0x38
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3b01      	subs	r3, #1
 8002688:	f021 0210 	bic.w	r2, r1, #16
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4403      	add	r3, r0
 8002690:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026a0:	4413      	add	r3, r2
 80026a2:	3b30      	subs	r3, #48	; 0x30
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d023      	beq.n	80026f2 <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80026aa:	4971      	ldr	r1, [pc, #452]	; (8002870 <HAL_OSPIM_Config+0x548>)
 80026ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026ba:	4413      	add	r3, r2
 80026bc:	3b30      	subs	r3, #48	; 0x30
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	4868      	ldr	r0, [pc, #416]	; (8002870 <HAL_OSPIM_Config+0x548>)
 80026ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026dc:	4413      	add	r3, r2
 80026de:	3b30      	subs	r3, #48	; 0x30
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4403      	add	r3, r0
 80026f0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80026f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002700:	4413      	add	r3, r2
 8002702:	3b2c      	subs	r3, #44	; 0x2c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d023      	beq.n	8002752 <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800270a:	4959      	ldr	r1, [pc, #356]	; (8002870 <HAL_OSPIM_Config+0x548>)
 800270c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800271a:	4413      	add	r3, r2
 800271c:	3b2c      	subs	r3, #44	; 0x2c
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	4850      	ldr	r0, [pc, #320]	; (8002870 <HAL_OSPIM_Config+0x548>)
 800272e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800273c:	4413      	add	r3, r2
 800273e:	3b2c      	subs	r3, #44	; 0x2c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3b01      	subs	r3, #1
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4403      	add	r3, r0
 8002750:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002766:	4413      	add	r3, r2
 8002768:	3b3c      	subs	r3, #60	; 0x3c
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4299      	cmp	r1, r3
 800276e:	d03c      	beq.n	80027ea <HAL_OSPIM_Config+0x4c2>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002784:	4413      	add	r3, r2
 8002786:	3b38      	subs	r3, #56	; 0x38
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4299      	cmp	r1, r3
 800278c:	d02d      	beq.n	80027ea <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027a2:	4413      	add	r3, r2
 80027a4:	3b34      	subs	r3, #52	; 0x34
 80027a6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80027a8:	4299      	cmp	r1, r3
 80027aa:	d01e      	beq.n	80027ea <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	68d9      	ldr	r1, [r3, #12]
 80027b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027c0:	4413      	add	r3, r2
 80027c2:	3b30      	subs	r3, #48	; 0x30
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4299      	cmp	r1, r3
 80027c8:	d00f      	beq.n	80027ea <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6919      	ldr	r1, [r3, #16]
 80027ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027de:	4413      	add	r3, r2
 80027e0:	3b2c      	subs	r3, #44	; 0x2c
 80027e2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80027e4:	4299      	cmp	r1, r3
 80027e6:	f040 811e 	bne.w	8002a26 <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027fe:	4413      	add	r3, r2
 8002800:	3b3c      	subs	r3, #60	; 0x3c
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4299      	cmp	r1, r3
 8002806:	d135      	bne.n	8002874 <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800281c:	4413      	add	r3, r2
 800281e:	3b38      	subs	r3, #56	; 0x38
 8002820:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002822:	4299      	cmp	r1, r3
 8002824:	d126      	bne.n	8002874 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	68d9      	ldr	r1, [r3, #12]
 800282a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800283a:	4413      	add	r3, r2
 800283c:	3b30      	subs	r3, #48	; 0x30
 800283e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002840:	4299      	cmp	r1, r3
 8002842:	d117      	bne.n	8002874 <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	6919      	ldr	r1, [r3, #16]
 8002848:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002858:	4413      	add	r3, r2
 800285a:	3b2c      	subs	r3, #44	; 0x2c
 800285c:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800285e:	4299      	cmp	r1, r3
 8002860:	d108      	bne.n	8002874 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_OSPIM_Config+0x548>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a02      	ldr	r2, [pc, #8]	; (8002870 <HAL_OSPIM_Config+0x548>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e0da      	b.n	8002a26 <HAL_OSPIM_Config+0x6fe>
 8002870:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002874:	49c2      	ldr	r1, [pc, #776]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002876:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002886:	4413      	add	r3, r2
 8002888:	3b3c      	subs	r3, #60	; 0x3c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	48ba      	ldr	r0, [pc, #744]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002896:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028a6:	4413      	add	r3, r2
 80028a8:	3b3c      	subs	r3, #60	; 0x3c
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	f021 0201 	bic.w	r2, r1, #1
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4403      	add	r3, r0
 80028b6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80028b8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028c8:	4413      	add	r3, r2
 80028ca:	3b38      	subs	r3, #56	; 0x38
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d021      	beq.n	8002916 <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80028d2:	49ab      	ldr	r1, [pc, #684]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 80028d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028e4:	4413      	add	r3, r2
 80028e6:	3b38      	subs	r3, #56	; 0x38
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	48a3      	ldr	r0, [pc, #652]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 80028f4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002904:	4413      	add	r3, r2
 8002906:	3b38      	subs	r3, #56	; 0x38
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3b01      	subs	r3, #1
 800290c:	f021 0210 	bic.w	r2, r1, #16
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4403      	add	r3, r0
 8002914:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002916:	499a      	ldr	r1, [pc, #616]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002918:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002928:	4413      	add	r3, r2
 800292a:	3b34      	subs	r3, #52	; 0x34
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	4892      	ldr	r0, [pc, #584]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002938:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002948:	4413      	add	r3, r2
 800294a:	3b34      	subs	r3, #52	; 0x34
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3b01      	subs	r3, #1
 8002950:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4403      	add	r3, r0
 8002958:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800295a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800296a:	4413      	add	r3, r2
 800296c:	3b30      	subs	r3, #48	; 0x30
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d025      	beq.n	80029c0 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002974:	4982      	ldr	r1, [pc, #520]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002976:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002986:	4413      	add	r3, r2
 8002988:	3b30      	subs	r3, #48	; 0x30
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	4879      	ldr	r0, [pc, #484]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 800299a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029aa:	4413      	add	r3, r2
 80029ac:	3b30      	subs	r3, #48	; 0x30
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4403      	add	r3, r0
 80029be:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80029c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029d0:	4413      	add	r3, r2
 80029d2:	3b2c      	subs	r3, #44	; 0x2c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d025      	beq.n	8002a26 <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80029da:	4969      	ldr	r1, [pc, #420]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 80029dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029ec:	4413      	add	r3, r2
 80029ee:	3b2c      	subs	r3, #44	; 0x2c
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	4860      	ldr	r0, [pc, #384]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a00:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a10:	4413      	add	r3, r2
 8002a12:	3b2c      	subs	r3, #44	; 0x2c
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4403      	add	r3, r0
 8002a24:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002a26:	4a56      	ldr	r2, [pc, #344]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3a:	025b      	lsls	r3, r3, #9
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	4950      	ldr	r1, [pc, #320]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	1e5a      	subs	r2, r3, #1
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d90a      	bls.n	8002a78 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	4943      	ldr	r1, [pc, #268]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002a78:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 809b 	beq.w	8002bbc <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002a86:	4a3e      	ldr	r2, [pc, #248]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 0203 	bic.w	r2, r3, #3
 8002a98:	4939      	ldr	r1, [pc, #228]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d011      	beq.n	8002ad6 <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002ab2:	4a33      	ldr	r2, [pc, #204]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ac4:	492e      	ldr	r1, [pc, #184]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f042 0210 	orr.w	r2, r2, #16
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002ae2:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002af8:	4921      	ldr	r1, [pc, #132]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	e019      	b.n	8002b44 <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b2e:	4914      	ldr	r1, [pc, #80]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d019      	beq.n	8002b84 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b50:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b66:	4906      	ldr	r1, [pc, #24]	; (8002b80 <HAL_OSPIM_Config+0x858>)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	e0c6      	b.n	8002d0c <HAL_OSPIM_Config+0x9e4>
 8002b7e:	bf00      	nop
 8002b80:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80bf 	beq.w	8002d0c <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b8e:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ba4:	4968      	ldr	r1, [pc, #416]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e0a7      	b.n	8002d0c <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	495c      	ldr	r1, [pc, #368]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d014      	beq.n	8002c18 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002bee:	4a56      	ldr	r2, [pc, #344]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c02:	015b      	lsls	r3, r3, #5
 8002c04:	431a      	orrs	r2, r3
 8002c06:	4950      	ldr	r1, [pc, #320]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	f042 0210 	orr.w	r2, r2, #16
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d019      	beq.n	8002c58 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c24:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3c:	049b      	lsls	r3, r3, #18
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	4941      	ldr	r1, [pc, #260]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	e01c      	b.n	8002c92 <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d018      	beq.n	8002c92 <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c60:	4a39      	ldr	r2, [pc, #228]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c78:	069b      	lsls	r3, r3, #26
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	4932      	ldr	r1, [pc, #200]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d019      	beq.n	8002cd2 <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c9e:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb6:	049b      	lsls	r3, r3, #18
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	4923      	ldr	r1, [pc, #140]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	e01c      	b.n	8002d0c <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d018      	beq.n	8002d0c <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002cda:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf2:	069b      	lsls	r3, r3, #26
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	4914      	ldr	r1, [pc, #80]	; (8002d48 <HAL_OSPIM_Config+0xa20>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002d0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_OSPIM_Config+0xa24>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <HAL_OSPIM_Config+0xa24>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002d24:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_OSPIM_Config+0xa28>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <HAL_OSPIM_Config+0xa28>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002d3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3750      	adds	r7, #80	; 0x50
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	5200b400 	.word	0x5200b400
 8002d4c:	52005000 	.word	0x52005000
 8002d50:	5200a000 	.word	0x5200a000

08002d54 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d122      	bne.n	8002db8 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d014      	beq.n	8002daa <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2202      	movs	r2, #2
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d96:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0202 	orr.w	r2, r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8002da8:	e00c      	b.n	8002dc4 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2202      	movs	r2, #2
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fa63 	bl	800227c <HAL_OSPI_AbortCpltCallback>
}
 8002db6:	e005      	b.n	8002dc4 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fa52 	bl	8002268 <HAL_OSPI_ErrorCallback>
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002ddc:	e01a      	b.n	8002e14 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d016      	beq.n	8002e14 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f000 fc3b 	bl	8003660 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e00e      	b.n	8002e32 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a1a      	ldr	r2, [r3, #32]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1d6      	bne.n	8002dde <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e58:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d114      	bne.n	8002eaa <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e88:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e92:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002e9c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	e02c      	b.n	8002f04 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d114      	bne.n	8002edc <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002eba:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002ec4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002ece:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e013      	b.n	8002f04 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ee4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002eee:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002ef8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d012      	beq.n	8002f40 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	4319      	orrs	r1, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 021f 	bic.w	r2, r3, #31
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3a01      	subs	r2, #1
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8095 	beq.w	80030a2 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d053      	beq.n	8003028 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01e      	beq.n	8002fc6 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <OSPI_ConfigCmd+0x308>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	68d1      	ldr	r1, [r2, #12]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	6952      	ldr	r2, [r2, #20]
 8002f98:	4311      	orrs	r1, r2
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	6912      	ldr	r2, [r2, #16]
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	69d2      	ldr	r2, [r2, #28]
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002faa:	4311      	orrs	r1, r2
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	6a12      	ldr	r2, [r2, #32]
 8002fb0:	4311      	orrs	r1, r2
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fb6:	4311      	orrs	r1, r2
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e026      	b.n	8003014 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <OSPI_ConfigCmd+0x30c>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	68d1      	ldr	r1, [r2, #12]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	6952      	ldr	r2, [r2, #20]
 8002fd6:	4311      	orrs	r1, r2
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	6912      	ldr	r2, [r2, #16]
 8002fdc:	4311      	orrs	r1, r2
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	69d2      	ldr	r2, [r2, #28]
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe8:	4311      	orrs	r1, r2
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	6a12      	ldr	r2, [r2, #32]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ffe:	d109      	bne.n	8003014 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003004:	2b08      	cmp	r3, #8
 8003006:	d105      	bne.n	8003014 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	6992      	ldr	r2, [r2, #24]
 8003024:	649a      	str	r2, [r3, #72]	; 0x48
 8003026:	e085      	b.n	8003134 <OSPI_ConfigCmd+0x2f8>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b45      	ldr	r3, [pc, #276]	; (800314c <OSPI_ConfigCmd+0x310>)
 8003036:	4013      	ands	r3, r2
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	68d1      	ldr	r1, [r2, #12]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	6952      	ldr	r2, [r2, #20]
 8003040:	4311      	orrs	r1, r2
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	6912      	ldr	r2, [r2, #16]
 8003046:	4311      	orrs	r1, r2
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800304c:	4311      	orrs	r1, r2
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003052:	430a      	orrs	r2, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e01d      	b.n	8003098 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	4319      	orrs	r1, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	430b      	orrs	r3, r1
 8003074:	431a      	orrs	r2, r3
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003082:	d109      	bne.n	8003098 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003088:	2b08      	cmp	r3, #8
 800308a:	d105      	bne.n	8003098 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e048      	b.n	8003134 <OSPI_ConfigCmd+0x2f8>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02e      	beq.n	8003108 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d015      	beq.n	80030de <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <OSPI_ConfigCmd+0x314>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	69d1      	ldr	r1, [r2, #28]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c2:	4311      	orrs	r1, r2
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	6a12      	ldr	r2, [r2, #32]
 80030c8:	4311      	orrs	r1, r2
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ce:	4311      	orrs	r1, r2
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030d4:	430a      	orrs	r2, r1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e00e      	b.n	80030fc <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	69d9      	ldr	r1, [r3, #28]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	4319      	orrs	r1, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	431a      	orrs	r2, r3
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	6992      	ldr	r2, [r2, #24]
 8003104:	649a      	str	r2, [r3, #72]	; 0x48
 8003106:	e015      	b.n	8003134 <OSPI_ConfigCmd+0x2f8>
    }
    else
    {
		if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <OSPI_ConfigCmd+0x2ee>
		{
			// ---- Command with data ----

			// Configure the CCR register with all communication parameters
			MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_DMODE  | OCTOSPI_CCR_DDTR),
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	430b      	orrs	r3, r1
 8003122:	431a      	orrs	r2, r3
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e004      	b.n	8003134 <OSPI_ConfigCmd+0x2f8>
								 (cmd->DataMode    | cmd->DataDtrMode));
		}else{
		      /* ---- Invalid command configuration (no instruction, no address) ---- */
		      status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	77fb      	strb	r3, [r7, #31]
		      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2208      	movs	r2, #8
 8003132:	659a      	str	r2, [r3, #88]	; 0x58
		}
    }
  }

  /* Return function status */
  return status;
 8003134:	7ffb      	ldrb	r3, [r7, #31]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	f0ffc0c0 	.word	0xf0ffc0c0
 8003148:	ffffc0c0 	.word	0xffffc0c0
 800314c:	f0ffffc0 	.word	0xf0ffffc0
 8003150:	f0ffc0ff 	.word	0xf0ffc0ff

08003154 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <OSPIM_GetConfig+0x26>
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d802      	bhi.n	800317a <OSPIM_GetConfig+0x26>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
 800317e:	e098      	b.n	80032b2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2200      	movs	r2, #0
 800318a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d10b      	bne.n	80031bc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <OSPIM_GetConfig+0x16c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80031b0:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <OSPIM_GetConfig+0x170>)
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e002      	b.n	80031bc <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80031b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ba:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e074      	b.n	80032ac <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80031c2:	4a3f      	ldr	r2, [pc, #252]	; (80032c0 <OSPIM_GetConfig+0x16c>)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4053      	eors	r3, r2
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4053      	eors	r3, r2
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4053      	eors	r3, r2
 800321e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d018      	beq.n	800326a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4053      	eors	r3, r2
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d111      	bne.n	800326a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3301      	adds	r3, #1
 8003254:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	e005      	b.n	800326a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3301      	adds	r3, #1
 8003262:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d018      	beq.n	80032a6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4053      	eors	r3, r2
 800327a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d111      	bne.n	80032a6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3301      	adds	r3, #1
 8003290:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	611a      	str	r2, [r3, #16]
 8003298:	e005      	b.n	80032a6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3301      	adds	r3, #1
 800329e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d987      	bls.n	80031c2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	5200b400 	.word	0x5200b400
 80032c4:	04040222 	.word	0x04040222

080032c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08e      	sub	sp, #56	; 0x38
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	d844      	bhi.n	8003360 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80032d6:	2200      	movs	r2, #0
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	2019      	movs	r0, #25
 80032dc:	f000 fabc 	bl	8003858 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032e0:	2019      	movs	r0, #25
 80032e2:	f000 fad3 	bl	800388c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80032e6:	4a24      	ldr	r2, [pc, #144]	; (8003378 <HAL_InitTick+0xb0>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <HAL_InitTick+0xb4>)
 80032ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032f2:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_InitTick+0xb4>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <HAL_InitTick+0xb4>)
 80032fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800330a:	f107 020c 	add.w	r2, r7, #12
 800330e:	f107 0310 	add.w	r3, r7, #16
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f002 faf5 	bl	8005904 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800331a:	f002 fadd 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 800331e:	4603      	mov	r3, r0
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	4a16      	ldr	r2, [pc, #88]	; (8003380 <HAL_InitTick+0xb8>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	0c9b      	lsrs	r3, r3, #18
 800332e:	3b01      	subs	r3, #1
 8003330:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <HAL_InitTick+0xbc>)
 8003334:	4a14      	ldr	r2, [pc, #80]	; (8003388 <HAL_InitTick+0xc0>)
 8003336:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_InitTick+0xbc>)
 800333a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800333e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003340:	4a10      	ldr	r2, [pc, #64]	; (8003384 <HAL_InitTick+0xbc>)
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_InitTick+0xbc>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_InitTick+0xbc>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003352:	480c      	ldr	r0, [pc, #48]	; (8003384 <HAL_InitTick+0xbc>)
 8003354:	f006 f806 	bl	8009364 <HAL_TIM_Base_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_InitTick+0xa6>
 800335e:	e001      	b.n	8003364 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e005      	b.n	8003370 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003364:	4807      	ldr	r0, [pc, #28]	; (8003384 <HAL_InitTick+0xbc>)
 8003366:	f006 f8d3 	bl	8009510 <HAL_TIM_Base_Start_IT>
 800336a:	4603      	mov	r3, r0
 800336c:	e000      	b.n	8003370 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
}
 8003370:	4618      	mov	r0, r3
 8003372:	3738      	adds	r7, #56	; 0x38
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	24008034 	.word	0x24008034
 800337c:	58024400 	.word	0x58024400
 8003380:	431bde83 	.word	0x431bde83
 8003384:	24027644 	.word	0x24027644
 8003388:	40010000 	.word	0x40010000

0800338c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <NMI_Handler+0x4>

08003392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003396:	e7fe      	b.n	8003396 <HardFault_Handler+0x4>

08003398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800339c:	e7fe      	b.n	800339c <MemManage_Handler+0x4>

0800339e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <BusFault_Handler+0x4>

080033a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a8:	e7fe      	b.n	80033a8 <UsageFault_Handler+0x4>

080033aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <TIM1_UP_IRQHandler+0x10>)
 80033be:	f006 f98e 	bl	80096de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	24027644 	.word	0x24027644

080033cc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <SDMMC1_IRQHandler+0x10>)
 80033d2:	f004 fdd5 	bl	8007f80 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	240271e4 	.word	0x240271e4

080033e0 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <OCTOSPI1_IRQHandler+0x10>)
 80033e6:	f7fe fccd 	bl	8001d84 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2402717c 	.word	0x2402717c

080033f4 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 80033f8:	4803      	ldr	r0, [pc, #12]	; (8003408 <MDMA_IRQHandler+0x14>)
 80033fa:	f001 f923 	bl	8004644 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_octospi1_fifo_th);
 80033fe:	4803      	ldr	r0, [pc, #12]	; (800340c <MDMA_IRQHandler+0x18>)
 8003400:	f001 f920 	bl	8004644 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	2402751c 	.word	0x2402751c
 800340c:	24026fe0 	.word	0x24026fe0

08003410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003418:	4a14      	ldr	r2, [pc, #80]	; (800346c <_sbrk+0x5c>)
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <_sbrk+0x60>)
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <_sbrk+0x64>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <_sbrk+0x64>)
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <_sbrk+0x68>)
 8003430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <_sbrk+0x64>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	429a      	cmp	r2, r3
 800343e:	d207      	bcs.n	8003450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003440:	f00f fd3c 	bl	8012ebc <__errno>
 8003444:	4603      	mov	r3, r0
 8003446:	220c      	movs	r2, #12
 8003448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
 800344e:	e009      	b.n	8003464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <_sbrk+0x64>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <_sbrk+0x64>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <_sbrk+0x64>)
 8003460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	24050000 	.word	0x24050000
 8003470:	00000400 	.word	0x00000400
 8003474:	240081cc 	.word	0x240081cc
 8003478:	24027b50 	.word	0x24027b50

0800347c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <SystemInit+0xd0>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	4a31      	ldr	r2, [pc, #196]	; (800354c <SystemInit+0xd0>)
 8003488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800348c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <SystemInit+0xd4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2b06      	cmp	r3, #6
 800349a:	d807      	bhi.n	80034ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800349c:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <SystemInit+0xd4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 030f 	bic.w	r3, r3, #15
 80034a4:	4a2a      	ldr	r2, [pc, #168]	; (8003550 <SystemInit+0xd4>)
 80034a6:	f043 0307 	orr.w	r3, r3, #7
 80034aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034ac:	4b29      	ldr	r3, [pc, #164]	; (8003554 <SystemInit+0xd8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a28      	ldr	r2, [pc, #160]	; (8003554 <SystemInit+0xd8>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034b8:	4b26      	ldr	r3, [pc, #152]	; (8003554 <SystemInit+0xd8>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <SystemInit+0xd8>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4924      	ldr	r1, [pc, #144]	; (8003554 <SystemInit+0xd8>)
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <SystemInit+0xdc>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034ca:	4b21      	ldr	r3, [pc, #132]	; (8003550 <SystemInit+0xd4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034d6:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <SystemInit+0xd4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 030f 	bic.w	r3, r3, #15
 80034de:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <SystemInit+0xd4>)
 80034e0:	f043 0307 	orr.w	r3, r3, #7
 80034e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <SystemInit+0xd8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <SystemInit+0xd8>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <SystemInit+0xd8>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <SystemInit+0xd8>)
 80034fa:	4a18      	ldr	r2, [pc, #96]	; (800355c <SystemInit+0xe0>)
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <SystemInit+0xd8>)
 8003500:	4a17      	ldr	r2, [pc, #92]	; (8003560 <SystemInit+0xe4>)
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003504:	4b13      	ldr	r3, [pc, #76]	; (8003554 <SystemInit+0xd8>)
 8003506:	4a17      	ldr	r2, [pc, #92]	; (8003564 <SystemInit+0xe8>)
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <SystemInit+0xd8>)
 800350c:	2200      	movs	r2, #0
 800350e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003510:	4b10      	ldr	r3, [pc, #64]	; (8003554 <SystemInit+0xd8>)
 8003512:	4a14      	ldr	r2, [pc, #80]	; (8003564 <SystemInit+0xe8>)
 8003514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <SystemInit+0xd8>)
 8003518:	2200      	movs	r2, #0
 800351a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800351c:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <SystemInit+0xd8>)
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <SystemInit+0xe8>)
 8003520:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <SystemInit+0xd8>)
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <SystemInit+0xd8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a09      	ldr	r2, [pc, #36]	; (8003554 <SystemInit+0xd8>)
 800352e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003532:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <SystemInit+0xd8>)
 8003536:	2200      	movs	r2, #0
 8003538:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <SystemInit+0xec>)
 800353c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003540:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003542:	bf00      	nop
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00
 8003550:	52002000 	.word	0x52002000
 8003554:	58024400 	.word	0x58024400
 8003558:	eaf6ed7f 	.word	0xeaf6ed7f
 800355c:	02020200 	.word	0x02020200
 8003560:	01ff0000 	.word	0x01ff0000
 8003564:	01010280 	.word	0x01010280
 8003568:	52004000 	.word	0x52004000

0800356c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800356c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003570:	f7ff ff84 	bl	800347c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003574:	480c      	ldr	r0, [pc, #48]	; (80035a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003576:	490d      	ldr	r1, [pc, #52]	; (80035ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003578:	4a0d      	ldr	r2, [pc, #52]	; (80035b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800357a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800357c:	e002      	b.n	8003584 <LoopCopyDataInit>

0800357e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003582:	3304      	adds	r3, #4

08003584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003588:	d3f9      	bcc.n	800357e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800358c:	4c0a      	ldr	r4, [pc, #40]	; (80035b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800358e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003590:	e001      	b.n	8003596 <LoopFillZerobss>

08003592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003594:	3204      	adds	r2, #4

08003596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003598:	d3fb      	bcc.n	8003592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800359a:	f00f fc95 	bl	8012ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800359e:	f7fd fa43 	bl	8000a28 <main>
  bx  lr
 80035a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035a4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80035a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80035ac:	240080a4 	.word	0x240080a4
  ldr r2, =_sidata
 80035b0:	08013aec 	.word	0x08013aec
  ldr r2, =_sbss
 80035b4:	24008164 	.word	0x24008164
  ldr r4, =_ebss
 80035b8:	24027b50 	.word	0x24027b50

080035bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035bc:	e7fe      	b.n	80035bc <ADC3_IRQHandler>
	...

080035c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c6:	2003      	movs	r0, #3
 80035c8:	f000 f93b 	bl	8003842 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035cc:	f001 ffc4 	bl	8005558 <HAL_RCC_GetSysClockFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_Init+0x68>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	0a1b      	lsrs	r3, r3, #8
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	4913      	ldr	r1, [pc, #76]	; (800362c <HAL_Init+0x6c>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_Init+0x68>)
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <HAL_Init+0x6c>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	4a0b      	ldr	r2, [pc, #44]	; (8003630 <HAL_Init+0x70>)
 8003602:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003604:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <HAL_Init+0x74>)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800360a:	200f      	movs	r0, #15
 800360c:	f7ff fe5c 	bl	80032c8 <HAL_InitTick>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e002      	b.n	8003620 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800361a:	f7fd ffe9 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	58024400 	.word	0x58024400
 800362c:	0801395c 	.word	0x0801395c
 8003630:	24008030 	.word	0x24008030
 8003634:	2400802c 	.word	0x2400802c

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	24008038 	.word	0x24008038
 800365c:	24027690 	.word	0x24027690

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	24027690 	.word	0x24027690

08003678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff ffee 	bl	8003660 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d005      	beq.n	800369e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_Delay+0x44>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800369e:	bf00      	nop
 80036a0:	f7ff ffde 	bl	8003660 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d8f7      	bhi.n	80036a0 <HAL_Delay+0x28>
  {
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	24008038 	.word	0x24008038

080036c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036d0:	4904      	ldr	r1, [pc, #16]	; (80036e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	58000400 	.word	0x58000400

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <__NVIC_SetPriorityGrouping+0x40>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 8003712:	4313      	orrs	r3, r2
 8003714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003716:	4a04      	ldr	r2, [pc, #16]	; (8003728 <__NVIC_SetPriorityGrouping+0x40>)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	60d3      	str	r3, [r2, #12]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00
 800372c:	05fa0000 	.word	0x05fa0000

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	; (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ff4c 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003866:	f7ff ff63 	bl	8003730 <__NVIC_GetPriorityGrouping>
 800386a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	6978      	ldr	r0, [r7, #20]
 8003872:	f7ff ffb3 	bl	80037dc <NVIC_EncodePriority>
 8003876:	4602      	mov	r2, r0
 8003878:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ff82 	bl	8003788 <__NVIC_SetPriority>
}
 8003884:	bf00      	nop
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ff56 	bl	800374c <__NVIC_EnableIRQ>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0c6      	b.n	8003a48 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd feb2 	bl	800162c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2223      	movs	r2, #35	; 0x23
 80038cc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ce:	4b60      	ldr	r3, [pc, #384]	; (8003a50 <HAL_ETH_Init+0x1a8>)
 80038d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038d4:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <HAL_ETH_Init+0x1a8>)
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038de:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <HAL_ETH_Init+0x1a8>)
 80038e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7a1b      	ldrb	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80038f4:	2000      	movs	r0, #0
 80038f6:	f7ff fee3 	bl	80036c0 <HAL_SYSCFG_ETHInterfaceSelect>
 80038fa:	e003      	b.n	8003904 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80038fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003900:	f7ff fede 	bl	80036c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800391c:	f7ff fea0 	bl	8003660 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003922:	e00f      	b.n	8003944 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003924:	f7ff fe9c 	bl	8003660 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003932:	d907      	bls.n	8003944 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	22e0      	movs	r2, #224	; 0xe0
 800393e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e081      	b.n	8003a48 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e6      	bne.n	8003924 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fac0 	bl	8003edc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800395c:	f001 ff76 	bl	800584c <HAL_RCC_GetHCLKFreq>
 8003960:	4603      	mov	r3, r0
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <HAL_ETH_Init+0x1ac>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	0c9a      	lsrs	r2, r3, #18
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3a01      	subs	r2, #1
 8003970:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fa13 	bl	8003da0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003990:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003994:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	22e0      	movs	r2, #224	; 0xe0
 80039ac:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e04a      	b.n	8003a48 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	f241 1308 	movw	r3, #4360	; 0x1108
 80039ba:	4413      	add	r3, r2
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <HAL_ETH_Init+0x1b0>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6952      	ldr	r2, [r2, #20]
 80039c6:	0052      	lsls	r2, r2, #1
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6809      	ldr	r1, [r1, #0]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	f241 1308 	movw	r3, #4360	; 0x1108
 80039d2:	440b      	add	r3, r1
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fad8 	bl	8003f8c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fb1c 	bl	800401a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	3305      	adds	r3, #5
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	021a      	lsls	r2, r3, #8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4619      	mov	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	3303      	adds	r3, #3
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	061a      	lsls	r2, r3, #24
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	3302      	adds	r3, #2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a2e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2210      	movs	r2, #16
 8003a44:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	58024400 	.word	0x58024400
 8003a54:	431bde83 	.word	0x431bde83
 8003a58:	ffff8001 	.word	0xffff8001

08003a5c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003a6e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	791b      	ldrb	r3, [r3, #4]
 8003a74:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003a76:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	7b1b      	ldrb	r3, [r3, #12]
 8003a7c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003a7e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	7b5b      	ldrb	r3, [r3, #13]
 8003a84:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003a86:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	7b9b      	ldrb	r3, [r3, #14]
 8003a8c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003a8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	7bdb      	ldrb	r3, [r3, #15]
 8003a94:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003a96:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	7c12      	ldrb	r2, [r2, #16]
 8003a9c:	2a00      	cmp	r2, #0
 8003a9e:	d102      	bne.n	8003aa6 <ETH_SetMACConfig+0x4a>
 8003aa0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003aa4:	e000      	b.n	8003aa8 <ETH_SetMACConfig+0x4c>
 8003aa6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003aa8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	7c52      	ldrb	r2, [r2, #17]
 8003aae:	2a00      	cmp	r2, #0
 8003ab0:	d102      	bne.n	8003ab8 <ETH_SetMACConfig+0x5c>
 8003ab2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ab6:	e000      	b.n	8003aba <ETH_SetMACConfig+0x5e>
 8003ab8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003aba:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	7c9b      	ldrb	r3, [r3, #18]
 8003ac0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003ac2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003ac8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003ace:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	7f1b      	ldrb	r3, [r3, #28]
 8003ad4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003ad6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	7f5b      	ldrb	r3, [r3, #29]
 8003adc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003ade:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	7f92      	ldrb	r2, [r2, #30]
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	d102      	bne.n	8003aee <ETH_SetMACConfig+0x92>
 8003ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aec:	e000      	b.n	8003af0 <ETH_SetMACConfig+0x94>
 8003aee:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003af0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	7fdb      	ldrb	r3, [r3, #31]
 8003af6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003af8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b00:	2a00      	cmp	r2, #0
 8003b02:	d102      	bne.n	8003b0a <ETH_SetMACConfig+0xae>
 8003b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b08:	e000      	b.n	8003b0c <ETH_SetMACConfig+0xb0>
 8003b0a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003b0c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003b12:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b1a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003b1c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b56      	ldr	r3, [pc, #344]	; (8003c88 <ETH_SetMACConfig+0x22c>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b46:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003b48:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b50:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003b52:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b5a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003b5c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003b64:	2a00      	cmp	r2, #0
 8003b66:	d102      	bne.n	8003b6e <ETH_SetMACConfig+0x112>
 8003b68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b6c:	e000      	b.n	8003b70 <ETH_SetMACConfig+0x114>
 8003b6e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003b70:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <ETH_SetMACConfig+0x230>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b94:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <ETH_SetMACConfig+0x234>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	68f9      	ldr	r1, [r7, #12]
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003bb8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003bbe:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	d101      	bne.n	8003bce <ETH_SetMACConfig+0x172>
 8003bca:	2280      	movs	r2, #128	; 0x80
 8003bcc:	e000      	b.n	8003bd0 <ETH_SetMACConfig+0x174>
 8003bce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003bd0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003be2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003be6:	4013      	ands	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003bf8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003c00:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f023 0103 	bic.w	r1, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003c26:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003c42:	2a00      	cmp	r2, #0
 8003c44:	d101      	bne.n	8003c4a <ETH_SetMACConfig+0x1ee>
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	e000      	b.n	8003c4c <ETH_SetMACConfig+0x1f0>
 8003c4a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003c4c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003c54:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003c56:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003c5e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c6c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	00048083 	.word	0x00048083
 8003c8c:	c0f88000 	.word	0xc0f88000
 8003c90:	fffffef0 	.word	0xfffffef0

08003c94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <ETH_SetDMAConfig+0xf8>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	6809      	ldr	r1, [r1, #0]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003cba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	791b      	ldrb	r3, [r3, #4]
 8003cc0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003cc6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	7b1b      	ldrb	r3, [r3, #12]
 8003ccc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f241 0304 	movw	r3, #4100	; 0x1004
 8003cda:	4413      	add	r3, r2
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <ETH_SetDMAConfig+0xfc>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6811      	ldr	r1, [r2, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	f241 0304 	movw	r3, #4100	; 0x1004
 8003cee:	440b      	add	r3, r1
 8003cf0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	7b5b      	ldrb	r3, [r3, #13]
 8003cf6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <ETH_SetDMAConfig+0x100>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6811      	ldr	r1, [r2, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8003d1a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	7d1b      	ldrb	r3, [r3, #20]
 8003d24:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d26:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	7f5b      	ldrb	r3, [r3, #29]
 8003d2c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	f241 1304 	movw	r3, #4356	; 0x1104
 8003d3a:	4413      	add	r3, r2
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <ETH_SetDMAConfig+0x104>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6811      	ldr	r1, [r2, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003d4e:	440b      	add	r3, r1
 8003d50:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	7f1b      	ldrb	r3, [r3, #28]
 8003d56:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d68:	4413      	add	r3, r2
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <ETH_SetDMAConfig+0x108>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6811      	ldr	r1, [r2, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d7c:	440b      	add	r3, r1
 8003d7e:	601a      	str	r2, [r3, #0]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	ffff87fd 	.word	0xffff87fd
 8003d90:	ffff2ffe 	.word	0xffff2ffe
 8003d94:	fffec000 	.word	0xfffec000
 8003d98:	ffc0efef 	.word	0xffc0efef
 8003d9c:	7fc0ffff 	.word	0x7fc0ffff

08003da0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0a4      	sub	sp, #144	; 0x90
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003dae:	2300      	movs	r3, #0
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003de0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003df8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003dfc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003e04:	2300      	movs	r3, #0
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003e22:	2300      	movs	r3, #0
 8003e24:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003e38:	2320      	movs	r3, #32
 8003e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003e4a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e54:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fde6 	bl	8003a5c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e94:	2301      	movs	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003eaa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003eae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003eb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003eb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003ec0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ec6:	f107 0308 	add.w	r3, r7, #8
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fee1 	bl	8003c94 <ETH_SetDMAConfig>
}
 8003ed2:	bf00      	nop
 8003ed4:	3790      	adds	r7, #144	; 0x90
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003ef6:	f001 fca9 	bl	800584c <HAL_RCC_GetHCLKFreq>
 8003efa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d908      	bls.n	8003f16 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d804      	bhi.n	8003f16 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e027      	b.n	8003f66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d908      	bls.n	8003f30 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d204      	bcs.n	8003f30 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e01a      	b.n	8003f66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d303      	bcc.n	8003f40 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d911      	bls.n	8003f64 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a10      	ldr	r2, [pc, #64]	; (8003f84 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d908      	bls.n	8003f5a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d804      	bhi.n	8003f5a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e005      	b.n	8003f66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e000      	b.n	8003f66 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003f64:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	01312cff 	.word	0x01312cff
 8003f7c:	02160ebf 	.word	0x02160ebf
 8003f80:	03938700 	.word	0x03938700
 8003f84:	05f5e0ff 	.word	0x05f5e0ff
 8003f88:	08f0d17f 	.word	0x08f0d17f

08003f8c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e01d      	b.n	8003fd6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68d9      	ldr	r1, [r3, #12]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	3206      	adds	r2, #6
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d9de      	bls.n	8003f9a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f241 132c 	movw	r3, #4396	; 0x112c
 8003fea:	4413      	add	r3, r2
 8003fec:	2203      	movs	r2, #3
 8003fee:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68d9      	ldr	r1, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	f241 1314 	movw	r3, #4372	; 0x1114
 8003ffc:	4413      	add	r3, r2
 8003ffe:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800400c:	601a      	str	r2, [r3, #0]
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e024      	b.n	8004072 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6919      	ldr	r1, [r3, #16]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4613      	mov	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	440b      	add	r3, r1
 8004038:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2200      	movs	r2, #0
 8004044:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2200      	movs	r2, #0
 8004050:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2200      	movs	r2, #0
 8004056:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3310      	adds	r3, #16
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3301      	adds	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d9d7      	bls.n	8004028 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	f241 1330 	movw	r3, #4400	; 0x1130
 800409e:	4413      	add	r3, r2
 80040a0:	2203      	movs	r2, #3
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6919      	ldr	r1, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80040b0:	4413      	add	r3, r2
 80040b2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	f241 1328 	movw	r3, #4392	; 0x1128
 80040c4:	4413      	add	r3, r2
 80040c6:	6019      	str	r1, [r3, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040e2:	4b86      	ldr	r3, [pc, #536]	; (80042fc <HAL_GPIO_Init+0x228>)
 80040e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040e6:	e18c      	b.n	8004402 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2101      	movs	r1, #1
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 817e 	beq.w	80043fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d005      	beq.n	8004118 <HAL_GPIO_Init+0x44>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d130      	bne.n	800417a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800414e:	2201      	movs	r2, #1
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 0201 	and.w	r2, r3, #1
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b03      	cmp	r3, #3
 8004184:	d017      	beq.n	80041b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	2203      	movs	r2, #3
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d123      	bne.n	800420a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	08da      	lsrs	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3208      	adds	r2, #8
 80041ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	220f      	movs	r2, #15
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	08da      	lsrs	r2, r3, #3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3208      	adds	r2, #8
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2203      	movs	r2, #3
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0203 	and.w	r2, r3, #3
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80d8 	beq.w	80043fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <HAL_GPIO_Init+0x22c>)
 800424e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004252:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <HAL_GPIO_Init+0x22c>)
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800425c:	4b28      	ldr	r3, [pc, #160]	; (8004300 <HAL_GPIO_Init+0x22c>)
 800425e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_GPIO_Init+0x230>)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_GPIO_Init+0x234>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d04a      	beq.n	800432c <HAL_GPIO_Init+0x258>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_GPIO_Init+0x238>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02b      	beq.n	80042f6 <HAL_GPIO_Init+0x222>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <HAL_GPIO_Init+0x23c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d025      	beq.n	80042f2 <HAL_GPIO_Init+0x21e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <HAL_GPIO_Init+0x240>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x21a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a19      	ldr	r2, [pc, #100]	; (8004318 <HAL_GPIO_Init+0x244>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x216>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_GPIO_Init+0x248>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x212>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_GPIO_Init+0x24c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x20e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_GPIO_Init+0x250>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x20a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a15      	ldr	r2, [pc, #84]	; (8004328 <HAL_GPIO_Init+0x254>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x206>
 80042d6:	2309      	movs	r3, #9
 80042d8:	e029      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042da:	230a      	movs	r3, #10
 80042dc:	e027      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042de:	2307      	movs	r3, #7
 80042e0:	e025      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042e2:	2306      	movs	r3, #6
 80042e4:	e023      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042e6:	2305      	movs	r3, #5
 80042e8:	e021      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042ea:	2304      	movs	r3, #4
 80042ec:	e01f      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042ee:	2303      	movs	r3, #3
 80042f0:	e01d      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e01b      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e019      	b.n	800432e <HAL_GPIO_Init+0x25a>
 80042fa:	bf00      	nop
 80042fc:	58000080 	.word	0x58000080
 8004300:	58024400 	.word	0x58024400
 8004304:	58000400 	.word	0x58000400
 8004308:	58020000 	.word	0x58020000
 800430c:	58020400 	.word	0x58020400
 8004310:	58020800 	.word	0x58020800
 8004314:	58020c00 	.word	0x58020c00
 8004318:	58021000 	.word	0x58021000
 800431c:	58021400 	.word	0x58021400
 8004320:	58021800 	.word	0x58021800
 8004324:	58021c00 	.word	0x58021c00
 8004328:	58022400 	.word	0x58022400
 800432c:	2300      	movs	r3, #0
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	f002 0203 	and.w	r2, r2, #3
 8004334:	0092      	lsls	r2, r2, #2
 8004336:	4093      	lsls	r3, r2
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800433e:	4938      	ldr	r1, [pc, #224]	; (8004420 <HAL_GPIO_Init+0x34c>)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	3302      	adds	r3, #2
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f ae6b 	bne.w	80040e8 <HAL_GPIO_Init+0x14>
  }
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	3724      	adds	r7, #36	; 0x24
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	58000400 	.word	0x58000400

08004424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	887b      	ldrh	r3, [r7, #2]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
 8004440:	e001      	b.n	8004446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
 8004460:	4613      	mov	r3, r2
 8004462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004464:	787b      	ldrb	r3, [r7, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004470:	e003      	b.n	800447a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004472:	887b      	ldrh	r3, [r7, #2]
 8004474:	041a      	lsls	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	619a      	str	r2, [r3, #24]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004498:	887a      	ldrh	r2, [r7, #2]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4013      	ands	r3, r2
 800449e:	041a      	lsls	r2, r3, #16
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	43d9      	mvns	r1, r3
 80044a4:	887b      	ldrh	r3, [r7, #2]
 80044a6:	400b      	ands	r3, r1
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c2:	f7ff f8cd 	bl	8003660 <HAL_GetTick>
 80044c6:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e03b      	b.n	800454a <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80044f2:	e00f      	b.n	8004514 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80044f4:	f7ff f8b4 	bl	8003660 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b05      	cmp	r3, #5
 8004500:	d908      	bls.n	8004514 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2203      	movs	r2, #3
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e01a      	b.n	800454a <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e8      	bne.n	80044f4 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9e4 	bl	80048f0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8004552:	b480      	push	{r7}
 8004554:	b087      	sub	sp, #28
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e03e      	b.n	80045ea <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_MDMA_ConfigPostRequestMask+0x28>
 8004576:	2302      	movs	r3, #2
 8004578:	e037      	b.n	80045ea <HAL_MDMA_ConfigPostRequestMask+0x98>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d126      	bne.n	80045dc <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11c      	bne.n	80045d6 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d108      	bne.n	80045c4 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045c0:	611a      	str	r2, [r3, #16]
 80045c2:	e00d      	b.n	80045e0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80045d2:	611a      	str	r2, [r3, #16]
 80045d4:	e004      	b.n	80045e0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
 80045da:	e001      	b.n	80045e0 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e017      	b.n	8004638 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d004      	beq.n	800461e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e00c      	b.n	8004638 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2204      	movs	r2, #4
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004650:	4b9a      	ldr	r3, [pc, #616]	; (80048bc <HAL_MDMA_IRQHandler+0x278>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a9a      	ldr	r2, [pc, #616]	; (80048c0 <HAL_MDMA_IRQHandler+0x27c>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0a9b      	lsrs	r3, r3, #10
 800465c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4b97      	ldr	r3, [pc, #604]	; (80048c4 <HAL_MDMA_IRQHandler+0x280>)
 8004666:	4413      	add	r3, r2
 8004668:	099b      	lsrs	r3, r3, #6
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2201      	movs	r2, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8004676:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 812e 	beq.w	80048e2 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d054      	beq.n	800473e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04d      	beq.n	800473e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0202 	bic.w	r2, r2, #2
 80046b0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	669a      	str	r2, [r3, #104]	; 0x68
 80046d0:	e005      	b.n	80046de <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d6:	f043 0202 	orr.w	r2, r3, #2
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004702:	f043 0208 	orr.w	r2, r3, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004718:	f043 0210 	orr.w	r2, r3, #16
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2201      	movs	r2, #1
 800473c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d012      	beq.n	8004772 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00b      	beq.n	8004772 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2210      	movs	r2, #16
 8004760:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d012      	beq.n	80047a6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2208      	movs	r2, #8
 8004794:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2204      	movs	r2, #4
 80047c8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d039      	beq.n	800485c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d032      	beq.n	800485c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8004804:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b04      	cmp	r3, #4
 8004810:	d110      	bne.n	8004834 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	2b00      	cmp	r3, #0
 8004828:	d05d      	beq.n	80048e6 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
        }
        return;
 8004832:	e058      	b.n	80048e6 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2202      	movs	r2, #2
 800483a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004860:	2b00      	cmp	r3, #0
 8004862:	d041      	beq.n	80048e8 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2204      	movs	r2, #4
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	3301      	adds	r3, #1
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	429a      	cmp	r2, r3
 8004886:	d307      	bcc.n	8004898 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f2      	bne.n	800487c <HAL_MDMA_IRQHandler+0x238>
 8004896:	e000      	b.n	800489a <HAL_MDMA_IRQHandler+0x256>
        break;
 8004898:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2203      	movs	r2, #3
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048b8:	e00a      	b.n	80048d0 <HAL_MDMA_IRQHandler+0x28c>
 80048ba:	bf00      	nop
 80048bc:	2400802c 	.word	0x2400802c
 80048c0:	1b4e81b5 	.word	0x1b4e81b5
 80048c4:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
 80048e0:	e002      	b.n	80048e8 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 80048e6:	bf00      	nop
    }
  }
}
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop

080048f0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68d9      	ldr	r1, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004916:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004922:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800492e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	3b01      	subs	r3, #1
 8004936:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004938:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004944:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004946:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d107      	bne.n	8004962 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8004960:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2200      	movs	r2, #0
 8004968:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496e:	2b00      	cmp	r3, #0
 8004970:	da11      	bge.n	8004996 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004980:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	425b      	negs	r3, r3
 8004988:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	b292      	uxth	r2, r2
 8004992:	621a      	str	r2, [r3, #32]
 8004994:	e006      	b.n	80049a4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	b292      	uxth	r2, r2
 80049a2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da15      	bge.n	80049d8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80049ba:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	425b      	negs	r3, r3
 80049c2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6a19      	ldr	r1, [r3, #32]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	041a      	lsls	r2, r3, #16
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	621a      	str	r2, [r3, #32]
 80049d6:	e009      	b.n	80049ec <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6a19      	ldr	r1, [r3, #32]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	041a      	lsls	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f4:	d006      	beq.n	8004a04 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
 8004a02:	e003      	b.n	8004a0c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2200      	movs	r2, #0
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_PWREx_ConfigSupply+0x70>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d00a      	beq.n	8004a4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a34:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HAL_PWREx_ConfigSupply+0x70>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e01f      	b.n	8004a86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e01d      	b.n	8004a86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <HAL_PWREx_ConfigSupply+0x70>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f023 0207 	bic.w	r2, r3, #7
 8004a52:	490f      	ldr	r1, [pc, #60]	; (8004a90 <HAL_PWREx_ConfigSupply+0x70>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a5a:	f7fe fe01 	bl	8003660 <HAL_GetTick>
 8004a5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a60:	e009      	b.n	8004a76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a62:	f7fe fdfd 	bl	8003660 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a70:	d901      	bls.n	8004a76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e007      	b.n	8004a86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_PWREx_ConfigSupply+0x70>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a82:	d1ee      	bne.n	8004a62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	58024800 	.word	0x58024800

08004a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e397      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8087 	beq.w	8004bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab4:	4b9e      	ldr	r3, [pc, #632]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004abe:	4b9c      	ldr	r3, [pc, #624]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d007      	beq.n	8004ada <HAL_RCC_OscConfig+0x46>
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2b18      	cmp	r3, #24
 8004ace:	d110      	bne.n	8004af2 <HAL_RCC_OscConfig+0x5e>
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d10b      	bne.n	8004af2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ada:	4b95      	ldr	r3, [pc, #596]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d06c      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x12c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d168      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e371      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afa:	d106      	bne.n	8004b0a <HAL_RCC_OscConfig+0x76>
 8004afc:	4b8c      	ldr	r3, [pc, #560]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a8b      	ldr	r2, [pc, #556]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e02e      	b.n	8004b68 <HAL_RCC_OscConfig+0xd4>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x98>
 8004b12:	4b87      	ldr	r3, [pc, #540]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a86      	ldr	r2, [pc, #536]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	4b84      	ldr	r3, [pc, #528]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a83      	ldr	r2, [pc, #524]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e01d      	b.n	8004b68 <HAL_RCC_OscConfig+0xd4>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCC_OscConfig+0xbc>
 8004b36:	4b7e      	ldr	r3, [pc, #504]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7d      	ldr	r2, [pc, #500]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4b7b      	ldr	r3, [pc, #492]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a7a      	ldr	r2, [pc, #488]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e00b      	b.n	8004b68 <HAL_RCC_OscConfig+0xd4>
 8004b50:	4b77      	ldr	r3, [pc, #476]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a76      	ldr	r2, [pc, #472]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b74      	ldr	r3, [pc, #464]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a73      	ldr	r2, [pc, #460]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d013      	beq.n	8004b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fe fd76 	bl	8003660 <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b78:	f7fe fd72 	bl	8003660 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e325      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b8a:	4b69      	ldr	r3, [pc, #420]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0xe4>
 8004b96:	e014      	b.n	8004bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fe fd62 	bl	8003660 <HAL_GetTick>
 8004b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba0:	f7fe fd5e 	bl	8003660 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e311      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bb2:	4b5f      	ldr	r3, [pc, #380]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x10c>
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 808a 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bd0:	4b57      	ldr	r3, [pc, #348]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bda:	4b55      	ldr	r3, [pc, #340]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x162>
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b18      	cmp	r3, #24
 8004bea:	d137      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1c8>
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d132      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf6:	4b4e      	ldr	r3, [pc, #312]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x17a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e2e3      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c0e:	4b48      	ldr	r3, [pc, #288]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 0219 	bic.w	r2, r3, #25
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	4945      	ldr	r1, [pc, #276]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c20:	f7fe fd1e 	bl	8003660 <HAL_GetTick>
 8004c24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c28:	f7fe fd1a 	bl	8003660 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e2cd      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c3a:	4b3d      	ldr	r3, [pc, #244]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c46:	4b3a      	ldr	r3, [pc, #232]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	4936      	ldr	r1, [pc, #216]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5a:	e043      	b.n	8004ce4 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d026      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c64:	4b32      	ldr	r3, [pc, #200]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 0219 	bic.w	r2, r3, #25
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	492f      	ldr	r1, [pc, #188]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fe fcf3 	bl	8003660 <HAL_GetTick>
 8004c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7e:	f7fe fcef 	bl	8003660 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e2a2      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	4921      	ldr	r1, [pc, #132]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
 8004cb0:	e018      	b.n	8004ce4 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fe fccf 	bl	8003660 <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc6:	f7fe fccb 	bl	8003660 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e27e      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d06d      	beq.n	8004dcc <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cfa:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d007      	beq.n	8004d16 <HAL_RCC_OscConfig+0x282>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b18      	cmp	r3, #24
 8004d0a:	d11e      	bne.n	8004d4a <HAL_RCC_OscConfig+0x2b6>
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d119      	bne.n	8004d4a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_RCC_OscConfig+0x29c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_RCC_OscConfig+0x2a0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	2b80      	cmp	r3, #128	; 0x80
 8004d28:	d004      	beq.n	8004d34 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e253      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
 8004d2e:	bf00      	nop
 8004d30:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d34:	4ba3      	ldr	r3, [pc, #652]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	49a0      	ldr	r1, [pc, #640]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d48:	e040      	b.n	8004dcc <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d023      	beq.n	8004d9a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d52:	4b9c      	ldr	r3, [pc, #624]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a9b      	ldr	r2, [pc, #620]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fe fc7f 	bl	8003660 <HAL_GetTick>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d66:	f7fe fc7b 	bl	8003660 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e22e      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d78:	4b92      	ldr	r3, [pc, #584]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d84:	4b8f      	ldr	r3, [pc, #572]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	498c      	ldr	r1, [pc, #560]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60cb      	str	r3, [r1, #12]
 8004d98:	e018      	b.n	8004dcc <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d9a:	4b8a      	ldr	r3, [pc, #552]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a89      	ldr	r2, [pc, #548]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fe fc5b 	bl	8003660 <HAL_GetTick>
 8004daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004dae:	f7fe fc57 	bl	8003660 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e20a      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dc0:	4b80      	ldr	r3, [pc, #512]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d036      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d019      	beq.n	8004e14 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de0:	4b78      	ldr	r3, [pc, #480]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de4:	4a77      	ldr	r2, [pc, #476]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dec:	f7fe fc38 	bl	8003660 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df4:	f7fe fc34 	bl	8003660 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e1e7      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e06:	4b6f      	ldr	r3, [pc, #444]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x360>
 8004e12:	e018      	b.n	8004e46 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e14:	4b6b      	ldr	r3, [pc, #428]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e18:	4a6a      	ldr	r2, [pc, #424]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fe fc1e 	bl	8003660 <HAL_GetTick>
 8004e24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e28:	f7fe fc1a 	bl	8003660 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1cd      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e3a:	4b62      	ldr	r3, [pc, #392]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d036      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d019      	beq.n	8004e8e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e5a:	4b5a      	ldr	r3, [pc, #360]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a59      	ldr	r2, [pc, #356]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e66:	f7fe fbfb 	bl	8003660 <HAL_GetTick>
 8004e6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e6e:	f7fe fbf7 	bl	8003660 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e1aa      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e80:	4b50      	ldr	r3, [pc, #320]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x3da>
 8004e8c:	e018      	b.n	8004ec0 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e8e:	4b4d      	ldr	r3, [pc, #308]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4c      	ldr	r2, [pc, #304]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e9a:	f7fe fbe1 	bl	8003660 <HAL_GetTick>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ea2:	f7fe fbdd 	bl	8003660 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e190      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eb4:	4b43      	ldr	r3, [pc, #268]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8085 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ece:	4b3e      	ldr	r3, [pc, #248]	; (8004fc8 <HAL_RCC_OscConfig+0x534>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a3d      	ldr	r2, [pc, #244]	; (8004fc8 <HAL_RCC_OscConfig+0x534>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eda:	f7fe fbc1 	bl	8003660 <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fe fbbd 	bl	8003660 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b64      	cmp	r3, #100	; 0x64
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e170      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ef4:	4b34      	ldr	r3, [pc, #208]	; (8004fc8 <HAL_RCC_OscConfig+0x534>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d106      	bne.n	8004f16 <HAL_RCC_OscConfig+0x482>
 8004f08:	4b2e      	ldr	r3, [pc, #184]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70
 8004f14:	e02d      	b.n	8004f72 <HAL_RCC_OscConfig+0x4de>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x4a4>
 8004f1e:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a28      	ldr	r2, [pc, #160]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	4a25      	ldr	r2, [pc, #148]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f30:	f023 0304 	bic.w	r3, r3, #4
 8004f34:	6713      	str	r3, [r2, #112]	; 0x70
 8004f36:	e01c      	b.n	8004f72 <HAL_RCC_OscConfig+0x4de>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d10c      	bne.n	8004f5a <HAL_RCC_OscConfig+0x4c6>
 8004f40:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6713      	str	r3, [r2, #112]	; 0x70
 8004f58:	e00b      	b.n	8004f72 <HAL_RCC_OscConfig+0x4de>
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f6c:	f023 0304 	bic.w	r3, r3, #4
 8004f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d015      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7a:	f7fe fb71 	bl	8003660 <HAL_GetTick>
 8004f7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f80:	e00a      	b.n	8004f98 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fe fb6d 	bl	8003660 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e11e      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_RCC_OscConfig+0x530>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ee      	beq.n	8004f82 <HAL_RCC_OscConfig+0x4ee>
 8004fa4:	e018      	b.n	8004fd8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa6:	f7fe fb5b 	bl	8003660 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fac:	e00e      	b.n	8004fcc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fae:	f7fe fb57 	bl	8003660 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d905      	bls.n	8004fcc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e108      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fcc:	4b84      	ldr	r3, [pc, #528]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ea      	bne.n	8004fae <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80f9 	beq.w	80051d4 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fe2:	4b7f      	ldr	r3, [pc, #508]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fea:	2b18      	cmp	r3, #24
 8004fec:	f000 80b4 	beq.w	8005158 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	f040 8095 	bne.w	8005124 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffa:	4b79      	ldr	r3, [pc, #484]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a78      	ldr	r2, [pc, #480]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fe fb2b 	bl	8003660 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500e:	f7fe fb27 	bl	8003660 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0da      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005020:	4b6f      	ldr	r3, [pc, #444]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f0      	bne.n	800500e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502c:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 800502e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005030:	4b6c      	ldr	r3, [pc, #432]	; (80051e4 <HAL_RCC_OscConfig+0x750>)
 8005032:	4013      	ands	r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800503c:	0112      	lsls	r2, r2, #4
 800503e:	430a      	orrs	r2, r1
 8005040:	4967      	ldr	r1, [pc, #412]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	628b      	str	r3, [r1, #40]	; 0x28
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	3b01      	subs	r3, #1
 800504c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005054:	3b01      	subs	r3, #1
 8005056:	025b      	lsls	r3, r3, #9
 8005058:	b29b      	uxth	r3, r3
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	3b01      	subs	r3, #1
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	3b01      	subs	r3, #1
 8005070:	061b      	lsls	r3, r3, #24
 8005072:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005076:	495a      	ldr	r1, [pc, #360]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005078:	4313      	orrs	r3, r2
 800507a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800507c:	4b58      	ldr	r3, [pc, #352]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4a57      	ldr	r2, [pc, #348]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005088:	4b55      	ldr	r3, [pc, #340]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 800508a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800508c:	4b56      	ldr	r3, [pc, #344]	; (80051e8 <HAL_RCC_OscConfig+0x754>)
 800508e:	4013      	ands	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005094:	00d2      	lsls	r2, r2, #3
 8005096:	4952      	ldr	r1, [pc, #328]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005098:	4313      	orrs	r3, r2
 800509a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800509c:	4b50      	ldr	r3, [pc, #320]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	f023 020c 	bic.w	r2, r3, #12
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	494d      	ldr	r1, [pc, #308]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050ae:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	f023 0202 	bic.w	r2, r3, #2
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	4949      	ldr	r1, [pc, #292]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050c0:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a46      	ldr	r2, [pc, #280]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050cc:	4b44      	ldr	r3, [pc, #272]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	4a43      	ldr	r2, [pc, #268]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050d8:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	4a40      	ldr	r2, [pc, #256]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80050e4:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	4a3d      	ldr	r2, [pc, #244]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f0:	4b3b      	ldr	r3, [pc, #236]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 80050f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fe fab0 	bl	8003660 <HAL_GetTick>
 8005100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005104:	f7fe faac 	bl	8003660 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e05f      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005116:	4b32      	ldr	r3, [pc, #200]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x670>
 8005122:	e057      	b.n	80051d4 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005124:	4b2e      	ldr	r3, [pc, #184]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2d      	ldr	r2, [pc, #180]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 800512a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fe fa96 	bl	8003660 <HAL_GetTick>
 8005134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005138:	f7fe fa92 	bl	8003660 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e045      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800514a:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x6a4>
 8005156:	e03d      	b.n	80051d4 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005158:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800515e:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <HAL_RCC_OscConfig+0x74c>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b01      	cmp	r3, #1
 800516a:	d031      	beq.n	80051d0 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f003 0203 	and.w	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d12a      	bne.n	80051d0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d122      	bne.n	80051d0 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d11a      	bne.n	80051d0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	0a5b      	lsrs	r3, r3, #9
 800519e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d111      	bne.n	80051d0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d108      	bne.n	80051d0 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	0e1b      	lsrs	r3, r3, #24
 80051c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3730      	adds	r7, #48	; 0x30
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	fffffc0c 	.word	0xfffffc0c
 80051e8:	ffff0007 	.word	0xffff0007

080051ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e19c      	b.n	800553a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005200:	4b8a      	ldr	r3, [pc, #552]	; (800542c <HAL_RCC_ClockConfig+0x240>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d910      	bls.n	8005230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	4b87      	ldr	r3, [pc, #540]	; (800542c <HAL_RCC_ClockConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 020f 	bic.w	r2, r3, #15
 8005216:	4985      	ldr	r1, [pc, #532]	; (800542c <HAL_RCC_ClockConfig+0x240>)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b83      	ldr	r3, [pc, #524]	; (800542c <HAL_RCC_ClockConfig+0x240>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e184      	b.n	800553a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d010      	beq.n	800525e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	4b7b      	ldr	r3, [pc, #492]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005248:	429a      	cmp	r2, r3
 800524a:	d908      	bls.n	800525e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800524c:	4b78      	ldr	r3, [pc, #480]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	4975      	ldr	r1, [pc, #468]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800525a:	4313      	orrs	r3, r2
 800525c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d010      	beq.n	800528c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695a      	ldr	r2, [r3, #20]
 800526e:	4b70      	ldr	r3, [pc, #448]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005276:	429a      	cmp	r2, r3
 8005278:	d908      	bls.n	800528c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800527a:	4b6d      	ldr	r3, [pc, #436]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	496a      	ldr	r1, [pc, #424]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 8005288:	4313      	orrs	r3, r2
 800528a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	4b64      	ldr	r3, [pc, #400]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d908      	bls.n	80052ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052a8:	4b61      	ldr	r3, [pc, #388]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	495e      	ldr	r1, [pc, #376]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d010      	beq.n	80052e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69da      	ldr	r2, [r3, #28]
 80052ca:	4b59      	ldr	r3, [pc, #356]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d908      	bls.n	80052e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80052d6:	4b56      	ldr	r3, [pc, #344]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	4953      	ldr	r1, [pc, #332]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d010      	beq.n	8005316 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	4b4d      	ldr	r3, [pc, #308]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	429a      	cmp	r2, r3
 8005302:	d908      	bls.n	8005316 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005304:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f023 020f 	bic.w	r2, r3, #15
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4947      	ldr	r1, [pc, #284]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 8005312:	4313      	orrs	r3, r2
 8005314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d055      	beq.n	80053ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005322:	4b43      	ldr	r3, [pc, #268]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	4940      	ldr	r1, [pc, #256]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 8005330:	4313      	orrs	r3, r2
 8005332:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d107      	bne.n	800534c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800533c:	4b3c      	ldr	r3, [pc, #240]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d121      	bne.n	800538c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0f6      	b.n	800553a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d107      	bne.n	8005364 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005354:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d115      	bne.n	800538c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0ea      	b.n	800553a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d107      	bne.n	800537c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800536c:	4b30      	ldr	r3, [pc, #192]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0de      	b.n	800553a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800537c:	4b2c      	ldr	r3, [pc, #176]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0d6      	b.n	800553a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800538c:	4b28      	ldr	r3, [pc, #160]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f023 0207 	bic.w	r2, r3, #7
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4925      	ldr	r1, [pc, #148]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 800539a:	4313      	orrs	r3, r2
 800539c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539e:	f7fe f95f 	bl	8003660 <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a4:	e00a      	b.n	80053bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a6:	f7fe f95b 	bl	8003660 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e0be      	b.n	800553a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053bc:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d1eb      	bne.n	80053a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d208      	bcs.n	80053fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f023 020f 	bic.w	r2, r3, #15
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	490e      	ldr	r1, [pc, #56]	; (8005430 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_RCC_ClockConfig+0x240>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d214      	bcs.n	8005434 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b08      	ldr	r3, [pc, #32]	; (800542c <HAL_RCC_ClockConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 020f 	bic.w	r2, r3, #15
 8005412:	4906      	ldr	r1, [pc, #24]	; (800542c <HAL_RCC_ClockConfig+0x240>)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <HAL_RCC_ClockConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d005      	beq.n	8005434 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e086      	b.n	800553a <HAL_RCC_ClockConfig+0x34e>
 800542c:	52002000 	.word	0x52002000
 8005430:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d010      	beq.n	8005462 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	4b3f      	ldr	r3, [pc, #252]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800544c:	429a      	cmp	r2, r3
 800544e:	d208      	bcs.n	8005462 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005450:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	4939      	ldr	r1, [pc, #228]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 800545e:	4313      	orrs	r3, r2
 8005460:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d010      	beq.n	8005490 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	4b34      	ldr	r3, [pc, #208]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800547a:	429a      	cmp	r2, r3
 800547c:	d208      	bcs.n	8005490 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800547e:	4b31      	ldr	r3, [pc, #196]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	492e      	ldr	r1, [pc, #184]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 800548c:	4313      	orrs	r3, r2
 800548e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d010      	beq.n	80054be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d208      	bcs.n	80054be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054ac:	4b25      	ldr	r3, [pc, #148]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	4922      	ldr	r1, [pc, #136]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d010      	beq.n	80054ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d208      	bcs.n	80054ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	4917      	ldr	r1, [pc, #92]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054ec:	f000 f834 	bl	8005558 <HAL_RCC_GetSysClockFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	4912      	ldr	r1, [pc, #72]	; (8005548 <HAL_RCC_ClockConfig+0x35c>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
 8005508:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800550a:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x358>)
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	4a0d      	ldr	r2, [pc, #52]	; (8005548 <HAL_RCC_ClockConfig+0x35c>)
 8005514:	5cd3      	ldrb	r3, [r2, r3]
 8005516:	f003 031f 	and.w	r3, r3, #31
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <HAL_RCC_ClockConfig+0x360>)
 8005522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005524:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <HAL_RCC_ClockConfig+0x364>)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_RCC_ClockConfig+0x368>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fd feca 	bl	80032c8 <HAL_InitTick>
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400
 8005548:	0801395c 	.word	0x0801395c
 800554c:	24008030 	.word	0x24008030
 8005550:	2400802c 	.word	0x2400802c
 8005554:	24008034 	.word	0x24008034

08005558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005558:	b480      	push	{r7}
 800555a:	b089      	sub	sp, #36	; 0x24
 800555c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800555e:	4bb3      	ldr	r3, [pc, #716]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005566:	2b18      	cmp	r3, #24
 8005568:	f200 8155 	bhi.w	8005816 <HAL_RCC_GetSysClockFreq+0x2be>
 800556c:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <HAL_RCC_GetSysClockFreq+0x1c>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	080055d9 	.word	0x080055d9
 8005578:	08005817 	.word	0x08005817
 800557c:	08005817 	.word	0x08005817
 8005580:	08005817 	.word	0x08005817
 8005584:	08005817 	.word	0x08005817
 8005588:	08005817 	.word	0x08005817
 800558c:	08005817 	.word	0x08005817
 8005590:	08005817 	.word	0x08005817
 8005594:	080055ff 	.word	0x080055ff
 8005598:	08005817 	.word	0x08005817
 800559c:	08005817 	.word	0x08005817
 80055a0:	08005817 	.word	0x08005817
 80055a4:	08005817 	.word	0x08005817
 80055a8:	08005817 	.word	0x08005817
 80055ac:	08005817 	.word	0x08005817
 80055b0:	08005817 	.word	0x08005817
 80055b4:	08005605 	.word	0x08005605
 80055b8:	08005817 	.word	0x08005817
 80055bc:	08005817 	.word	0x08005817
 80055c0:	08005817 	.word	0x08005817
 80055c4:	08005817 	.word	0x08005817
 80055c8:	08005817 	.word	0x08005817
 80055cc:	08005817 	.word	0x08005817
 80055d0:	08005817 	.word	0x08005817
 80055d4:	0800560b 	.word	0x0800560b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d8:	4b94      	ldr	r3, [pc, #592]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d009      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055e4:	4b91      	ldr	r3, [pc, #580]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	08db      	lsrs	r3, r3, #3
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	4a90      	ldr	r2, [pc, #576]	; (8005830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80055f6:	e111      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80055f8:	4b8d      	ldr	r3, [pc, #564]	; (8005830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055fa:	61bb      	str	r3, [r7, #24]
    break;
 80055fc:	e10e      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80055fe:	4b8d      	ldr	r3, [pc, #564]	; (8005834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005600:	61bb      	str	r3, [r7, #24]
    break;
 8005602:	e10b      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005604:	4b8c      	ldr	r3, [pc, #560]	; (8005838 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005606:	61bb      	str	r3, [r7, #24]
    break;
 8005608:	e108      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800560a:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005614:	4b85      	ldr	r3, [pc, #532]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800561e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005620:	4b82      	ldr	r3, [pc, #520]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800562a:	4b80      	ldr	r3, [pc, #512]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	08db      	lsrs	r3, r3, #3
 8005630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005642:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80e1 	beq.w	8005810 <HAL_RCC_GetSysClockFreq+0x2b8>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b02      	cmp	r3, #2
 8005652:	f000 8083 	beq.w	800575c <HAL_RCC_GetSysClockFreq+0x204>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b02      	cmp	r3, #2
 800565a:	f200 80a1 	bhi.w	80057a0 <HAL_RCC_GetSysClockFreq+0x248>
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_RCC_GetSysClockFreq+0x114>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d056      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0x1c0>
 800566a:	e099      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800566c:	4b6f      	ldr	r3, [pc, #444]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d02d      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005678:	4b6c      	ldr	r3, [pc, #432]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	08db      	lsrs	r3, r3, #3
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	4a6b      	ldr	r2, [pc, #428]	; (8005830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
 8005688:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a2:	4b62      	ldr	r3, [pc, #392]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800583c <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80056d2:	e087      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005840 <HAL_RCC_GetSysClockFreq+0x2e8>
 80056e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e6:	4b51      	ldr	r3, [pc, #324]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800583c <HAL_RCC_GetSysClockFreq+0x2e4>
 80056fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005716:	e065      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005722:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005844 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572a:	4b40      	ldr	r3, [pc, #256]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573a:	ed97 6a02 	vldr	s12, [r7, #8]
 800573e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800583c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800574a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800574e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800575a:	e043      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005766:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005848 <HAL_RCC_GetSysClockFreq+0x2f0>
 800576a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800576e:	4b2f      	ldr	r3, [pc, #188]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005782:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800583c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800578a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800579e:	e021      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005844 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b2:	4b1e      	ldr	r3, [pc, #120]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800583c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80057e4:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	0a5b      	lsrs	r3, r3, #9
 80057ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ee:	3301      	adds	r3, #1
 80057f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005808:	ee17 3a90 	vmov	r3, s15
 800580c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800580e:	e005      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
    break;
 8005814:	e002      	b.n	800581c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005816:	4b07      	ldr	r3, [pc, #28]	; (8005834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005818:	61bb      	str	r3, [r7, #24]
    break;
 800581a:	bf00      	nop
  }

  return sysclockfreq;
 800581c:	69bb      	ldr	r3, [r7, #24]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3724      	adds	r7, #36	; 0x24
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	58024400 	.word	0x58024400
 8005830:	03d09000 	.word	0x03d09000
 8005834:	003d0900 	.word	0x003d0900
 8005838:	007a1200 	.word	0x007a1200
 800583c:	46000000 	.word	0x46000000
 8005840:	4c742400 	.word	0x4c742400
 8005844:	4a742400 	.word	0x4a742400
 8005848:	4af42400 	.word	0x4af42400

0800584c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005852:	f7ff fe81 	bl	8005558 <HAL_RCC_GetSysClockFreq>
 8005856:	4602      	mov	r2, r0
 8005858:	4b10      	ldr	r3, [pc, #64]	; (800589c <HAL_RCC_GetHCLKFreq+0x50>)
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	490f      	ldr	r1, [pc, #60]	; (80058a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005864:	5ccb      	ldrb	r3, [r1, r3]
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	fa22 f303 	lsr.w	r3, r2, r3
 800586e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <HAL_RCC_GetHCLKFreq+0x50>)
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800587a:	5cd3      	ldrb	r3, [r2, r3]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	fa22 f303 	lsr.w	r3, r2, r3
 8005886:	4a07      	ldr	r2, [pc, #28]	; (80058a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005888:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800588a:	4a07      	ldr	r2, [pc, #28]	; (80058a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	58024400 	.word	0x58024400
 80058a0:	0801395c 	.word	0x0801395c
 80058a4:	24008030 	.word	0x24008030
 80058a8:	2400802c 	.word	0x2400802c

080058ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058b0:	f7ff ffcc 	bl	800584c <HAL_RCC_GetHCLKFreq>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	4904      	ldr	r1, [pc, #16]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058c2:	5ccb      	ldrb	r3, [r1, r3]
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	58024400 	.word	0x58024400
 80058d4:	0801395c 	.word	0x0801395c

080058d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058dc:	f7ff ffb6 	bl	800584c <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4904      	ldr	r1, [pc, #16]	; (8005900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	58024400 	.word	0x58024400
 8005900:	0801395c 	.word	0x0801395c

08005904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	223f      	movs	r2, #63	; 0x3f
 8005912:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005914:	4b1a      	ldr	r3, [pc, #104]	; (8005980 <HAL_RCC_GetClockConfig+0x7c>)
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0207 	and.w	r2, r3, #7
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005920:	4b17      	ldr	r3, [pc, #92]	; (8005980 <HAL_RCC_GetClockConfig+0x7c>)
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800592c:	4b14      	ldr	r3, [pc, #80]	; (8005980 <HAL_RCC_GetClockConfig+0x7c>)
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f003 020f 	and.w	r2, r3, #15
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <HAL_RCC_GetClockConfig+0x7c>)
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <HAL_RCC_GetClockConfig+0x7c>)
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCC_GetClockConfig+0x7c>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800595c:	4b08      	ldr	r3, [pc, #32]	; (8005980 <HAL_RCC_GetClockConfig+0x7c>)
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <HAL_RCC_GetClockConfig+0x80>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	601a      	str	r2, [r3, #0]
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	58024400 	.word	0x58024400
 8005984:	52002000 	.word	0x52002000

08005988 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005990:	2300      	movs	r3, #0
 8005992:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005994:	2300      	movs	r3, #0
 8005996:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d03f      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059ac:	d02a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059b2:	d824      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b8:	d018      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059be:	d81e      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80059c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c8:	d007      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80059ca:	e018      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059cc:	4bab      	ldr	r3, [pc, #684]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	4aaa      	ldr	r2, [pc, #680]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059d8:	e015      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3304      	adds	r3, #4
 80059de:	2102      	movs	r1, #2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 feff 	bl	80077e4 <RCCEx_PLL2_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059ea:	e00c      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3324      	adds	r3, #36	; 0x24
 80059f0:	2102      	movs	r1, #2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 ffa8 	bl	8007948 <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80059fc:	e003      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	75fb      	strb	r3, [r7, #23]
      break;
 8005a02:	e000      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d109      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a0c:	4b9b      	ldr	r3, [pc, #620]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a18:	4998      	ldr	r1, [pc, #608]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	650b      	str	r3, [r1, #80]	; 0x50
 8005a1e:	e001      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d03d      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d826      	bhi.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a38:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005a55 	.word	0x08005a55
 8005a44:	08005a63 	.word	0x08005a63
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	08005a8d 	.word	0x08005a8d
 8005a50:	08005a8d 	.word	0x08005a8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a54:	4b89      	ldr	r3, [pc, #548]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4a88      	ldr	r2, [pc, #544]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a60:	e015      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3304      	adds	r3, #4
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 febb 	bl	80077e4 <RCCEx_PLL2_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a72:	e00c      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3324      	adds	r3, #36	; 0x24
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 ff64 	bl	8007948 <RCCEx_PLL3_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a84:	e003      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
      break;
 8005a8a:	e000      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a94:	4b79      	ldr	r3, [pc, #484]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	f023 0207 	bic.w	r2, r3, #7
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa0:	4976      	ldr	r1, [pc, #472]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	650b      	str	r3, [r1, #80]	; 0x50
 8005aa6:	e001      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d051      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005abe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ac2:	d036      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005ac4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ac8:	d830      	bhi.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005aca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ace:	d032      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005ad0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad4:	d82a      	bhi.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005ad6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ada:	d02e      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005adc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ae0:	d824      	bhi.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae6:	d018      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aec:	d81e      	bhi.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af6:	d007      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005af8:	e018      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005afa:	4b60      	ldr	r3, [pc, #384]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	4a5f      	ldr	r2, [pc, #380]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b06:	e019      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fe68 	bl	80077e4 <RCCEx_PLL2_Config>
 8005b14:	4603      	mov	r3, r0
 8005b16:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b18:	e010      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3324      	adds	r3, #36	; 0x24
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 ff11 	bl	8007948 <RCCEx_PLL3_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b2a:	e007      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b30:	e004      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005b32:	bf00      	nop
 8005b34:	e002      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b46:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b50:	494a      	ldr	r1, [pc, #296]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	658b      	str	r3, [r1, #88]	; 0x58
 8005b56:	e001      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d051      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b6e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005b72:	d036      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005b74:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005b78:	d830      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b7e:	d032      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b84:	d82a      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b8a:	d02e      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005b8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b90:	d824      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b96:	d018      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b9c:	d81e      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ba6:	d007      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005ba8:	e018      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005baa:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4a33      	ldr	r2, [pc, #204]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bb6:	e019      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fe10 	bl	80077e4 <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005bc8:	e010      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3324      	adds	r3, #36	; 0x24
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 feb9 	bl	8007948 <RCCEx_PLL3_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bda:	e007      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
      break;
 8005be0:	e004      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c00:	491e      	ldr	r1, [pc, #120]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	658b      	str	r3, [r1, #88]	; 0x58
 8005c06:	e001      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d035      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d01c      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005c20:	2b30      	cmp	r3, #48	; 0x30
 8005c22:	d817      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d00c      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d813      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d016      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d10f      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c34:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	4a10      	ldr	r2, [pc, #64]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005c40:	e00e      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	2102      	movs	r1, #2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fdcb 	bl	80077e4 <RCCEx_PLL2_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005c52:	e005      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	75fb      	strb	r3, [r7, #23]
      break;
 8005c58:	e002      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e000      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c72:	4902      	ldr	r1, [pc, #8]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c78:	e004      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005c7a:	bf00      	nop
 8005c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
 8005c82:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d047      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c98:	d030      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c9e:	d82a      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005ca0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ca4:	d02c      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005ca6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005caa:	d824      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb0:	d018      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb6:	d81e      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d007      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005cc2:	e018      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc4:	4bac      	ldr	r3, [pc, #688]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	4aab      	ldr	r2, [pc, #684]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cd0:	e017      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 fd83 	bl	80077e4 <RCCEx_PLL2_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ce2:	e00e      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3324      	adds	r3, #36	; 0x24
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 fe2c 	bl	8007948 <RCCEx_PLL3_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cf4:	e005      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfa:	e002      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d109      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d08:	4b9b      	ldr	r3, [pc, #620]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d14:	4998      	ldr	r1, [pc, #608]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	650b      	str	r3, [r1, #80]	; 0x50
 8005d1a:	e001      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d049      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d34:	d02e      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005d36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d3a:	d828      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d40:	d02a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005d42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d46:	d822      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d4c:	d026      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005d4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d52:	d81c      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d58:	d010      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005d5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d5e:	d816      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01d      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d68:	d111      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2101      	movs	r1, #1
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fd37 	bl	80077e4 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d7a:	e012      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	2101      	movs	r1, #1
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 fde0 	bl	8007948 <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d8c:	e009      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
      break;
 8005d92:	e006      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d94:	bf00      	nop
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d98:	bf00      	nop
 8005d9a:	e002      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005da8:	4b73      	ldr	r3, [pc, #460]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db4:	4970      	ldr	r1, [pc, #448]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	650b      	str	r3, [r1, #80]	; 0x50
 8005dba:	e001      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d04b      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dd6:	d02e      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ddc:	d828      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d02a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de8:	d822      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005dea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dee:	d026      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005df0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005df4:	d81c      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e00:	d816      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01d      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e0a:	d111      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	2101      	movs	r1, #1
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 fce6 	bl	80077e4 <RCCEx_PLL2_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e1c:	e012      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3324      	adds	r3, #36	; 0x24
 8005e22:	2101      	movs	r1, #1
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fd8f 	bl	8007948 <RCCEx_PLL3_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e2e:	e009      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	75fb      	strb	r3, [r7, #23]
      break;
 8005e34:	e006      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005e36:	bf00      	nop
 8005e38:	e004      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e002      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e4a:	4b4b      	ldr	r3, [pc, #300]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e58:	4947      	ldr	r1, [pc, #284]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8005e5e:	e001      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d02f      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e78:	d00e      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7e:	d814      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d015      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e88:	d10f      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8a:	4b3b      	ldr	r3, [pc, #236]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	4a3a      	ldr	r2, [pc, #232]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e96:	e00c      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f001 fca0 	bl	80077e4 <RCCEx_PLL2_Config>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
      break;
 8005eae:	e000      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d109      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005eb8:	4b2f      	ldr	r3, [pc, #188]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec4:	492c      	ldr	r1, [pc, #176]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	650b      	str	r3, [r1, #80]	; 0x50
 8005eca:	e001      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d032      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d81b      	bhi.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f23 	.word	0x08005f23
 8005ef0:	08005efd 	.word	0x08005efd
 8005ef4:	08005f0b 	.word	0x08005f0b
 8005ef8:	08005f23 	.word	0x08005f23
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005efc:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	4a1d      	ldr	r2, [pc, #116]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f08:	e00c      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	2102      	movs	r1, #2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 fc67 	bl	80077e4 <RCCEx_PLL2_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005f1a:	e003      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f20:	e000      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f2a:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2e:	f023 0203 	bic.w	r2, r3, #3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	4910      	ldr	r1, [pc, #64]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f3c:	e001      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 808a 	beq.w	8006064 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f5c:	f7fd fb80 	bl	8003660 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f62:	e00d      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f64:	f7fd fb7c 	bl	8003660 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d906      	bls.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	75fb      	strb	r3, [r7, #23]
        break;
 8005f76:	e009      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005f78:	58024400 	.word	0x58024400
 8005f7c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f80:	4bb9      	ldr	r3, [pc, #740]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0eb      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d166      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f92:	4bb6      	ldr	r3, [pc, #728]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005f94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f9c:	4053      	eors	r3, r2
 8005f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fa6:	4bb1      	ldr	r3, [pc, #708]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fb0:	4bae      	ldr	r3, [pc, #696]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	4aad      	ldr	r2, [pc, #692]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fbc:	4bab      	ldr	r3, [pc, #684]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	4aaa      	ldr	r2, [pc, #680]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fc8:	4aa8      	ldr	r2, [pc, #672]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd8:	d115      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fd fb41 	bl	8003660 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fe0:	e00b      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe2:	f7fd fb3d 	bl	8003660 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d902      	bls.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	75fb      	strb	r3, [r7, #23]
            break;
 8005ff8:	e005      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ffa:	4b9c      	ldr	r3, [pc, #624]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0ed      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d126      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800601a:	d10d      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800601c:	4b93      	ldr	r3, [pc, #588]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800602a:	0919      	lsrs	r1, r3, #4
 800602c:	4b90      	ldr	r3, [pc, #576]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800602e:	400b      	ands	r3, r1
 8006030:	498e      	ldr	r1, [pc, #568]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
 8006036:	e005      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006038:	4b8c      	ldr	r3, [pc, #560]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	4a8b      	ldr	r2, [pc, #556]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800603e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006042:	6113      	str	r3, [r2, #16]
 8006044:	4b89      	ldr	r3, [pc, #548]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800604e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006052:	4986      	ldr	r1, [pc, #536]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006054:	4313      	orrs	r3, r2
 8006056:	670b      	str	r3, [r1, #112]	; 0x70
 8006058:	e004      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	75bb      	strb	r3, [r7, #22]
 800605e:	e001      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d07e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006074:	2b28      	cmp	r3, #40	; 0x28
 8006076:	d867      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	0800614f 	.word	0x0800614f
 8006084:	08006149 	.word	0x08006149
 8006088:	08006149 	.word	0x08006149
 800608c:	08006149 	.word	0x08006149
 8006090:	08006149 	.word	0x08006149
 8006094:	08006149 	.word	0x08006149
 8006098:	08006149 	.word	0x08006149
 800609c:	08006149 	.word	0x08006149
 80060a0:	08006125 	.word	0x08006125
 80060a4:	08006149 	.word	0x08006149
 80060a8:	08006149 	.word	0x08006149
 80060ac:	08006149 	.word	0x08006149
 80060b0:	08006149 	.word	0x08006149
 80060b4:	08006149 	.word	0x08006149
 80060b8:	08006149 	.word	0x08006149
 80060bc:	08006149 	.word	0x08006149
 80060c0:	08006137 	.word	0x08006137
 80060c4:	08006149 	.word	0x08006149
 80060c8:	08006149 	.word	0x08006149
 80060cc:	08006149 	.word	0x08006149
 80060d0:	08006149 	.word	0x08006149
 80060d4:	08006149 	.word	0x08006149
 80060d8:	08006149 	.word	0x08006149
 80060dc:	08006149 	.word	0x08006149
 80060e0:	0800614f 	.word	0x0800614f
 80060e4:	08006149 	.word	0x08006149
 80060e8:	08006149 	.word	0x08006149
 80060ec:	08006149 	.word	0x08006149
 80060f0:	08006149 	.word	0x08006149
 80060f4:	08006149 	.word	0x08006149
 80060f8:	08006149 	.word	0x08006149
 80060fc:	08006149 	.word	0x08006149
 8006100:	0800614f 	.word	0x0800614f
 8006104:	08006149 	.word	0x08006149
 8006108:	08006149 	.word	0x08006149
 800610c:	08006149 	.word	0x08006149
 8006110:	08006149 	.word	0x08006149
 8006114:	08006149 	.word	0x08006149
 8006118:	08006149 	.word	0x08006149
 800611c:	08006149 	.word	0x08006149
 8006120:	0800614f 	.word	0x0800614f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f001 fb5a 	bl	80077e4 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006134:	e00c      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3324      	adds	r3, #36	; 0x24
 800613a:	2101      	movs	r1, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f001 fc03 	bl	8007948 <RCCEx_PLL3_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006146:	e003      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	75fb      	strb	r3, [r7, #23]
      break;
 800614c:	e000      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800614e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006156:	4b45      	ldr	r3, [pc, #276]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006162:	4942      	ldr	r1, [pc, #264]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006164:	4313      	orrs	r3, r2
 8006166:	654b      	str	r3, [r1, #84]	; 0x54
 8006168:	e001      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d037      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	2b05      	cmp	r3, #5
 8006180:	d820      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061cb 	.word	0x080061cb
 800618c:	080061a1 	.word	0x080061a1
 8006190:	080061b3 	.word	0x080061b3
 8006194:	080061cb 	.word	0x080061cb
 8006198:	080061cb 	.word	0x080061cb
 800619c:	080061cb 	.word	0x080061cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	2101      	movs	r1, #1
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 fb1c 	bl	80077e4 <RCCEx_PLL2_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061b0:	e00c      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3324      	adds	r3, #36	; 0x24
 80061b6:	2101      	movs	r1, #1
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 fbc5 	bl	8007948 <RCCEx_PLL3_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80061c2:	e003      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	75fb      	strb	r3, [r7, #23]
      break;
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80061ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061d2:	4b26      	ldr	r3, [pc, #152]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d6:	f023 0207 	bic.w	r2, r3, #7
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061de:	4923      	ldr	r1, [pc, #140]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	654b      	str	r3, [r1, #84]	; 0x54
 80061e4:	e001      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d040      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061fc:	2b05      	cmp	r3, #5
 80061fe:	d821      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	0800624b 	.word	0x0800624b
 800620c:	08006221 	.word	0x08006221
 8006210:	08006233 	.word	0x08006233
 8006214:	0800624b 	.word	0x0800624b
 8006218:	0800624b 	.word	0x0800624b
 800621c:	0800624b 	.word	0x0800624b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3304      	adds	r3, #4
 8006224:	2101      	movs	r1, #1
 8006226:	4618      	mov	r0, r3
 8006228:	f001 fadc 	bl	80077e4 <RCCEx_PLL2_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006230:	e00c      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3324      	adds	r3, #36	; 0x24
 8006236:	2101      	movs	r1, #1
 8006238:	4618      	mov	r0, r3
 800623a:	f001 fb85 	bl	8007948 <RCCEx_PLL3_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006242:	e003      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	75fb      	strb	r3, [r7, #23]
      break;
 8006248:	e000      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800624a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d110      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006252:	4b06      	ldr	r3, [pc, #24]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006256:	f023 0207 	bic.w	r2, r3, #7
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006260:	4902      	ldr	r1, [pc, #8]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006262:	4313      	orrs	r3, r2
 8006264:	658b      	str	r3, [r1, #88]	; 0x58
 8006266:	e007      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006268:	58024800 	.word	0x58024800
 800626c:	58024400 	.word	0x58024400
 8006270:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d04b      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800628e:	d02e      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006294:	d828      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629a:	d02a      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d822      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80062a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062a6:	d026      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80062a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062ac:	d81c      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80062ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b2:	d010      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80062b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b8:	d816      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01d      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x972>
 80062be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062c2:	d111      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 fa8a 	bl	80077e4 <RCCEx_PLL2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062d4:	e012      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3324      	adds	r3, #36	; 0x24
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fb33 	bl	8007948 <RCCEx_PLL3_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062e6:	e009      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75fb      	strb	r3, [r7, #23]
      break;
 80062ec:	e006      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80062ee:	bf00      	nop
 80062f0:	e004      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80062f2:	bf00      	nop
 80062f4:	e002      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80062fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006302:	4bb2      	ldr	r3, [pc, #712]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006310:	49ae      	ldr	r1, [pc, #696]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006312:	4313      	orrs	r3, r2
 8006314:	654b      	str	r3, [r1, #84]	; 0x54
 8006316:	e001      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d04b      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800632e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006332:	d02e      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006334:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006338:	d828      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800633a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633e:	d02a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d822      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800634a:	d026      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800634c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006350:	d81c      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006356:	d010      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635c:	d816      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01d      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006366:	d111      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fa38 	bl	80077e4 <RCCEx_PLL2_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006378:	e012      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3324      	adds	r3, #36	; 0x24
 800637e:	2102      	movs	r1, #2
 8006380:	4618      	mov	r0, r3
 8006382:	f001 fae1 	bl	8007948 <RCCEx_PLL3_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800638a:	e009      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
      break;
 8006390:	e006      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006392:	bf00      	nop
 8006394:	e004      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006396:	bf00      	nop
 8006398:	e002      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800639e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063a6:	4b89      	ldr	r3, [pc, #548]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b4:	4985      	ldr	r1, [pc, #532]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	658b      	str	r3, [r1, #88]	; 0x58
 80063ba:	e001      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d04b      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063d6:	d02e      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80063d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063dc:	d828      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80063de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e2:	d02a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e8:	d822      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80063ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063ee:	d026      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80063f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063f4:	d81c      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80063f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063fa:	d010      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80063fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006400:	d816      	bhi.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01d      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640a:	d111      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f001 f9e6 	bl	80077e4 <RCCEx_PLL2_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800641c:	e012      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3324      	adds	r3, #36	; 0x24
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f001 fa8f 	bl	8007948 <RCCEx_PLL3_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800642e:	e009      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
      break;
 8006434:	e006      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006436:	bf00      	nop
 8006438:	e004      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800643a:	bf00      	nop
 800643c:	e002      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800643e:	bf00      	nop
 8006440:	e000      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800644a:	4b60      	ldr	r3, [pc, #384]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800644c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006458:	495c      	ldr	r1, [pc, #368]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800645a:	4313      	orrs	r3, r2
 800645c:	658b      	str	r3, [r1, #88]	; 0x58
 800645e:	e001      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d018      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006478:	d10a      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3324      	adds	r3, #36	; 0x24
 800647e:	2102      	movs	r1, #2
 8006480:	4618      	mov	r0, r3
 8006482:	f001 fa61 	bl	8007948 <RCCEx_PLL3_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006490:	4b4e      	ldr	r3, [pc, #312]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649c:	494b      	ldr	r1, [pc, #300]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b8:	d10a      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3324      	adds	r3, #36	; 0x24
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 fa41 	bl	8007948 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064d0:	4b3e      	ldr	r3, [pc, #248]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064de:	493b      	ldr	r1, [pc, #236]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d034      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064fa:	d01d      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006500:	d817      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800650a:	d009      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800650c:	e011      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f001 f965 	bl	80077e4 <RCCEx_PLL2_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800651e:	e00c      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3324      	adds	r3, #36	; 0x24
 8006524:	2102      	movs	r1, #2
 8006526:	4618      	mov	r0, r3
 8006528:	f001 fa0e 	bl	8007948 <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006530:	e003      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	75fb      	strb	r3, [r7, #23]
      break;
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006540:	4b22      	ldr	r3, [pc, #136]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800654e:	491f      	ldr	r1, [pc, #124]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006550:	4313      	orrs	r3, r2
 8006552:	658b      	str	r3, [r1, #88]	; 0x58
 8006554:	e001      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d036      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006570:	d01c      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006572:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006576:	d816      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657c:	d003      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800657e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006582:	d007      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006584:	e00f      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006586:	4b11      	ldr	r3, [pc, #68]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	4a10      	ldr	r2, [pc, #64]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800658c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006590:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006592:	e00c      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3324      	adds	r3, #36	; 0x24
 8006598:	2101      	movs	r1, #1
 800659a:	4618      	mov	r0, r3
 800659c:	f001 f9d4 	bl	8007948 <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]
      break;
 80065aa:	e000      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80065ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10d      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80065b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c2:	4902      	ldr	r1, [pc, #8]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	654b      	str	r3, [r1, #84]	; 0x54
 80065c8:	e004      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80065ca:	bf00      	nop
 80065cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d029      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80065e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ec:	d007      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80065ee:	e00f      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f0:	4b61      	ldr	r3, [pc, #388]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	4a60      	ldr	r2, [pc, #384]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80065fc:	e00b      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3304      	adds	r3, #4
 8006602:	2102      	movs	r1, #2
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f8ed 	bl	80077e4 <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800660e:	e002      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
      break;
 8006614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800661c:	4b56      	ldr	r3, [pc, #344]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800661e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006628:	4953      	ldr	r1, [pc, #332]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800662a:	4313      	orrs	r3, r2
 800662c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800662e:	e001      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3324      	adds	r3, #36	; 0x24
 8006644:	2102      	movs	r1, #2
 8006646:	4618      	mov	r0, r3
 8006648:	f001 f97e 	bl	8007948 <RCCEx_PLL3_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d030      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800666a:	d017      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800666c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006670:	d811      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006676:	d013      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667c:	d80b      	bhi.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d010      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006686:	d106      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006688:	4b3b      	ldr	r3, [pc, #236]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a3a      	ldr	r2, [pc, #232]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800668e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006694:	e007      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	75fb      	strb	r3, [r7, #23]
      break;
 800669a:	e004      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800669c:	bf00      	nop
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80066a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066ac:	4b32      	ldr	r3, [pc, #200]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066b8:	492f      	ldr	r1, [pc, #188]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	654b      	str	r3, [r1, #84]	; 0x54
 80066be:	e001      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066d0:	4b29      	ldr	r3, [pc, #164]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066dc:	4926      	ldr	r1, [pc, #152]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d008      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066fa:	491f      	ldr	r1, [pc, #124]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00d      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800670c:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	4a19      	ldr	r2, [pc, #100]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006716:	6113      	str	r3, [r2, #16]
 8006718:	4b17      	ldr	r3, [pc, #92]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006722:	4915      	ldr	r1, [pc, #84]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006724:	4313      	orrs	r3, r2
 8006726:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	da08      	bge.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006730:	4b11      	ldr	r3, [pc, #68]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006734:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	490e      	ldr	r1, [pc, #56]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800673e:	4313      	orrs	r3, r2
 8006740:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d009      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800674e:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800675c:	4906      	ldr	r1, [pc, #24]	; (8006778 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800675e:	4313      	orrs	r3, r2
 8006760:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006762:	7dbb      	ldrb	r3, [r7, #22]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400

0800677c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b090      	sub	sp, #64	; 0x40
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678a:	f040 8089 	bne.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800678e:	4b95      	ldr	r3, [pc, #596]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	633b      	str	r3, [r7, #48]	; 0x30
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	2b04      	cmp	r3, #4
 800679c:	d87d      	bhi.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067b9 	.word	0x080067b9
 80067a8:	080067dd 	.word	0x080067dd
 80067ac:	08006801 	.word	0x08006801
 80067b0:	08006895 	.word	0x08006895
 80067b4:	08006825 	.word	0x08006825

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067b8:	4b8a      	ldr	r3, [pc, #552]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c4:	d107      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 feb8 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067d4:	e3ed      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067da:	e3ea      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067dc:	4b81      	ldr	r3, [pc, #516]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e8:	d107      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ea:	f107 0318 	add.w	r3, r7, #24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fbfe 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067f8:	e3db      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067fe:	e3d8      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006800:	4b78      	ldr	r3, [pc, #480]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800680c:	d107      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800680e:	f107 030c 	add.w	r3, r7, #12
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fd40 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800681c:	e3c9      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006822:	e3c6      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006824:	4b6f      	ldr	r3, [pc, #444]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006828:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800682c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800682e:	4b6d      	ldr	r3, [pc, #436]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b04      	cmp	r3, #4
 8006838:	d10c      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683c:	2b00      	cmp	r3, #0
 800683e:	d109      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006840:	4b68      	ldr	r3, [pc, #416]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	08db      	lsrs	r3, r3, #3
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	4a67      	ldr	r2, [pc, #412]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800684c:	fa22 f303 	lsr.w	r3, r2, r3
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006852:	e01e      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006854:	4b63      	ldr	r3, [pc, #396]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006860:	d106      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006868:	d102      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800686a:	4b60      	ldr	r3, [pc, #384]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800686c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686e:	e010      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006870:	4b5c      	ldr	r3, [pc, #368]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800687c:	d106      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006884:	d102      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006886:	4b5a      	ldr	r3, [pc, #360]	; (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688a:	e002      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006890:	e38f      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006892:	e38e      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006894:	4b57      	ldr	r3, [pc, #348]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006898:	e38b      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800689e:	e388      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a6:	f040 80a7 	bne.w	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80068aa:	4b4e      	ldr	r3, [pc, #312]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068ba:	d054      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068c2:	f200 808b 	bhi.w	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068cc:	f000 8083 	beq.w	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068d6:	f200 8081 	bhi.w	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e0:	d02f      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e8:	d878      	bhi.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068f6:	d012      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80068f8:	e070      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068fa:	4b3a      	ldr	r3, [pc, #232]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006906:	d107      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fe17 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006916:	e34c      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691c:	e349      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800691e:	4b31      	ldr	r3, [pc, #196]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800692a:	d107      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692c:	f107 0318 	add.w	r3, r7, #24
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fb5d 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800693a:	e33a      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006940:	e337      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006942:	4b28      	ldr	r3, [pc, #160]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800694a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694e:	d107      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006950:	f107 030c 	add.w	r3, r7, #12
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fc9f 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800695e:	e328      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006964:	e325      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006966:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800696e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006970:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b04      	cmp	r3, #4
 800697a:	d10c      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006982:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800698e:	fa22 f303 	lsr.w	r3, r2, r3
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006994:	e01e      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006996:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a2:	d106      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069aa:	d102      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b0:	e010      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c6:	d102      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069c8:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069cc:	e002      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069d2:	e2ee      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80069d4:	e2ed      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069da:	e2ea      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069e0:	e2e7      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80069e2:	bf00      	nop
 80069e4:	58024400 	.word	0x58024400
 80069e8:	03d09000 	.word	0x03d09000
 80069ec:	003d0900 	.word	0x003d0900
 80069f0:	007a1200 	.word	0x007a1200
 80069f4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069fe:	f040 809c 	bne.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006a02:	4b9e      	ldr	r3, [pc, #632]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a06:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a12:	d054      	beq.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a1a:	f200 808b 	bhi.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a24:	f000 8083 	beq.w	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a2e:	f200 8081 	bhi.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a38:	d02f      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a40:	d878      	bhi.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a4e:	d012      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006a50:	e070      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a52:	4b8a      	ldr	r3, [pc, #552]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a5e:	d107      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fd6b 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a6e:	e2a0      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a74:	e29d      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a76:	4b81      	ldr	r3, [pc, #516]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a82:	d107      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a84:	f107 0318 	add.w	r3, r7, #24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fab1 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006a92:	e28e      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a98:	e28b      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a9a:	4b78      	ldr	r3, [pc, #480]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa6:	d107      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fbf3 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ab6:	e27c      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006abc:	e279      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006abe:	4b6f      	ldr	r3, [pc, #444]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ac8:	4b6c      	ldr	r3, [pc, #432]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d10c      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ada:	4b68      	ldr	r3, [pc, #416]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	08db      	lsrs	r3, r3, #3
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	4a66      	ldr	r2, [pc, #408]	; (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aec:	e01e      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006aee:	4b63      	ldr	r3, [pc, #396]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afa:	d106      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b02:	d102      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b04:	4b5f      	ldr	r3, [pc, #380]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b08:	e010      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b0a:	4b5c      	ldr	r3, [pc, #368]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b16:	d106      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b1e:	d102      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006b20:	4b59      	ldr	r3, [pc, #356]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b24:	e002      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006b2a:	e242      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006b2c:	e241      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b2e:	4b57      	ldr	r3, [pc, #348]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b32:	e23e      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b38:	e23b      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b40:	f040 80a6 	bne.w	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006b44:	4b4d      	ldr	r3, [pc, #308]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b48:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b54:	d054      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b5c:	f200 808b 	bhi.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b66:	f000 8083 	beq.w	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b70:	f200 8081 	bhi.w	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7a:	d02f      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	d878      	bhi.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b90:	d012      	beq.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006b92:	e070      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b94:	4b39      	ldr	r3, [pc, #228]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba0:	d107      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fcca 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bb0:	e1ff      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb6:	e1fc      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bb8:	4b30      	ldr	r3, [pc, #192]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc4:	d107      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bc6:	f107 0318 	add.w	r3, r7, #24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fa10 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bd4:	e1ed      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bda:	e1ea      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bdc:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be8:	d107      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fb52 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006bf8:	e1db      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bfe:	e1d8      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c00:	4b1e      	ldr	r3, [pc, #120]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c0a:	4b1c      	ldr	r3, [pc, #112]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d10c      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d109      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c1c:	4b17      	ldr	r3, [pc, #92]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	08db      	lsrs	r3, r3, #3
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2e:	e01e      	b.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c30:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3c:	d106      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c44:	d102      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c4a:	e010      	b.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c58:	d106      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c60:	d102      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c66:	e002      	b.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006c6c:	e1a1      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006c6e:	e1a0      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c74:	e19d      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c7a:	e19a      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006c7c:	58024400 	.word	0x58024400
 8006c80:	03d09000 	.word	0x03d09000
 8006c84:	003d0900 	.word	0x003d0900
 8006c88:	007a1200 	.word	0x007a1200
 8006c8c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c96:	d173      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006c98:	4b9a      	ldr	r3, [pc, #616]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ca0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca8:	d02f      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cb0:	d863      	bhi.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cbe:	d012      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006cc0:	e05b      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cc2:	4b90      	ldr	r3, [pc, #576]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cce:	d107      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cd0:	f107 0318 	add.w	r3, r7, #24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f98b 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006cde:	e168      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ce4:	e165      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ce6:	4b87      	ldr	r3, [pc, #540]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf2:	d107      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf4:	f107 030c 	add.w	r3, r7, #12
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 facd 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d02:	e156      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d08:	e153      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d0a:	4b7e      	ldr	r3, [pc, #504]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d14:	4b7b      	ldr	r3, [pc, #492]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d10c      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d26:	4b77      	ldr	r3, [pc, #476]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	08db      	lsrs	r3, r3, #3
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	4a75      	ldr	r2, [pc, #468]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d38:	e01e      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d3a:	4b72      	ldr	r3, [pc, #456]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d46:	d106      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d4e:	d102      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006d50:	4b6e      	ldr	r3, [pc, #440]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d54:	e010      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d56:	4b6b      	ldr	r3, [pc, #428]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d62:	d106      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6a:	d102      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006d6c:	4b68      	ldr	r3, [pc, #416]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d70:	e002      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006d76:	e11c      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006d78:	e11b      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d7e:	e118      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d86:	d133      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006d88:	4b5e      	ldr	r3, [pc, #376]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d004      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d012      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006da0:	e023      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006da2:	4b58      	ldr	r3, [pc, #352]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fbc3 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006dbe:	e0f8      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc4:	e0f5      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dc6:	4b4f      	ldr	r3, [pc, #316]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dd2:	d107      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd4:	f107 0318 	add.w	r3, r7, #24
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 f909 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006de2:	e0e6      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de8:	e0e3      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dee:	e0e0      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df6:	f040 808d 	bne.w	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006dfa:	4b42      	ldr	r3, [pc, #264]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e0a:	d06b      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e12:	d874      	bhi.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1a:	d056      	beq.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d86c      	bhi.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e2a:	d03b      	beq.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e32:	d864      	bhi.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3a:	d021      	beq.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e42:	d85c      	bhi.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e50:	d004      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006e52:	e054      	b.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e54:	f000 f8b6 	bl	8006fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e58:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006e5a:	e0aa      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e5c:	4b29      	ldr	r3, [pc, #164]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e68:	d107      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e6a:	f107 0318 	add.w	r3, r7, #24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 f8be 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e78:	e09b      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e7e:	e098      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e80:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e8e:	f107 030c 	add.w	r3, r7, #12
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fa00 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e9c:	e089      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea2:	e086      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ea4:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d109      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006eb0:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	08db      	lsrs	r3, r3, #3
 8006eb6:	f003 0303 	and.w	r3, r3, #3
 8006eba:	4a13      	ldr	r2, [pc, #76]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ec2:	e076      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec8:	e073      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed6:	d102      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006ed8:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006edc:	e069      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ee2:	e066      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ee4:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef0:	d102      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8006ef2:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ef6:	e05c      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006efc:	e059      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f02:	e056      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006f04:	58024400 	.word	0x58024400
 8006f08:	03d09000 	.word	0x03d09000
 8006f0c:	003d0900 	.word	0x003d0900
 8006f10:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1a:	d148      	bne.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006f1c:	4b27      	ldr	r3, [pc, #156]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f2c:	d02a      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f34:	d838      	bhi.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f42:	d00d      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006f44:	e030      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f46:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f52:	d102      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8006f54:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006f56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f58:	e02b      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f5e:	e028      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f60:	4b16      	ldr	r3, [pc, #88]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f6c:	d107      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fae4 	bl	8007540 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006f7c:	e019      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f82:	e016      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f84:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f90:	d107      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f92:	f107 0318 	add.w	r3, r7, #24
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f82a 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006fa0:	e007      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa6:	e004      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fac:	e001      	b.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3740      	adds	r7, #64	; 0x40
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	58024400 	.word	0x58024400
 8006fc0:	007a1200 	.word	0x007a1200

08006fc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fc8:	f7fe fc40 	bl	800584c <HAL_RCC_GetHCLKFreq>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	091b      	lsrs	r3, r3, #4
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	4904      	ldr	r1, [pc, #16]	; (8006fec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fda:	5ccb      	ldrb	r3, [r1, r3]
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	0801395c 	.word	0x0801395c

08006ff0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b089      	sub	sp, #36	; 0x24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ff8:	4ba1      	ldr	r3, [pc, #644]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007002:	4b9f      	ldr	r3, [pc, #636]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	0b1b      	lsrs	r3, r3, #12
 8007008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800700c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800700e:	4b9c      	ldr	r3, [pc, #624]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800701a:	4b99      	ldr	r3, [pc, #612]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	08db      	lsrs	r3, r3, #3
 8007020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8111 	beq.w	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b02      	cmp	r3, #2
 8007042:	f000 8083 	beq.w	800714c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b02      	cmp	r3, #2
 800704a:	f200 80a1 	bhi.w	8007190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d056      	beq.n	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800705a:	e099      	b.n	8007190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800705c:	4b88      	ldr	r3, [pc, #544]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	d02d      	beq.n	80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007068:	4b85      	ldr	r3, [pc, #532]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	08db      	lsrs	r3, r3, #3
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	4a84      	ldr	r2, [pc, #528]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
 8007078:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007092:	4b7b      	ldr	r3, [pc, #492]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070c2:	e087      	b.n	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d6:	4b6a      	ldr	r3, [pc, #424]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007106:	e065      	b.n	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711a:	4b59      	ldr	r3, [pc, #356]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712a:	ed97 6a03 	vldr	s12, [r7, #12]
 800712e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800714a:	e043      	b.n	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007156:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800715a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715e:	4b48      	ldr	r3, [pc, #288]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007172:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800718e:	e021      	b.n	80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b37      	ldr	r3, [pc, #220]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80071d4:	4b2a      	ldr	r3, [pc, #168]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	0a5b      	lsrs	r3, r3, #9
 80071da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071fa:	ee17 2a90 	vmov	r2, s15
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007202:	4b1f      	ldr	r3, [pc, #124]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800721c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007228:	ee17 2a90 	vmov	r2, s15
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007230:	4b13      	ldr	r3, [pc, #76]	; (8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	0e1b      	lsrs	r3, r3, #24
 8007236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800724a:	edd7 6a07 	vldr	s13, [r7, #28]
 800724e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007256:	ee17 2a90 	vmov	r2, s15
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800725e:	e008      	b.n	8007272 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	609a      	str	r2, [r3, #8]
}
 8007272:	bf00      	nop
 8007274:	3724      	adds	r7, #36	; 0x24
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400
 8007284:	03d09000 	.word	0x03d09000
 8007288:	46000000 	.word	0x46000000
 800728c:	4c742400 	.word	0x4c742400
 8007290:	4a742400 	.word	0x4a742400
 8007294:	4af42400 	.word	0x4af42400

08007298 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007298:	b480      	push	{r7}
 800729a:	b089      	sub	sp, #36	; 0x24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072a0:	4ba1      	ldr	r3, [pc, #644]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80072aa:	4b9f      	ldr	r3, [pc, #636]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	0d1b      	lsrs	r3, r3, #20
 80072b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072b6:	4b9c      	ldr	r3, [pc, #624]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80072c2:	4b99      	ldr	r3, [pc, #612]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	08db      	lsrs	r3, r3, #3
 80072c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8111 	beq.w	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	f000 8083 	beq.w	80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	f200 80a1 	bhi.w	8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d056      	beq.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007302:	e099      	b.n	8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007304:	4b88      	ldr	r3, [pc, #544]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b00      	cmp	r3, #0
 800730e:	d02d      	beq.n	800736c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007310:	4b85      	ldr	r3, [pc, #532]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	08db      	lsrs	r3, r3, #3
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	4a84      	ldr	r2, [pc, #528]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800731c:	fa22 f303 	lsr.w	r3, r2, r3
 8007320:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733a:	4b7b      	ldr	r3, [pc, #492]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734a:	ed97 6a03 	vldr	s12, [r7, #12]
 800734e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007366:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800736a:	e087      	b.n	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800737a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737e:	4b6a      	ldr	r3, [pc, #424]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007392:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ae:	e065      	b.n	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c2:	4b59      	ldr	r3, [pc, #356]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073f2:	e043      	b.n	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800753c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007406:	4b48      	ldr	r3, [pc, #288]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	ed97 6a03 	vldr	s12, [r7, #12]
 800741a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800741e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007436:	e021      	b.n	800747c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744a:	4b37      	ldr	r3, [pc, #220]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745a:	ed97 6a03 	vldr	s12, [r7, #12]
 800745e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800747a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800747c:	4b2a      	ldr	r3, [pc, #168]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	0a5b      	lsrs	r3, r3, #9
 8007482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007496:	edd7 6a07 	vldr	s13, [r7, #28]
 800749a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800749e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a2:	ee17 2a90 	vmov	r2, s15
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074aa:	4b1f      	ldr	r3, [pc, #124]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	0c1b      	lsrs	r3, r3, #16
 80074b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d0:	ee17 2a90 	vmov	r2, s15
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80074d8:	4b13      	ldr	r3, [pc, #76]	; (8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	0e1b      	lsrs	r3, r3, #24
 80074de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fe:	ee17 2a90 	vmov	r2, s15
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007506:	e008      	b.n	800751a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	609a      	str	r2, [r3, #8]
}
 800751a:	bf00      	nop
 800751c:	3724      	adds	r7, #36	; 0x24
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	58024400 	.word	0x58024400
 800752c:	03d09000 	.word	0x03d09000
 8007530:	46000000 	.word	0x46000000
 8007534:	4c742400 	.word	0x4c742400
 8007538:	4a742400 	.word	0x4a742400
 800753c:	4af42400 	.word	0x4af42400

08007540 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007540:	b480      	push	{r7}
 8007542:	b089      	sub	sp, #36	; 0x24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007548:	4ba0      	ldr	r3, [pc, #640]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007552:	4b9e      	ldr	r3, [pc, #632]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	091b      	lsrs	r3, r3, #4
 8007558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800755c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800755e:	4b9b      	ldr	r3, [pc, #620]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007568:	4b98      	ldr	r3, [pc, #608]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800756a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756c:	08db      	lsrs	r3, r3, #3
 800756e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	fb02 f303 	mul.w	r3, r2, r3
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007580:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 8111 	beq.w	80077ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2b02      	cmp	r3, #2
 8007590:	f000 8083 	beq.w	800769a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b02      	cmp	r3, #2
 8007598:	f200 80a1 	bhi.w	80076de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d056      	beq.n	8007656 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80075a8:	e099      	b.n	80076de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075aa:	4b88      	ldr	r3, [pc, #544]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d02d      	beq.n	8007612 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b6:	4b85      	ldr	r3, [pc, #532]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	08db      	lsrs	r3, r3, #3
 80075bc:	f003 0303 	and.w	r3, r3, #3
 80075c0:	4a83      	ldr	r2, [pc, #524]	; (80077d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80075c2:	fa22 f303 	lsr.w	r3, r2, r3
 80075c6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e0:	4b7a      	ldr	r3, [pc, #488]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80075f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007610:	e087      	b.n	8007722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007624:	4b69      	ldr	r3, [pc, #420]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007634:	ed97 6a03 	vldr	s12, [r7, #12]
 8007638:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800763c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007650:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007654:	e065      	b.n	8007722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007660:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007668:	4b58      	ldr	r3, [pc, #352]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007678:	ed97 6a03 	vldr	s12, [r7, #12]
 800767c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007694:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007698:	e043      	b.n	8007722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80076a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ac:	4b47      	ldr	r3, [pc, #284]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076dc:	e021      	b.n	8007722 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	ee07 3a90 	vmov	s15, r3
 80076e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80077d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f0:	4b36      	ldr	r3, [pc, #216]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007700:	ed97 6a03 	vldr	s12, [r7, #12]
 8007704:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007720:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007722:	4b2a      	ldr	r3, [pc, #168]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	0a5b      	lsrs	r3, r3, #9
 8007728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800773c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007748:	ee17 2a90 	vmov	r2, s15
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007750:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007762:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800776a:	edd7 6a07 	vldr	s13, [r7, #28]
 800776e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007776:	ee17 2a90 	vmov	r2, s15
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	0e1b      	lsrs	r3, r3, #24
 8007784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007794:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007798:	edd7 6a07 	vldr	s13, [r7, #28]
 800779c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a4:	ee17 2a90 	vmov	r2, s15
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80077ac:	e008      	b.n	80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	609a      	str	r2, [r3, #8]
}
 80077c0:	bf00      	nop
 80077c2:	3724      	adds	r7, #36	; 0x24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	58024400 	.word	0x58024400
 80077d0:	03d09000 	.word	0x03d09000
 80077d4:	46000000 	.word	0x46000000
 80077d8:	4c742400 	.word	0x4c742400
 80077dc:	4a742400 	.word	0x4a742400
 80077e0:	4af42400 	.word	0x4af42400

080077e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077f2:	4b53      	ldr	r3, [pc, #332]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d101      	bne.n	8007802 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e099      	b.n	8007936 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007802:	4b4f      	ldr	r3, [pc, #316]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a4e      	ldr	r2, [pc, #312]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800780c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780e:	f7fb ff27 	bl	8003660 <HAL_GetTick>
 8007812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007814:	e008      	b.n	8007828 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007816:	f7fb ff23 	bl	8003660 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e086      	b.n	8007936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007828:	4b45      	ldr	r3, [pc, #276]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f0      	bne.n	8007816 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007834:	4b42      	ldr	r3, [pc, #264]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	031b      	lsls	r3, r3, #12
 8007842:	493f      	ldr	r1, [pc, #252]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007844:	4313      	orrs	r3, r2
 8007846:	628b      	str	r3, [r1, #40]	; 0x28
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	3b01      	subs	r3, #1
 800784e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	3b01      	subs	r3, #1
 8007858:	025b      	lsls	r3, r3, #9
 800785a:	b29b      	uxth	r3, r3
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	3b01      	subs	r3, #1
 8007864:	041b      	lsls	r3, r3, #16
 8007866:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	3b01      	subs	r3, #1
 8007872:	061b      	lsls	r3, r3, #24
 8007874:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007878:	4931      	ldr	r1, [pc, #196]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800787a:	4313      	orrs	r3, r2
 800787c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800787e:	4b30      	ldr	r3, [pc, #192]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	492d      	ldr	r1, [pc, #180]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800788c:	4313      	orrs	r3, r2
 800788e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007890:	4b2b      	ldr	r3, [pc, #172]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	f023 0220 	bic.w	r2, r3, #32
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	4928      	ldr	r1, [pc, #160]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80078a2:	4b27      	ldr	r3, [pc, #156]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	4a26      	ldr	r2, [pc, #152]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078a8:	f023 0310 	bic.w	r3, r3, #16
 80078ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078ae:	4b24      	ldr	r3, [pc, #144]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <RCCEx_PLL2_Config+0x160>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	69d2      	ldr	r2, [r2, #28]
 80078ba:	00d2      	lsls	r2, r2, #3
 80078bc:	4920      	ldr	r1, [pc, #128]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078c2:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078c8:	f043 0310 	orr.w	r3, r3, #16
 80078cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078d4:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	4a19      	ldr	r2, [pc, #100]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078e0:	e00f      	b.n	8007902 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d106      	bne.n	80078f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078e8:	4b15      	ldr	r3, [pc, #84]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	4a14      	ldr	r2, [pc, #80]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078f4:	e005      	b.n	8007902 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078f6:	4b12      	ldr	r3, [pc, #72]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	4a11      	ldr	r2, [pc, #68]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 80078fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007900:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007902:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a0e      	ldr	r2, [pc, #56]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 8007908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800790c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790e:	f7fb fea7 	bl	8003660 <HAL_GetTick>
 8007912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007914:	e008      	b.n	8007928 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007916:	f7fb fea3 	bl	8003660 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e006      	b.n	8007936 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <RCCEx_PLL2_Config+0x15c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	58024400 	.word	0x58024400
 8007944:	ffff0007 	.word	0xffff0007

08007948 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007956:	4b53      	ldr	r3, [pc, #332]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	2b03      	cmp	r3, #3
 8007960:	d101      	bne.n	8007966 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e099      	b.n	8007a9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007966:	4b4f      	ldr	r3, [pc, #316]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a4e      	ldr	r2, [pc, #312]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 800796c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007972:	f7fb fe75 	bl	8003660 <HAL_GetTick>
 8007976:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007978:	e008      	b.n	800798c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800797a:	f7fb fe71 	bl	8003660 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d901      	bls.n	800798c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e086      	b.n	8007a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800798c:	4b45      	ldr	r3, [pc, #276]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f0      	bne.n	800797a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007998:	4b42      	ldr	r3, [pc, #264]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	051b      	lsls	r3, r3, #20
 80079a6:	493f      	ldr	r1, [pc, #252]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	628b      	str	r3, [r1, #40]	; 0x28
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	025b      	lsls	r3, r3, #9
 80079be:	b29b      	uxth	r3, r3
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	041b      	lsls	r3, r3, #16
 80079ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	061b      	lsls	r3, r3, #24
 80079d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079dc:	4931      	ldr	r1, [pc, #196]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079e2:	4b30      	ldr	r3, [pc, #192]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	492d      	ldr	r1, [pc, #180]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079f4:	4b2b      	ldr	r3, [pc, #172]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	4928      	ldr	r1, [pc, #160]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a06:	4b27      	ldr	r3, [pc, #156]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	4a26      	ldr	r2, [pc, #152]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a16:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <RCCEx_PLL3_Config+0x160>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	69d2      	ldr	r2, [r2, #28]
 8007a1e:	00d2      	lsls	r2, r2, #3
 8007a20:	4920      	ldr	r1, [pc, #128]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a26:	4b1f      	ldr	r3, [pc, #124]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d106      	bne.n	8007a46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a38:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a19      	ldr	r2, [pc, #100]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a44:	e00f      	b.n	8007a66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d106      	bne.n	8007a5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a4c:	4b15      	ldr	r3, [pc, #84]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a14      	ldr	r2, [pc, #80]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a58:	e005      	b.n	8007a66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a5a:	4b12      	ldr	r3, [pc, #72]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	4a11      	ldr	r2, [pc, #68]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a66:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a0e      	ldr	r2, [pc, #56]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a72:	f7fb fdf5 	bl	8003660 <HAL_GetTick>
 8007a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a78:	e008      	b.n	8007a8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a7a:	f7fb fdf1 	bl	8003660 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d901      	bls.n	8007a8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e006      	b.n	8007a9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <RCCEx_PLL3_Config+0x15c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0f0      	beq.n	8007a7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	ffff0007 	.word	0xffff0007

08007aac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e075      	b.n	8007baa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7f9 ff9d 	bl	8001a10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2204      	movs	r2, #4
 8007ada:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f868 	bl	8007bb4 <HAL_SD_InitCard>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e05d      	b.n	8007baa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007aee:	f107 0308 	add.w	r3, r7, #8
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fda7 	bl	8008648 <HAL_SD_GetCardStatus>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e052      	b.n	8007baa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007b04:	7e3b      	ldrb	r3, [r7, #24]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007b0a:	7e7b      	ldrb	r3, [r7, #25]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d10a      	bne.n	8007b2e <HAL_SD_Init+0x82>
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <HAL_SD_Init+0x78>
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d004      	beq.n	8007b2e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8007b2c:	e00b      	b.n	8007b46 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d104      	bne.n	8007b40 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b3c:	659a      	str	r2, [r3, #88]	; 0x58
 8007b3e:	e002      	b.n	8007b46 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fe65 	bl	800881c <HAL_SD_ConfigWideBusOperation>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e026      	b.n	8007baa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007b5c:	f7fb fd80 	bl	8003660 <HAL_GetTick>
 8007b60:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b62:	e011      	b.n	8007b88 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b64:	f7fb fd7c 	bl	8003660 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	d109      	bne.n	8007b88 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b7a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e010      	b.n	8007baa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 ff59 	bl	8008a40 <HAL_SD_GetCardState>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d1e7      	bne.n	8007b64 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3728      	adds	r7, #40	; 0x28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007bb4:	b590      	push	{r4, r7, lr}
 8007bb6:	b08d      	sub	sp, #52	; 0x34
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007bd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007bd4:	f7fe fdd2 	bl	800677c <HAL_RCCEx_GetPeriphCLKFreq>
 8007bd8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007bee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e06a      	b.n	8007cca <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	0a1b      	lsrs	r3, r3, #8
 8007bf8:	4a36      	ldr	r2, [pc, #216]	; (8007cd4 <HAL_SD_InitCard+0x120>)
 8007bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681c      	ldr	r4, [r3, #0]
 8007c06:	466a      	mov	r2, sp
 8007c08:	f107 0318 	add.w	r3, r7, #24
 8007c0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007c10:	e882 0003 	stmia.w	r2, {r0, r1}
 8007c14:	f107 030c 	add.w	r3, r7, #12
 8007c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f003 fc20 	bl	800b460 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f003 fc63 	bl	800b4f0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007c36:	4a28      	ldr	r2, [pc, #160]	; (8007cd8 <HAL_SD_InitCard+0x124>)
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3e:	3301      	adds	r3, #1
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fb fd19 	bl	8003678 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 ffe8 	bl	8008c1c <SD_PowerON>
 8007c4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e02e      	b.n	8007cca <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 ff07 	bl	8008a80 <SD_InitCard>
 8007c72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e01b      	b.n	8007cca <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f003 fcbe 	bl	800b61c <SDMMC_CmdBlockLength>
 8007ca0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00f      	beq.n	8007cc8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a0b      	ldr	r2, [pc, #44]	; (8007cdc <HAL_SD_InitCard+0x128>)
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e000      	b.n	8007cca <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	372c      	adds	r7, #44	; 0x2c
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd90      	pop	{r4, r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	014f8b59 	.word	0x014f8b59
 8007cd8:	00012110 	.word	0x00012110
 8007cdc:	1fe00fff 	.word	0x1fe00fff

08007ce0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08c      	sub	sp, #48	; 0x30
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d107      	bne.n	8007d08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e08d      	b.n	8007e24 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	f040 8086 	bne.w	8007e22 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	441a      	add	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d907      	bls.n	8007d3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e074      	b.n	8007e24 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2200      	movs	r2, #0
 8007d48:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	025a      	lsls	r2, r3, #9
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d002      	beq.n	8007d66 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	025b      	lsls	r3, r3, #9
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	025b      	lsls	r3, r3, #9
 8007d70:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d72:	2390      	movs	r3, #144	; 0x90
 8007d74:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d76:	2302      	movs	r3, #2
 8007d78:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f107 0210 	add.w	r2, r7, #16
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f003 fc19 	bl	800b5c4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2201      	movs	r2, #1
 8007db0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d90a      	bls.n	8007dce <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2282      	movs	r2, #130	; 0x82
 8007dbc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f003 fc6f 	bl	800b6a8 <SDMMC_CmdReadMultiBlock>
 8007dca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007dcc:	e009      	b.n	8007de2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2281      	movs	r2, #129	; 0x81
 8007dd2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f003 fc41 	bl	800b662 <SDMMC_CmdReadSingleBlock>
 8007de0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d012      	beq.n	8007e0e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a0f      	ldr	r2, [pc, #60]	; (8007e2c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	431a      	orrs	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e00a      	b.n	8007e24 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007e1c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e000      	b.n	8007e24 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007e22:	2302      	movs	r3, #2
  }
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3730      	adds	r7, #48	; 0x30
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	1fe00fff 	.word	0x1fe00fff

08007e30 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08c      	sub	sp, #48	; 0x30
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d107      	bne.n	8007e58 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e08d      	b.n	8007f74 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	f040 8086 	bne.w	8007f72 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d907      	bls.n	8007e8a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e074      	b.n	8007f74 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2203      	movs	r2, #3
 8007e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2200      	movs	r2, #0
 8007e98:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	025a      	lsls	r2, r3, #9
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d002      	beq.n	8007eb6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	025b      	lsls	r3, r3, #9
 8007eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	025b      	lsls	r3, r3, #9
 8007ec0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ec2:	2390      	movs	r3, #144	; 0x90
 8007ec4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f107 0210 	add.w	r2, r7, #16
 8007eda:	4611      	mov	r1, r2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f003 fb71 	bl	800b5c4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2201      	movs	r2, #1
 8007f00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d90a      	bls.n	8007f1e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	22a0      	movs	r2, #160	; 0xa0
 8007f0c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f14:	4618      	mov	r0, r3
 8007f16:	f003 fc0d 	bl	800b734 <SDMMC_CmdWriteMultiBlock>
 8007f1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f1c:	e009      	b.n	8007f32 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2290      	movs	r2, #144	; 0x90
 8007f22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f003 fbdf 	bl	800b6ee <SDMMC_CmdWriteSingleBlock>
 8007f30:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d012      	beq.n	8007f5e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a0f      	ldr	r2, [pc, #60]	; (8007f7c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e00a      	b.n	8007f74 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e000      	b.n	8007f74 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007f72:	2302      	movs	r3, #2
  }
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3730      	adds	r7, #48	; 0x30
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	1fe00fff 	.word	0x1fe00fff

08007f80 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <HAL_SD_IRQHandler+0x2e>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 f924 	bl	80091f4 <SD_Read_IT>
 8007fac:	e19a      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80ac 	beq.w	8008116 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	4b9d      	ldr	r3, [pc, #628]	; (8008248 <HAL_SD_IRQHandler+0x2c8>)
 8007fd4:	400b      	ands	r3, r1
 8007fd6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d038      	beq.n	8008074 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <HAL_SD_IRQHandler+0x96>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b00      	cmp	r3, #0
 8008014:	d011      	beq.n	800803a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	f003 fbae 	bl	800b77c <SDMMC_CmdStopTransfer>
 8008020:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d008      	beq.n	800803a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f959 	bl	80082ec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a83      	ldr	r2, [pc, #524]	; (800824c <HAL_SD_IRQHandler+0x2cc>)
 8008040:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d104      	bne.n	8008064 <HAL_SD_IRQHandler+0xe4>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f004 f861 	bl	800c12c <HAL_SD_RxCpltCallback>
 800806a:	e13b      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f004 f853 	bl	800c118 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008072:	e137      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 8132 	beq.w	80082e4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2200      	movs	r2, #0
 8008086:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2200      	movs	r2, #0
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2200      	movs	r2, #0
 8008096:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d104      	bne.n	80080ac <HAL_SD_IRQHandler+0x12c>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0320 	and.w	r3, r3, #32
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d011      	beq.n	80080d0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f003 fb63 	bl	800b77c <SDMMC_CmdStopTransfer>
 80080b6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d008      	beq.n	80080d0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f90e 	bl	80082ec <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <HAL_SD_IRQHandler+0x172>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f004 f810 	bl	800c118 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <HAL_SD_IRQHandler+0x18e>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80eb 	beq.w	80082e4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f004 f80c 	bl	800c12c <HAL_SD_RxCpltCallback>
}
 8008114:	e0e6      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <HAL_SD_IRQHandler+0x1b6>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f8a6 	bl	8009280 <SD_Write_IT>
 8008134:	e0d6      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 80a2 	beq.w	800828a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d005      	beq.n	8008160 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008158:	f043 0202 	orr.w	r2, r3, #2
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008166:	f003 0308 	and.w	r3, r3, #8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008172:	f043 0208 	orr.w	r2, r3, #8
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818c:	f043 0220 	orr.w	r2, r3, #32
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a6:	f043 0210 	orr.w	r2, r3, #16
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a26      	ldr	r2, [pc, #152]	; (800824c <HAL_SD_IRQHandler+0x2cc>)
 80081b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80081c4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081f4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f003 fabe 	bl	800b77c <SDMMC_CmdStopTransfer>
 8008200:	4602      	mov	r2, r0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	431a      	orrs	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800821a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00f      	beq.n	8008250 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f854 	bl	80082ec <HAL_SD_ErrorCallback>
}
 8008244:	e04e      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
 8008246:	bf00      	nop
 8008248:	ffff3ec5 	.word	0xffff3ec5
 800824c:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008256:	2b00      	cmp	r3, #0
 8008258:	d044      	beq.n	80082e4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825e:	2b00      	cmp	r3, #0
 8008260:	d040      	beq.n	80082e4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008270:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f832 	bl	80082ec <HAL_SD_ErrorCallback>
}
 8008288:	e02c      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d025      	beq.n	80082e4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10c      	bne.n	80082ca <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 f848 	bl	8009350 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80082c0:	e010      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 f830 	bl	8009328 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80082c8:	e00c      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 f831 	bl	800933c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80082da:	e003      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 f819 	bl	8009314 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80082e2:	e7ff      	b.n	80082e4 <HAL_SD_IRQHandler+0x364>
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830e:	0f9b      	lsrs	r3, r3, #30
 8008310:	b2da      	uxtb	r2, r3
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831a:	0e9b      	lsrs	r3, r3, #26
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	b2da      	uxtb	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832c:	0e1b      	lsrs	r3, r3, #24
 800832e:	b2db      	uxtb	r3, r3
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	b2da      	uxtb	r2, r3
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833e:	0c1b      	lsrs	r3, r3, #16
 8008340:	b2da      	uxtb	r2, r3
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	b2da      	uxtb	r2, r3
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008356:	b2da      	uxtb	r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008360:	0d1b      	lsrs	r3, r3, #20
 8008362:	b29a      	uxth	r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	0c1b      	lsrs	r3, r3, #16
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f003 030f 	and.w	r3, r3, #15
 8008374:	b2da      	uxtb	r2, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837e:	0bdb      	lsrs	r3, r3, #15
 8008380:	b2db      	uxtb	r3, r3
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	b2da      	uxtb	r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008390:	0b9b      	lsrs	r3, r3, #14
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	b2da      	uxtb	r2, r3
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a2:	0b5b      	lsrs	r3, r3, #13
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b4:	0b1b      	lsrs	r3, r3, #12
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2200      	movs	r2, #0
 80083c6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d163      	bne.n	8008498 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d4:	009a      	lsls	r2, r3, #2
 80083d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80083da:	4013      	ands	r3, r2
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80083e0:	0f92      	lsrs	r2, r2, #30
 80083e2:	431a      	orrs	r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ec:	0edb      	lsrs	r3, r3, #27
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083fe:	0e1b      	lsrs	r3, r3, #24
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	b2da      	uxtb	r2, r3
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008410:	0d5b      	lsrs	r3, r3, #21
 8008412:	b2db      	uxtb	r3, r3
 8008414:	f003 0307 	and.w	r3, r3, #7
 8008418:	b2da      	uxtb	r2, r3
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008422:	0c9b      	lsrs	r3, r3, #18
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	b2da      	uxtb	r2, r3
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008434:	0bdb      	lsrs	r3, r3, #15
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	b2da      	uxtb	r2, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	7e1b      	ldrb	r3, [r3, #24]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	3302      	adds	r3, #2
 8008458:	2201      	movs	r2, #1
 800845a:	fa02 f303 	lsl.w	r3, r2, r3
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008462:	fb02 f203 	mul.w	r2, r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	7a1b      	ldrb	r3, [r3, #8]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	2201      	movs	r2, #1
 8008476:	409a      	lsls	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008484:	0a52      	lsrs	r2, r2, #9
 8008486:	fb02 f203 	mul.w	r2, r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008494:	655a      	str	r2, [r3, #84]	; 0x54
 8008496:	e031      	b.n	80084fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	2b01      	cmp	r3, #1
 800849e:	d11d      	bne.n	80084dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a4:	041b      	lsls	r3, r3, #16
 80084a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084ae:	0c1b      	lsrs	r3, r3, #16
 80084b0:	431a      	orrs	r2, r3
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	3301      	adds	r3, #1
 80084bc:	029a      	lsls	r2, r3, #10
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	655a      	str	r2, [r3, #84]	; 0x54
 80084da:	e00f      	b.n	80084fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a58      	ldr	r2, [pc, #352]	; (8008644 <HAL_SD_GetCardCSD+0x344>)
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e09d      	b.n	8008638 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008500:	0b9b      	lsrs	r3, r3, #14
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	b2da      	uxtb	r2, r3
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008512:	09db      	lsrs	r3, r3, #7
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851a:	b2da      	uxtb	r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852a:	b2da      	uxtb	r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008534:	0fdb      	lsrs	r3, r3, #31
 8008536:	b2da      	uxtb	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008540:	0f5b      	lsrs	r3, r3, #29
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 0303 	and.w	r3, r3, #3
 8008548:	b2da      	uxtb	r2, r3
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008552:	0e9b      	lsrs	r3, r3, #26
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008564:	0d9b      	lsrs	r3, r3, #22
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	b2da      	uxtb	r2, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008576:	0d5b      	lsrs	r3, r3, #21
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008592:	0c1b      	lsrs	r3, r3, #16
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	b2da      	uxtb	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a6:	0bdb      	lsrs	r3, r3, #15
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ba:	0b9b      	lsrs	r3, r3, #14
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ce:	0b5b      	lsrs	r3, r3, #13
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085e2:	0b1b      	lsrs	r3, r3, #12
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f6:	0a9b      	lsrs	r3, r3, #10
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	b2da      	uxtb	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008626:	b2da      	uxtb	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	1fe00fff 	.word	0x1fe00fff

08008648 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b094      	sub	sp, #80	; 0x50
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b03      	cmp	r3, #3
 8008662:	d101      	bne.n	8008668 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e0a7      	b.n	80087b8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008668:	f107 0308 	add.w	r3, r7, #8
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fb62 	bl	8008d38 <SD_SendSDStatus>
 8008674:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008678:	2b00      	cmp	r3, #0
 800867a:	d011      	beq.n	80086a0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a4f      	ldr	r2, [pc, #316]	; (80087c0 <HAL_SD_GetCardStatus+0x178>)
 8008682:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800869e:	e070      	b.n	8008782 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	099b      	lsrs	r3, r3, #6
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	0a1b      	lsrs	r3, r3, #8
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	0e1b      	lsrs	r3, r3, #24
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	4313      	orrs	r3, r2
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	061a      	lsls	r2, r3, #24
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086e6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086f0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	0e1b      	lsrs	r3, r3, #24
 80086f6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	0a1b      	lsrs	r3, r3, #8
 8008708:	b2da      	uxtb	r2, r3
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	0d1b      	lsrs	r3, r3, #20
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	b2da      	uxtb	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	0c1b      	lsrs	r3, r3, #16
 8008722:	b29b      	uxth	r3, r3
 8008724:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008728:	b29a      	uxth	r2, r3
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	b29b      	uxth	r3, r3
 800872e:	b2db      	uxtb	r3, r3
 8008730:	b29b      	uxth	r3, r3
 8008732:	4313      	orrs	r3, r2
 8008734:	b29a      	uxth	r2, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	0a9b      	lsrs	r3, r3, #10
 800873e:	b2db      	uxtb	r3, r3
 8008740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008744:	b2da      	uxtb	r2, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	b2db      	uxtb	r3, r3
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	b2da      	uxtb	r2, r3
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	091b      	lsrs	r3, r3, #4
 800875e:	b2db      	uxtb	r3, r3
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	b2da      	uxtb	r2, r3
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f003 030f 	and.w	r3, r3, #15
 8008772:	b2da      	uxtb	r2, r3
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	0e1b      	lsrs	r3, r3, #24
 800877c:	b2da      	uxtb	r2, r3
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800878a:	4618      	mov	r0, r3
 800878c:	f002 ff46 	bl	800b61c <SDMMC_CmdBlockLength>
 8008790:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00d      	beq.n	80087b4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a08      	ldr	r2, [pc, #32]	; (80087c0 <HAL_SD_GetCardStatus+0x178>)
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087a4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80087b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3750      	adds	r7, #80	; 0x50
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	1fe00fff 	.word	0x1fe00fff

080087c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800881c:	b590      	push	{r4, r7, lr}
 800881e:	b08d      	sub	sp, #52	; 0x34
 8008820:	af02      	add	r7, sp, #8
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2203      	movs	r2, #3
 8008834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	2b03      	cmp	r3, #3
 800883e:	d02e      	beq.n	800889e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008846:	d106      	bne.n	8008856 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	635a      	str	r2, [r3, #52]	; 0x34
 8008854:	e029      	b.n	80088aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800885c:	d10a      	bne.n	8008874 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fb62 	bl	8008f28 <SD_WideBus_Enable>
 8008864:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	635a      	str	r2, [r3, #52]	; 0x34
 8008872:	e01a      	b.n	80088aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fb9f 	bl	8008fbe <SD_WideBus_Disable>
 8008880:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	635a      	str	r2, [r3, #52]	; 0x34
 800888e:	e00c      	b.n	80088aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008894:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	635a      	str	r2, [r3, #52]	; 0x34
 800889c:	e005      	b.n	80088aa <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d007      	beq.n	80088c2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a5e      	ldr	r2, [pc, #376]	; (8008a30 <HAL_SD_ConfigWideBusOperation+0x214>)
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088c0:	e094      	b.n	80089ec <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80088c2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80088c6:	f7fd ff59 	bl	800677c <HAL_RCCEx_GetPeriphCLKFreq>
 80088ca:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 8083 	beq.w	80089da <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695a      	ldr	r2, [r3, #20]
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	4950      	ldr	r1, [pc, #320]	; (8008a34 <HAL_SD_ConfigWideBusOperation+0x218>)
 80088f2:	fba1 1303 	umull	r1, r3, r1, r3
 80088f6:	0e1b      	lsrs	r3, r3, #24
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d303      	bcc.n	8008904 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	e05a      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800890c:	d103      	bne.n	8008916 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	61bb      	str	r3, [r7, #24]
 8008914:	e051      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891e:	d126      	bne.n	800896e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10e      	bne.n	8008946 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	4a43      	ldr	r2, [pc, #268]	; (8008a38 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d906      	bls.n	800893e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	4a40      	ldr	r2, [pc, #256]	; (8008a34 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008934:	fba2 2303 	umull	r2, r3, r2, r3
 8008938:	0e5b      	lsrs	r3, r3, #25
 800893a:	61bb      	str	r3, [r7, #24]
 800893c:	e03d      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	e039      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	6a3a      	ldr	r2, [r7, #32]
 800894e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008952:	4a39      	ldr	r2, [pc, #228]	; (8008a38 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d906      	bls.n	8008966 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	4a36      	ldr	r2, [pc, #216]	; (8008a34 <HAL_SD_ConfigWideBusOperation+0x218>)
 800895c:	fba2 2303 	umull	r2, r3, r2, r3
 8008960:	0e5b      	lsrs	r3, r3, #25
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	e029      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	e025      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10e      	bne.n	8008994 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	4a30      	ldr	r2, [pc, #192]	; (8008a3c <HAL_SD_ConfigWideBusOperation+0x220>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d906      	bls.n	800898c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	4a2c      	ldr	r2, [pc, #176]	; (8008a34 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	0e1b      	lsrs	r3, r3, #24
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	e016      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	e012      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	6a3a      	ldr	r2, [r7, #32]
 800899c:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a0:	4a26      	ldr	r2, [pc, #152]	; (8008a3c <HAL_SD_ConfigWideBusOperation+0x220>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d906      	bls.n	80089b4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	4a22      	ldr	r2, [pc, #136]	; (8008a34 <HAL_SD_ConfigWideBusOperation+0x218>)
 80089aa:	fba2 2303 	umull	r2, r3, r2, r3
 80089ae:	0e1b      	lsrs	r3, r3, #24
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	e002      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681c      	ldr	r4, [r3, #0]
 80089be:	466a      	mov	r2, sp
 80089c0:	f107 0314 	add.w	r3, r7, #20
 80089c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80089c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80089cc:	f107 0308 	add.w	r3, r7, #8
 80089d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089d2:	4620      	mov	r0, r4
 80089d4:	f002 fd44 	bl	800b460 <SDMMC_Init>
 80089d8:	e008      	b.n	80089ec <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089f4:	4618      	mov	r0, r3
 80089f6:	f002 fe11 	bl	800b61c <SDMMC_CmdBlockLength>
 80089fa:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00c      	beq.n	8008a1c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a0a      	ldr	r2, [pc, #40]	; (8008a30 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	372c      	adds	r7, #44	; 0x2c
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd90      	pop	{r4, r7, pc}
 8008a30:	1fe00fff 	.word	0x1fe00fff
 8008a34:	55e63b89 	.word	0x55e63b89
 8008a38:	02faf080 	.word	0x02faf080
 8008a3c:	017d7840 	.word	0x017d7840

08008a40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a4c:	f107 030c 	add.w	r3, r7, #12
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa40 	bl	8008ed8 <SD_SendStatus>
 8008a58:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	0a5b      	lsrs	r3, r3, #9
 8008a70:	f003 030f 	and.w	r3, r3, #15
 8008a74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008a76:	693b      	ldr	r3, [r7, #16]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b090      	sub	sp, #64	; 0x40
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008a8c:	f7fa fde8 	bl	8003660 <HAL_GetTick>
 8008a90:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f002 fd3b 	bl	800b512 <SDMMC_GetPowerState>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d102      	bne.n	8008aa8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008aa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008aa6:	e0b5      	b.n	8008c14 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d02e      	beq.n	8008b0e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f002 ff86 	bl	800b9c6 <SDMMC_CmdSendCID>
 8008aba:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <SD_InitCard+0x46>
    {
      return errorstate;
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	e0a6      	b.n	8008c14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2100      	movs	r1, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 fd66 	bl	800b59e <SDMMC_GetResponse>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2104      	movs	r1, #4
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f002 fd5d 	bl	800b59e <SDMMC_GetResponse>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2108      	movs	r1, #8
 8008af0:	4618      	mov	r0, r3
 8008af2:	f002 fd54 	bl	800b59e <SDMMC_GetResponse>
 8008af6:	4602      	mov	r2, r0
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	210c      	movs	r1, #12
 8008b02:	4618      	mov	r0, r3
 8008b04:	f002 fd4b 	bl	800b59e <SDMMC_GetResponse>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d01d      	beq.n	8008b52 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008b16:	e019      	b.n	8008b4c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f107 020a 	add.w	r2, r7, #10
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f002 ff8e 	bl	800ba44 <SDMMC_CmdSetRelAdd>
 8008b28:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	e06f      	b.n	8008c14 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008b34:	f7fa fd94 	bl	8003660 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	f241 3287 	movw	r2, #4999	; 0x1387
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d902      	bls.n	8008b4c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008b46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b4a:	e063      	b.n	8008c14 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008b4c:	897b      	ldrh	r3, [r7, #10]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0e2      	beq.n	8008b18 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d036      	beq.n	8008bc8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b5a:	897b      	ldrh	r3, [r7, #10]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6a:	041b      	lsls	r3, r3, #16
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f002 ff48 	bl	800ba04 <SDMMC_CmdSendCSD>
 8008b74:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <SD_InitCard+0x100>
    {
      return errorstate;
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	e049      	b.n	8008c14 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2100      	movs	r1, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	f002 fd09 	bl	800b59e <SDMMC_GetResponse>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2104      	movs	r1, #4
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f002 fd00 	bl	800b59e <SDMMC_GetResponse>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2108      	movs	r1, #8
 8008baa:	4618      	mov	r0, r3
 8008bac:	f002 fcf7 	bl	800b59e <SDMMC_GetResponse>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	210c      	movs	r1, #12
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f002 fcee 	bl	800b59e <SDMMC_GetResponse>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2104      	movs	r1, #4
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f002 fce5 	bl	800b59e <SDMMC_GetResponse>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	0d1a      	lsrs	r2, r3, #20
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008bdc:	f107 030c 	add.w	r3, r7, #12
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fb8c 	bl	8008300 <HAL_SD_GetCardCSD>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bf2:	e00f      	b.n	8008c14 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f002 fdf7 	bl	800b7f4 <SDMMC_CmdSelDesel>
 8008c06:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <SD_InitCard+0x192>
  {
    return errorstate;
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	e000      	b.n	8008c14 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3740      	adds	r7, #64	; 0x40
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f002 fe00 	bl	800b83a <SDMMC_CmdGoIdleState>
 8008c3a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	e072      	b.n	8008d2c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f002 fe13 	bl	800b876 <SDMMC_CmdOperCond>
 8008c50:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c58:	d10d      	bne.n	8008c76 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 fde8 	bl	800b83a <SDMMC_CmdGoIdleState>
 8008c6a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d004      	beq.n	8008c7c <SD_PowerON+0x60>
    {
      return errorstate;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	e05a      	b.n	8008d2c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d137      	bne.n	8008cf4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 fe13 	bl	800b8b6 <SDMMC_CmdAppCommand>
 8008c90:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d02d      	beq.n	8008cf4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c9c:	e046      	b.n	8008d2c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f002 fe06 	bl	800b8b6 <SDMMC_CmdAppCommand>
 8008caa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <SD_PowerON+0x9a>
    {
      return errorstate;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	e03a      	b.n	8008d2c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	491e      	ldr	r1, [pc, #120]	; (8008d34 <SD_PowerON+0x118>)
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f002 fe1d 	bl	800b8fc <SDMMC_CmdAppOperCommand>
 8008cc2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d002      	beq.n	8008cd0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cce:	e02d      	b.n	8008d2c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f002 fc61 	bl	800b59e <SDMMC_GetResponse>
 8008cdc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	0fdb      	lsrs	r3, r3, #31
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d101      	bne.n	8008cea <SD_PowerON+0xce>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e000      	b.n	8008cec <SD_PowerON+0xd0>
 8008cea:	2300      	movs	r3, #0
 8008cec:	613b      	str	r3, [r7, #16]

    count++;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d802      	bhi.n	8008d04 <SD_PowerON+0xe8>
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0cc      	beq.n	8008c9e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d902      	bls.n	8008d14 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d12:	e00b      	b.n	8008d2c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	c1100000 	.word	0xc1100000

08008d38 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08c      	sub	sp, #48	; 0x30
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d42:	f7fa fc8d 	bl	8003660 <HAL_GetTick>
 8008d46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2100      	movs	r1, #0
 8008d52:	4618      	mov	r0, r3
 8008d54:	f002 fc23 	bl	800b59e <SDMMC_GetResponse>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d62:	d102      	bne.n	8008d6a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d68:	e0b0      	b.n	8008ecc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2140      	movs	r1, #64	; 0x40
 8008d70:	4618      	mov	r0, r3
 8008d72:	f002 fc53 	bl	800b61c <SDMMC_CmdBlockLength>
 8008d76:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d005      	beq.n	8008d8a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	e0a0      	b.n	8008ecc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d92:	041b      	lsls	r3, r3, #16
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f002 fd8d 	bl	800b8b6 <SDMMC_CmdAppCommand>
 8008d9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	e08d      	b.n	8008ecc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008db0:	f04f 33ff 	mov.w	r3, #4294967295
 8008db4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008db6:	2340      	movs	r3, #64	; 0x40
 8008db8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008dba:	2360      	movs	r3, #96	; 0x60
 8008dbc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f107 0208 	add.w	r2, r7, #8
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f002 fbf5 	bl	800b5c4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f002 fe75 	bl	800bace <SDMMC_CmdStatusRegister>
 8008de4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d02b      	beq.n	8008e44 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	e069      	b.n	8008ecc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d013      	beq.n	8008e2e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e0a:	e00d      	b.n	8008e28 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f002 fb4f 	bl	800b4b4 <SDMMC_ReadFIFO>
 8008e16:	4602      	mov	r2, r0
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	601a      	str	r2, [r3, #0]
        pData++;
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	3304      	adds	r3, #4
 8008e20:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	3301      	adds	r3, #1
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	2b07      	cmp	r3, #7
 8008e2c:	d9ee      	bls.n	8008e0c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e2e:	f7fa fc17 	bl	8003660 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3c:	d102      	bne.n	8008e44 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e42:	e043      	b.n	8008ecc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0d2      	beq.n	8008df8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e60:	2308      	movs	r3, #8
 8008e62:	e033      	b.n	8008ecc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e72:	2302      	movs	r3, #2
 8008e74:	e02a      	b.n	8008ecc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d017      	beq.n	8008eb4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008e84:	2320      	movs	r3, #32
 8008e86:	e021      	b.n	8008ecc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f002 fb11 	bl	800b4b4 <SDMMC_ReadFIFO>
 8008e92:	4602      	mov	r2, r0
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	601a      	str	r2, [r3, #0]
    pData++;
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e9e:	f7fa fbdf 	bl	8003660 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eac:	d102      	bne.n	8008eb4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008eae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008eb2:	e00b      	b.n	8008ecc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e2      	bne.n	8008e88 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a03      	ldr	r2, [pc, #12]	; (8008ed4 <SD_SendSDStatus+0x19c>)
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3730      	adds	r7, #48	; 0x30
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	18000f3a 	.word	0x18000f3a

08008ed8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d102      	bne.n	8008eee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008eec:	e018      	b.n	8008f20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef6:	041b      	lsls	r3, r3, #16
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	f002 fdc4 	bl	800ba88 <SDMMC_CmdSendStatus>
 8008f00:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	e009      	b.n	8008f20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f002 fb43 	bl	800b59e <SDMMC_GetResponse>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	2300      	movs	r3, #0
 8008f36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f002 fb2d 	bl	800b59e <SDMMC_GetResponse>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f4e:	d102      	bne.n	8008f56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f54:	e02f      	b.n	8008fb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f56:	f107 030c 	add.w	r3, r7, #12
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f879 	bl	8009054 <SD_FindSCR>
 8008f62:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	e023      	b.n	8008fb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d01c      	beq.n	8008fb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f80:	041b      	lsls	r3, r3, #16
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f002 fc96 	bl	800b8b6 <SDMMC_CmdAppCommand>
 8008f8a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	e00f      	b.n	8008fb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2102      	movs	r1, #2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f002 fccd 	bl	800b93c <SDMMC_CmdBusWidth>
 8008fa2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	e003      	b.n	8008fb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e001      	b.n	8008fb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b086      	sub	sp, #24
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f002 fae2 	bl	800b59e <SDMMC_GetResponse>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fe4:	d102      	bne.n	8008fec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fea:	e02f      	b.n	800904c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008fec:	f107 030c 	add.w	r3, r7, #12
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f82e 	bl	8009054 <SD_FindSCR>
 8008ff8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	e023      	b.n	800904c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d01c      	beq.n	8009048 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009016:	041b      	lsls	r3, r3, #16
 8009018:	4619      	mov	r1, r3
 800901a:	4610      	mov	r0, r2
 800901c:	f002 fc4b 	bl	800b8b6 <SDMMC_CmdAppCommand>
 8009020:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	e00f      	b.n	800904c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f002 fc82 	bl	800b93c <SDMMC_CmdBusWidth>
 8009038:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	e003      	b.n	800904c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009044:	2300      	movs	r3, #0
 8009046:	e001      	b.n	800904c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009048:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08e      	sub	sp, #56	; 0x38
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800905e:	f7fa faff 	bl	8003660 <HAL_GetTick>
 8009062:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009068:	2300      	movs	r3, #0
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2108      	movs	r1, #8
 800907a:	4618      	mov	r0, r3
 800907c:	f002 face 	bl	800b61c <SDMMC_CmdBlockLength>
 8009080:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	2b00      	cmp	r3, #0
 8009086:	d001      	beq.n	800908c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	e0ad      	b.n	80091e8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009094:	041b      	lsls	r3, r3, #16
 8009096:	4619      	mov	r1, r3
 8009098:	4610      	mov	r0, r2
 800909a:	f002 fc0c 	bl	800b8b6 <SDMMC_CmdAppCommand>
 800909e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	e09e      	b.n	80091e8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090aa:	f04f 33ff 	mov.w	r3, #4294967295
 80090ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80090b0:	2308      	movs	r3, #8
 80090b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80090b4:	2330      	movs	r3, #48	; 0x30
 80090b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090b8:	2302      	movs	r3, #2
 80090ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090bc:	2300      	movs	r3, #0
 80090be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f107 0210 	add.w	r2, r7, #16
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f002 fa78 	bl	800b5c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 fc52 	bl	800b982 <SDMMC_CmdSendSCR>
 80090de:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d027      	beq.n	8009136 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	e07e      	b.n	80091e8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d113      	bne.n	8009120 <SD_FindSCR+0xcc>
 80090f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d110      	bne.n	8009120 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f002 f9d6 	bl	800b4b4 <SDMMC_ReadFIFO>
 8009108:	4603      	mov	r3, r0
 800910a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f002 f9cf 	bl	800b4b4 <SDMMC_ReadFIFO>
 8009116:	4603      	mov	r3, r0
 8009118:	60fb      	str	r3, [r7, #12]
      index++;
 800911a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911c:	3301      	adds	r3, #1
 800911e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009120:	f7fa fa9e 	bl	8003660 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d102      	bne.n	8009136 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009130:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009134:	e058      	b.n	80091e8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800913c:	f240 532a 	movw	r3, #1322	; 0x52a
 8009140:	4013      	ands	r3, r2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0d1      	beq.n	80090ea <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914c:	f003 0308 	and.w	r3, r3, #8
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2208      	movs	r2, #8
 800915a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800915c:	2308      	movs	r3, #8
 800915e:	e043      	b.n	80091e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2202      	movs	r2, #2
 8009174:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009176:	2302      	movs	r3, #2
 8009178:	e036      	b.n	80091e8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009180:	f003 0320 	and.w	r3, r3, #32
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2220      	movs	r2, #32
 800918e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009190:	2320      	movs	r3, #32
 8009192:	e029      	b.n	80091e8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a15      	ldr	r2, [pc, #84]	; (80091f0 <SD_FindSCR+0x19c>)
 800919a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	061a      	lsls	r2, r3, #24
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	021b      	lsls	r3, r3, #8
 80091a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	0a1b      	lsrs	r3, r3, #8
 80091ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80091b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	0e1b      	lsrs	r3, r3, #24
 80091b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	601a      	str	r2, [r3, #0]
    scr++;
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	3304      	adds	r3, #4
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	061a      	lsls	r2, r3, #24
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	021b      	lsls	r3, r3, #8
 80091cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	0a1b      	lsrs	r3, r3, #8
 80091d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80091da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	0e1b      	lsrs	r3, r3, #24
 80091e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80091e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3738      	adds	r7, #56	; 0x38
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	18000f3a 	.word	0x18000f3a

080091f4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009206:	2b1f      	cmp	r3, #31
 8009208:	d936      	bls.n	8009278 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]
 800920e:	e027      	b.n	8009260 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f002 f94d 	bl	800b4b4 <SDMMC_ReadFIFO>
 800921a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	b2da      	uxtb	r2, r3
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	3301      	adds	r3, #1
 8009228:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	b2da      	uxtb	r2, r3
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	3301      	adds	r3, #1
 8009238:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	0c1b      	lsrs	r3, r3, #16
 800923e:	b2da      	uxtb	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	3301      	adds	r3, #1
 8009248:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	0e1b      	lsrs	r3, r3, #24
 800924e:	b2da      	uxtb	r2, r3
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	3301      	adds	r3, #1
 8009258:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	3301      	adds	r3, #1
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2b07      	cmp	r3, #7
 8009264:	d9d4      	bls.n	8009210 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	f1a3 0220 	sub.w	r2, r3, #32
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	2b1f      	cmp	r3, #31
 8009294:	d93a      	bls.n	800930c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e02b      	b.n	80092f4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	60fb      	str	r3, [r7, #12]
      tmp++;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3301      	adds	r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	021a      	lsls	r2, r3, #8
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
      tmp++;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	3301      	adds	r3, #1
 80092b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	041a      	lsls	r2, r3, #16
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	3301      	adds	r3, #1
 80092ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	061a      	lsls	r2, r3, #24
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	3301      	adds	r3, #1
 80092dc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f107 020c 	add.w	r2, r7, #12
 80092e6:	4611      	mov	r1, r2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f002 f8f0 	bl	800b4ce <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	3301      	adds	r3, #1
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b07      	cmp	r3, #7
 80092f8:	d9d0      	bls.n	800929c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a1b      	ldr	r3, [r3, #32]
 8009304:	f1a3 0220 	sub.w	r2, r3, #32
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	621a      	str	r2, [r3, #32]
  }
}
 800930c:	bf00      	nop
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e049      	b.n	800940a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7f8 fbb4 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3304      	adds	r3, #4
 80093a0:	4619      	mov	r1, r3
 80093a2:	4610      	mov	r0, r2
 80093a4:	f000 fb5c 	bl	8009a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b01      	cmp	r3, #1
 8009426:	d001      	beq.n	800942c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e056      	b.n	80094da <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a2b      	ldr	r2, [pc, #172]	; (80094e8 <HAL_TIM_Base_Start+0xd4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d02c      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009446:	d027      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a27      	ldr	r2, [pc, #156]	; (80094ec <HAL_TIM_Base_Start+0xd8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d022      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a26      	ldr	r2, [pc, #152]	; (80094f0 <HAL_TIM_Base_Start+0xdc>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d01d      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a24      	ldr	r2, [pc, #144]	; (80094f4 <HAL_TIM_Base_Start+0xe0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d018      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a23      	ldr	r2, [pc, #140]	; (80094f8 <HAL_TIM_Base_Start+0xe4>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d013      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a21      	ldr	r2, [pc, #132]	; (80094fc <HAL_TIM_Base_Start+0xe8>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00e      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a20      	ldr	r2, [pc, #128]	; (8009500 <HAL_TIM_Base_Start+0xec>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d009      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <HAL_TIM_Base_Start+0xf0>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d004      	beq.n	8009498 <HAL_TIM_Base_Start+0x84>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a1d      	ldr	r2, [pc, #116]	; (8009508 <HAL_TIM_Base_Start+0xf4>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d115      	bne.n	80094c4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689a      	ldr	r2, [r3, #8]
 800949e:	4b1b      	ldr	r3, [pc, #108]	; (800950c <HAL_TIM_Base_Start+0xf8>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b06      	cmp	r3, #6
 80094a8:	d015      	beq.n	80094d6 <HAL_TIM_Base_Start+0xc2>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094b0:	d011      	beq.n	80094d6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0201 	orr.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094c2:	e008      	b.n	80094d6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0201 	orr.w	r2, r2, #1
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	e000      	b.n	80094d8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40010000 	.word	0x40010000
 80094ec:	40000400 	.word	0x40000400
 80094f0:	40000800 	.word	0x40000800
 80094f4:	40000c00 	.word	0x40000c00
 80094f8:	40010400 	.word	0x40010400
 80094fc:	40001800 	.word	0x40001800
 8009500:	40014000 	.word	0x40014000
 8009504:	4000e000 	.word	0x4000e000
 8009508:	4000e400 	.word	0x4000e400
 800950c:	00010007 	.word	0x00010007

08009510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	d001      	beq.n	8009528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e05e      	b.n	80095e6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0201 	orr.w	r2, r2, #1
 800953e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a2b      	ldr	r2, [pc, #172]	; (80095f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d02c      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009552:	d027      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a27      	ldr	r2, [pc, #156]	; (80095f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d022      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a26      	ldr	r2, [pc, #152]	; (80095fc <HAL_TIM_Base_Start_IT+0xec>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d01d      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a24      	ldr	r2, [pc, #144]	; (8009600 <HAL_TIM_Base_Start_IT+0xf0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d018      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a23      	ldr	r2, [pc, #140]	; (8009604 <HAL_TIM_Base_Start_IT+0xf4>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d013      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a21      	ldr	r2, [pc, #132]	; (8009608 <HAL_TIM_Base_Start_IT+0xf8>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d00e      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a20      	ldr	r2, [pc, #128]	; (800960c <HAL_TIM_Base_Start_IT+0xfc>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d009      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a1e      	ldr	r2, [pc, #120]	; (8009610 <HAL_TIM_Base_Start_IT+0x100>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d004      	beq.n	80095a4 <HAL_TIM_Base_Start_IT+0x94>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a1d      	ldr	r2, [pc, #116]	; (8009614 <HAL_TIM_Base_Start_IT+0x104>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d115      	bne.n	80095d0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689a      	ldr	r2, [r3, #8]
 80095aa:	4b1b      	ldr	r3, [pc, #108]	; (8009618 <HAL_TIM_Base_Start_IT+0x108>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2b06      	cmp	r3, #6
 80095b4:	d015      	beq.n	80095e2 <HAL_TIM_Base_Start_IT+0xd2>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095bc:	d011      	beq.n	80095e2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0201 	orr.w	r2, r2, #1
 80095cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ce:	e008      	b.n	80095e2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f042 0201 	orr.w	r2, r2, #1
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	e000      	b.n	80095e4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40010000 	.word	0x40010000
 80095f8:	40000400 	.word	0x40000400
 80095fc:	40000800 	.word	0x40000800
 8009600:	40000c00 	.word	0x40000c00
 8009604:	40010400 	.word	0x40010400
 8009608:	40001800 	.word	0x40001800
 800960c:	40014000 	.word	0x40014000
 8009610:	4000e000 	.word	0x4000e000
 8009614:	4000e400 	.word	0x4000e400
 8009618:	00010007 	.word	0x00010007

0800961c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e049      	b.n	80096c2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f841 	bl	80096ca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f000 fa00 	bl	8009a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d122      	bne.n	800973a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d11b      	bne.n	800973a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f06f 0202 	mvn.w	r2, #2
 800970a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f003 0303 	and.w	r3, r3, #3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f97f 	bl	8009a24 <HAL_TIM_IC_CaptureCallback>
 8009726:	e005      	b.n	8009734 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f971 	bl	8009a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f982 	bl	8009a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f003 0304 	and.w	r3, r3, #4
 8009744:	2b04      	cmp	r3, #4
 8009746:	d122      	bne.n	800978e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f003 0304 	and.w	r3, r3, #4
 8009752:	2b04      	cmp	r3, #4
 8009754:	d11b      	bne.n	800978e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f06f 0204 	mvn.w	r2, #4
 800975e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f955 	bl	8009a24 <HAL_TIM_IC_CaptureCallback>
 800977a:	e005      	b.n	8009788 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f947 	bl	8009a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f958 	bl	8009a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b08      	cmp	r3, #8
 800979a:	d122      	bne.n	80097e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b08      	cmp	r3, #8
 80097a8:	d11b      	bne.n	80097e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f06f 0208 	mvn.w	r2, #8
 80097b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2204      	movs	r2, #4
 80097b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f92b 	bl	8009a24 <HAL_TIM_IC_CaptureCallback>
 80097ce:	e005      	b.n	80097dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f91d 	bl	8009a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f92e 	bl	8009a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b10      	cmp	r3, #16
 80097ee:	d122      	bne.n	8009836 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f003 0310 	and.w	r3, r3, #16
 80097fa:	2b10      	cmp	r3, #16
 80097fc:	d11b      	bne.n	8009836 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f06f 0210 	mvn.w	r2, #16
 8009806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2208      	movs	r2, #8
 800980c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f901 	bl	8009a24 <HAL_TIM_IC_CaptureCallback>
 8009822:	e005      	b.n	8009830 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f8f3 	bl	8009a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f904 	bl	8009a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b01      	cmp	r3, #1
 8009842:	d10e      	bne.n	8009862 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b01      	cmp	r3, #1
 8009850:	d107      	bne.n	8009862 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f06f 0201 	mvn.w	r2, #1
 800985a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7f7 fe9b 	bl	8001598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800986c:	2b80      	cmp	r3, #128	; 0x80
 800986e:	d10e      	bne.n	800988e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987a:	2b80      	cmp	r3, #128	; 0x80
 800987c:	d107      	bne.n	800988e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fc6f 	bl	800a16c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989c:	d10e      	bne.n	80098bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a8:	2b80      	cmp	r3, #128	; 0x80
 80098aa:	d107      	bne.n	80098bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fc62 	bl	800a180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c6:	2b40      	cmp	r3, #64	; 0x40
 80098c8:	d10e      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d4:	2b40      	cmp	r3, #64	; 0x40
 80098d6:	d107      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f8b2 	bl	8009a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	d10e      	bne.n	8009914 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b20      	cmp	r3, #32
 8009902:	d107      	bne.n	8009914 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0220 	mvn.w	r2, #32
 800990c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fc22 	bl	800a158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009936:	2302      	movs	r3, #2
 8009938:	e066      	b.n	8009a08 <HAL_TIM_OC_ConfigChannel+0xec>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b14      	cmp	r3, #20
 8009946:	d857      	bhi.n	80099f8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009948:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <HAL_TIM_OC_ConfigChannel+0x34>)
 800994a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994e:	bf00      	nop
 8009950:	080099a5 	.word	0x080099a5
 8009954:	080099f9 	.word	0x080099f9
 8009958:	080099f9 	.word	0x080099f9
 800995c:	080099f9 	.word	0x080099f9
 8009960:	080099b3 	.word	0x080099b3
 8009964:	080099f9 	.word	0x080099f9
 8009968:	080099f9 	.word	0x080099f9
 800996c:	080099f9 	.word	0x080099f9
 8009970:	080099c1 	.word	0x080099c1
 8009974:	080099f9 	.word	0x080099f9
 8009978:	080099f9 	.word	0x080099f9
 800997c:	080099f9 	.word	0x080099f9
 8009980:	080099cf 	.word	0x080099cf
 8009984:	080099f9 	.word	0x080099f9
 8009988:	080099f9 	.word	0x080099f9
 800998c:	080099f9 	.word	0x080099f9
 8009990:	080099dd 	.word	0x080099dd
 8009994:	080099f9 	.word	0x080099f9
 8009998:	080099f9 	.word	0x080099f9
 800999c:	080099f9 	.word	0x080099f9
 80099a0:	080099eb 	.word	0x080099eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68b9      	ldr	r1, [r7, #8]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f8fe 	bl	8009bac <TIM_OC1_SetConfig>
      break;
 80099b0:	e025      	b.n	80099fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 f987 	bl	8009ccc <TIM_OC2_SetConfig>
      break;
 80099be:	e01e      	b.n	80099fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68b9      	ldr	r1, [r7, #8]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 fa0a 	bl	8009de0 <TIM_OC3_SetConfig>
      break;
 80099cc:	e017      	b.n	80099fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68b9      	ldr	r1, [r7, #8]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fa8b 	bl	8009ef0 <TIM_OC4_SetConfig>
      break;
 80099da:	e010      	b.n	80099fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 faee 	bl	8009fc4 <TIM_OC5_SetConfig>
      break;
 80099e8:	e009      	b.n	80099fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fb4b 	bl	800a08c <TIM_OC6_SetConfig>
      break;
 80099f6:	e002      	b.n	80099fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	75fb      	strb	r3, [r7, #23]
      break;
 80099fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a44      	ldr	r2, [pc, #272]	; (8009b84 <TIM_Base_SetConfig+0x124>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d013      	beq.n	8009aa0 <TIM_Base_SetConfig+0x40>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7e:	d00f      	beq.n	8009aa0 <TIM_Base_SetConfig+0x40>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a41      	ldr	r2, [pc, #260]	; (8009b88 <TIM_Base_SetConfig+0x128>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00b      	beq.n	8009aa0 <TIM_Base_SetConfig+0x40>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a40      	ldr	r2, [pc, #256]	; (8009b8c <TIM_Base_SetConfig+0x12c>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d007      	beq.n	8009aa0 <TIM_Base_SetConfig+0x40>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a3f      	ldr	r2, [pc, #252]	; (8009b90 <TIM_Base_SetConfig+0x130>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d003      	beq.n	8009aa0 <TIM_Base_SetConfig+0x40>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a3e      	ldr	r2, [pc, #248]	; (8009b94 <TIM_Base_SetConfig+0x134>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d108      	bne.n	8009ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a33      	ldr	r2, [pc, #204]	; (8009b84 <TIM_Base_SetConfig+0x124>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d027      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac0:	d023      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a30      	ldr	r2, [pc, #192]	; (8009b88 <TIM_Base_SetConfig+0x128>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d01f      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a2f      	ldr	r2, [pc, #188]	; (8009b8c <TIM_Base_SetConfig+0x12c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d01b      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a2e      	ldr	r2, [pc, #184]	; (8009b90 <TIM_Base_SetConfig+0x130>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d017      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a2d      	ldr	r2, [pc, #180]	; (8009b94 <TIM_Base_SetConfig+0x134>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d013      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a2c      	ldr	r2, [pc, #176]	; (8009b98 <TIM_Base_SetConfig+0x138>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00f      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a2b      	ldr	r2, [pc, #172]	; (8009b9c <TIM_Base_SetConfig+0x13c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00b      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a2a      	ldr	r2, [pc, #168]	; (8009ba0 <TIM_Base_SetConfig+0x140>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d007      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a29      	ldr	r2, [pc, #164]	; (8009ba4 <TIM_Base_SetConfig+0x144>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d003      	beq.n	8009b0a <TIM_Base_SetConfig+0xaa>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a28      	ldr	r2, [pc, #160]	; (8009ba8 <TIM_Base_SetConfig+0x148>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d108      	bne.n	8009b1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a10      	ldr	r2, [pc, #64]	; (8009b84 <TIM_Base_SetConfig+0x124>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00f      	beq.n	8009b68 <TIM_Base_SetConfig+0x108>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a12      	ldr	r2, [pc, #72]	; (8009b94 <TIM_Base_SetConfig+0x134>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00b      	beq.n	8009b68 <TIM_Base_SetConfig+0x108>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a11      	ldr	r2, [pc, #68]	; (8009b98 <TIM_Base_SetConfig+0x138>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d007      	beq.n	8009b68 <TIM_Base_SetConfig+0x108>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a10      	ldr	r2, [pc, #64]	; (8009b9c <TIM_Base_SetConfig+0x13c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d003      	beq.n	8009b68 <TIM_Base_SetConfig+0x108>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a0f      	ldr	r2, [pc, #60]	; (8009ba0 <TIM_Base_SetConfig+0x140>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d103      	bne.n	8009b70 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	615a      	str	r2, [r3, #20]
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40010000 	.word	0x40010000
 8009b88:	40000400 	.word	0x40000400
 8009b8c:	40000800 	.word	0x40000800
 8009b90:	40000c00 	.word	0x40000c00
 8009b94:	40010400 	.word	0x40010400
 8009b98:	40014000 	.word	0x40014000
 8009b9c:	40014400 	.word	0x40014400
 8009ba0:	40014800 	.word	0x40014800
 8009ba4:	4000e000 	.word	0x4000e000
 8009ba8:	4000e400 	.word	0x4000e400

08009bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	f023 0201 	bic.w	r2, r3, #1
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	4b37      	ldr	r3, [pc, #220]	; (8009cb4 <TIM_OC1_SetConfig+0x108>)
 8009bd8:	4013      	ands	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0303 	bic.w	r3, r3, #3
 8009be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f023 0302 	bic.w	r3, r3, #2
 8009bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a2d      	ldr	r2, [pc, #180]	; (8009cb8 <TIM_OC1_SetConfig+0x10c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d00f      	beq.n	8009c28 <TIM_OC1_SetConfig+0x7c>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a2c      	ldr	r2, [pc, #176]	; (8009cbc <TIM_OC1_SetConfig+0x110>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00b      	beq.n	8009c28 <TIM_OC1_SetConfig+0x7c>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a2b      	ldr	r2, [pc, #172]	; (8009cc0 <TIM_OC1_SetConfig+0x114>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d007      	beq.n	8009c28 <TIM_OC1_SetConfig+0x7c>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a2a      	ldr	r2, [pc, #168]	; (8009cc4 <TIM_OC1_SetConfig+0x118>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d003      	beq.n	8009c28 <TIM_OC1_SetConfig+0x7c>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a29      	ldr	r2, [pc, #164]	; (8009cc8 <TIM_OC1_SetConfig+0x11c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d10c      	bne.n	8009c42 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f023 0308 	bic.w	r3, r3, #8
 8009c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f023 0304 	bic.w	r3, r3, #4
 8009c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a1c      	ldr	r2, [pc, #112]	; (8009cb8 <TIM_OC1_SetConfig+0x10c>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d00f      	beq.n	8009c6a <TIM_OC1_SetConfig+0xbe>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1b      	ldr	r2, [pc, #108]	; (8009cbc <TIM_OC1_SetConfig+0x110>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00b      	beq.n	8009c6a <TIM_OC1_SetConfig+0xbe>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a1a      	ldr	r2, [pc, #104]	; (8009cc0 <TIM_OC1_SetConfig+0x114>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d007      	beq.n	8009c6a <TIM_OC1_SetConfig+0xbe>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a19      	ldr	r2, [pc, #100]	; (8009cc4 <TIM_OC1_SetConfig+0x118>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d003      	beq.n	8009c6a <TIM_OC1_SetConfig+0xbe>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <TIM_OC1_SetConfig+0x11c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d111      	bne.n	8009c8e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	621a      	str	r2, [r3, #32]
}
 8009ca8:	bf00      	nop
 8009caa:	371c      	adds	r7, #28
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	fffeff8f 	.word	0xfffeff8f
 8009cb8:	40010000 	.word	0x40010000
 8009cbc:	40010400 	.word	0x40010400
 8009cc0:	40014000 	.word	0x40014000
 8009cc4:	40014400 	.word	0x40014400
 8009cc8:	40014800 	.word	0x40014800

08009ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	f023 0210 	bic.w	r2, r3, #16
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4b34      	ldr	r3, [pc, #208]	; (8009dc8 <TIM_OC2_SetConfig+0xfc>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f023 0320 	bic.w	r3, r3, #32
 8009d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a29      	ldr	r2, [pc, #164]	; (8009dcc <TIM_OC2_SetConfig+0x100>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d003      	beq.n	8009d34 <TIM_OC2_SetConfig+0x68>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a28      	ldr	r2, [pc, #160]	; (8009dd0 <TIM_OC2_SetConfig+0x104>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d10d      	bne.n	8009d50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	011b      	lsls	r3, r3, #4
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a1e      	ldr	r2, [pc, #120]	; (8009dcc <TIM_OC2_SetConfig+0x100>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00f      	beq.n	8009d78 <TIM_OC2_SetConfig+0xac>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a1d      	ldr	r2, [pc, #116]	; (8009dd0 <TIM_OC2_SetConfig+0x104>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <TIM_OC2_SetConfig+0xac>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a1c      	ldr	r2, [pc, #112]	; (8009dd4 <TIM_OC2_SetConfig+0x108>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d007      	beq.n	8009d78 <TIM_OC2_SetConfig+0xac>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a1b      	ldr	r2, [pc, #108]	; (8009dd8 <TIM_OC2_SetConfig+0x10c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d003      	beq.n	8009d78 <TIM_OC2_SetConfig+0xac>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a1a      	ldr	r2, [pc, #104]	; (8009ddc <TIM_OC2_SetConfig+0x110>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d113      	bne.n	8009da0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	621a      	str	r2, [r3, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	feff8fff 	.word	0xfeff8fff
 8009dcc:	40010000 	.word	0x40010000
 8009dd0:	40010400 	.word	0x40010400
 8009dd4:	40014000 	.word	0x40014000
 8009dd8:	40014400 	.word	0x40014400
 8009ddc:	40014800 	.word	0x40014800

08009de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4b33      	ldr	r3, [pc, #204]	; (8009ed8 <TIM_OC3_SetConfig+0xf8>)
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 0303 	bic.w	r3, r3, #3
 8009e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a28      	ldr	r2, [pc, #160]	; (8009edc <TIM_OC3_SetConfig+0xfc>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d003      	beq.n	8009e46 <TIM_OC3_SetConfig+0x66>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a27      	ldr	r2, [pc, #156]	; (8009ee0 <TIM_OC3_SetConfig+0x100>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d10d      	bne.n	8009e62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	021b      	lsls	r3, r3, #8
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a1d      	ldr	r2, [pc, #116]	; (8009edc <TIM_OC3_SetConfig+0xfc>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d00f      	beq.n	8009e8a <TIM_OC3_SetConfig+0xaa>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a1c      	ldr	r2, [pc, #112]	; (8009ee0 <TIM_OC3_SetConfig+0x100>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d00b      	beq.n	8009e8a <TIM_OC3_SetConfig+0xaa>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a1b      	ldr	r2, [pc, #108]	; (8009ee4 <TIM_OC3_SetConfig+0x104>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d007      	beq.n	8009e8a <TIM_OC3_SetConfig+0xaa>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a1a      	ldr	r2, [pc, #104]	; (8009ee8 <TIM_OC3_SetConfig+0x108>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d003      	beq.n	8009e8a <TIM_OC3_SetConfig+0xaa>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a19      	ldr	r2, [pc, #100]	; (8009eec <TIM_OC3_SetConfig+0x10c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d113      	bne.n	8009eb2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	011b      	lsls	r3, r3, #4
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	011b      	lsls	r3, r3, #4
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	621a      	str	r2, [r3, #32]
}
 8009ecc:	bf00      	nop
 8009ece:	371c      	adds	r7, #28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	fffeff8f 	.word	0xfffeff8f
 8009edc:	40010000 	.word	0x40010000
 8009ee0:	40010400 	.word	0x40010400
 8009ee4:	40014000 	.word	0x40014000
 8009ee8:	40014400 	.word	0x40014400
 8009eec:	40014800 	.word	0x40014800

08009ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4b24      	ldr	r3, [pc, #144]	; (8009fac <TIM_OC4_SetConfig+0xbc>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	031b      	lsls	r3, r3, #12
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a19      	ldr	r2, [pc, #100]	; (8009fb0 <TIM_OC4_SetConfig+0xc0>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d00f      	beq.n	8009f70 <TIM_OC4_SetConfig+0x80>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a18      	ldr	r2, [pc, #96]	; (8009fb4 <TIM_OC4_SetConfig+0xc4>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00b      	beq.n	8009f70 <TIM_OC4_SetConfig+0x80>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a17      	ldr	r2, [pc, #92]	; (8009fb8 <TIM_OC4_SetConfig+0xc8>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d007      	beq.n	8009f70 <TIM_OC4_SetConfig+0x80>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a16      	ldr	r2, [pc, #88]	; (8009fbc <TIM_OC4_SetConfig+0xcc>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d003      	beq.n	8009f70 <TIM_OC4_SetConfig+0x80>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a15      	ldr	r2, [pc, #84]	; (8009fc0 <TIM_OC4_SetConfig+0xd0>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d109      	bne.n	8009f84 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	019b      	lsls	r3, r3, #6
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	feff8fff 	.word	0xfeff8fff
 8009fb0:	40010000 	.word	0x40010000
 8009fb4:	40010400 	.word	0x40010400
 8009fb8:	40014000 	.word	0x40014000
 8009fbc:	40014400 	.word	0x40014400
 8009fc0:	40014800 	.word	0x40014800

08009fc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4b21      	ldr	r3, [pc, #132]	; (800a074 <TIM_OC5_SetConfig+0xb0>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a004:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	041b      	lsls	r3, r3, #16
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	4313      	orrs	r3, r2
 800a010:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a18      	ldr	r2, [pc, #96]	; (800a078 <TIM_OC5_SetConfig+0xb4>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d00f      	beq.n	800a03a <TIM_OC5_SetConfig+0x76>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a17      	ldr	r2, [pc, #92]	; (800a07c <TIM_OC5_SetConfig+0xb8>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00b      	beq.n	800a03a <TIM_OC5_SetConfig+0x76>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a16      	ldr	r2, [pc, #88]	; (800a080 <TIM_OC5_SetConfig+0xbc>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d007      	beq.n	800a03a <TIM_OC5_SetConfig+0x76>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a15      	ldr	r2, [pc, #84]	; (800a084 <TIM_OC5_SetConfig+0xc0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d003      	beq.n	800a03a <TIM_OC5_SetConfig+0x76>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a14      	ldr	r2, [pc, #80]	; (800a088 <TIM_OC5_SetConfig+0xc4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d109      	bne.n	800a04e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a040:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	621a      	str	r2, [r3, #32]
}
 800a068:	bf00      	nop
 800a06a:	371c      	adds	r7, #28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	fffeff8f 	.word	0xfffeff8f
 800a078:	40010000 	.word	0x40010000
 800a07c:	40010400 	.word	0x40010400
 800a080:	40014000 	.word	0x40014000
 800a084:	40014400 	.word	0x40014400
 800a088:	40014800 	.word	0x40014800

0800a08c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4b22      	ldr	r3, [pc, #136]	; (800a140 <TIM_OC6_SetConfig+0xb4>)
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	021b      	lsls	r3, r3, #8
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	051b      	lsls	r3, r3, #20
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a19      	ldr	r2, [pc, #100]	; (800a144 <TIM_OC6_SetConfig+0xb8>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00f      	beq.n	800a104 <TIM_OC6_SetConfig+0x78>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a18      	ldr	r2, [pc, #96]	; (800a148 <TIM_OC6_SetConfig+0xbc>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d00b      	beq.n	800a104 <TIM_OC6_SetConfig+0x78>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a17      	ldr	r2, [pc, #92]	; (800a14c <TIM_OC6_SetConfig+0xc0>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d007      	beq.n	800a104 <TIM_OC6_SetConfig+0x78>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a16      	ldr	r2, [pc, #88]	; (800a150 <TIM_OC6_SetConfig+0xc4>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d003      	beq.n	800a104 <TIM_OC6_SetConfig+0x78>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a15      	ldr	r2, [pc, #84]	; (800a154 <TIM_OC6_SetConfig+0xc8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d109      	bne.n	800a118 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a10a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	029b      	lsls	r3, r3, #10
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	4313      	orrs	r3, r2
 800a116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	621a      	str	r2, [r3, #32]
}
 800a132:	bf00      	nop
 800a134:	371c      	adds	r7, #28
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	feff8fff 	.word	0xfeff8fff
 800a144:	40010000 	.word	0x40010000
 800a148:	40010400 	.word	0x40010400
 800a14c:	40014000 	.word	0x40014000
 800a150:	40014400 	.word	0x40014400
 800a154:	40014800 	.word	0x40014800

0800a158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e042      	b.n	800a22c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d106      	bne.n	800a1be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7f7 fcbf 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2224      	movs	r2, #36	; 0x24
 800a1c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0201 	bic.w	r2, r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f82c 	bl	800a234 <UART_SetConfig>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d101      	bne.n	800a1e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e022      	b.n	800a22c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fe7e 	bl	800aef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689a      	ldr	r2, [r3, #8]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 ff05 	bl	800b034 <UART_CheckIdleState>
 800a22a:	4603      	mov	r3, r0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a234:	b5b0      	push	{r4, r5, r7, lr}
 800a236:	b08e      	sub	sp, #56	; 0x38
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	431a      	orrs	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	431a      	orrs	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	4313      	orrs	r3, r2
 800a258:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	4bbf      	ldr	r3, [pc, #764]	; (800a560 <UART_SetConfig+0x32c>)
 800a262:	4013      	ands	r3, r2
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a26a:	430b      	orrs	r3, r1
 800a26c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	430a      	orrs	r2, r1
 800a282:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4ab5      	ldr	r2, [pc, #724]	; (800a564 <UART_SetConfig+0x330>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d004      	beq.n	800a29e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a29a:	4313      	orrs	r3, r2
 800a29c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	4bb0      	ldr	r3, [pc, #704]	; (800a568 <UART_SetConfig+0x334>)
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6812      	ldr	r2, [r2, #0]
 800a2ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2ae:	430b      	orrs	r3, r1
 800a2b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	f023 010f 	bic.w	r1, r3, #15
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4aa7      	ldr	r2, [pc, #668]	; (800a56c <UART_SetConfig+0x338>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d176      	bne.n	800a3c0 <UART_SetConfig+0x18c>
 800a2d2:	4ba7      	ldr	r3, [pc, #668]	; (800a570 <UART_SetConfig+0x33c>)
 800a2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2da:	2b28      	cmp	r3, #40	; 0x28
 800a2dc:	d86c      	bhi.n	800a3b8 <UART_SetConfig+0x184>
 800a2de:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <UART_SetConfig+0xb0>)
 800a2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e4:	0800a389 	.word	0x0800a389
 800a2e8:	0800a3b9 	.word	0x0800a3b9
 800a2ec:	0800a3b9 	.word	0x0800a3b9
 800a2f0:	0800a3b9 	.word	0x0800a3b9
 800a2f4:	0800a3b9 	.word	0x0800a3b9
 800a2f8:	0800a3b9 	.word	0x0800a3b9
 800a2fc:	0800a3b9 	.word	0x0800a3b9
 800a300:	0800a3b9 	.word	0x0800a3b9
 800a304:	0800a391 	.word	0x0800a391
 800a308:	0800a3b9 	.word	0x0800a3b9
 800a30c:	0800a3b9 	.word	0x0800a3b9
 800a310:	0800a3b9 	.word	0x0800a3b9
 800a314:	0800a3b9 	.word	0x0800a3b9
 800a318:	0800a3b9 	.word	0x0800a3b9
 800a31c:	0800a3b9 	.word	0x0800a3b9
 800a320:	0800a3b9 	.word	0x0800a3b9
 800a324:	0800a399 	.word	0x0800a399
 800a328:	0800a3b9 	.word	0x0800a3b9
 800a32c:	0800a3b9 	.word	0x0800a3b9
 800a330:	0800a3b9 	.word	0x0800a3b9
 800a334:	0800a3b9 	.word	0x0800a3b9
 800a338:	0800a3b9 	.word	0x0800a3b9
 800a33c:	0800a3b9 	.word	0x0800a3b9
 800a340:	0800a3b9 	.word	0x0800a3b9
 800a344:	0800a3a1 	.word	0x0800a3a1
 800a348:	0800a3b9 	.word	0x0800a3b9
 800a34c:	0800a3b9 	.word	0x0800a3b9
 800a350:	0800a3b9 	.word	0x0800a3b9
 800a354:	0800a3b9 	.word	0x0800a3b9
 800a358:	0800a3b9 	.word	0x0800a3b9
 800a35c:	0800a3b9 	.word	0x0800a3b9
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3a9 	.word	0x0800a3a9
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	0800a3b9 	.word	0x0800a3b9
 800a370:	0800a3b9 	.word	0x0800a3b9
 800a374:	0800a3b9 	.word	0x0800a3b9
 800a378:	0800a3b9 	.word	0x0800a3b9
 800a37c:	0800a3b9 	.word	0x0800a3b9
 800a380:	0800a3b9 	.word	0x0800a3b9
 800a384:	0800a3b1 	.word	0x0800a3b1
 800a388:	2301      	movs	r3, #1
 800a38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38e:	e326      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a390:	2304      	movs	r3, #4
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e322      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a398:	2308      	movs	r3, #8
 800a39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39e:	e31e      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a6:	e31a      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a3a8:	2320      	movs	r3, #32
 800a3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ae:	e316      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a3b0:	2340      	movs	r3, #64	; 0x40
 800a3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b6:	e312      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a3b8:	2380      	movs	r3, #128	; 0x80
 800a3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3be:	e30e      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a6b      	ldr	r2, [pc, #428]	; (800a574 <UART_SetConfig+0x340>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d130      	bne.n	800a42c <UART_SetConfig+0x1f8>
 800a3ca:	4b69      	ldr	r3, [pc, #420]	; (800a570 <UART_SetConfig+0x33c>)
 800a3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	2b05      	cmp	r3, #5
 800a3d4:	d826      	bhi.n	800a424 <UART_SetConfig+0x1f0>
 800a3d6:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <UART_SetConfig+0x1a8>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3f5 	.word	0x0800a3f5
 800a3e0:	0800a3fd 	.word	0x0800a3fd
 800a3e4:	0800a405 	.word	0x0800a405
 800a3e8:	0800a40d 	.word	0x0800a40d
 800a3ec:	0800a415 	.word	0x0800a415
 800a3f0:	0800a41d 	.word	0x0800a41d
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3fa:	e2f0      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a402:	e2ec      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a404:	2308      	movs	r3, #8
 800a406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40a:	e2e8      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a40c:	2310      	movs	r3, #16
 800a40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a412:	e2e4      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a414:	2320      	movs	r3, #32
 800a416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41a:	e2e0      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a41c:	2340      	movs	r3, #64	; 0x40
 800a41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a422:	e2dc      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a424:	2380      	movs	r3, #128	; 0x80
 800a426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42a:	e2d8      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a51      	ldr	r2, [pc, #324]	; (800a578 <UART_SetConfig+0x344>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d130      	bne.n	800a498 <UART_SetConfig+0x264>
 800a436:	4b4e      	ldr	r3, [pc, #312]	; (800a570 <UART_SetConfig+0x33c>)
 800a438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a43a:	f003 0307 	and.w	r3, r3, #7
 800a43e:	2b05      	cmp	r3, #5
 800a440:	d826      	bhi.n	800a490 <UART_SetConfig+0x25c>
 800a442:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <UART_SetConfig+0x214>)
 800a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a448:	0800a461 	.word	0x0800a461
 800a44c:	0800a469 	.word	0x0800a469
 800a450:	0800a471 	.word	0x0800a471
 800a454:	0800a479 	.word	0x0800a479
 800a458:	0800a481 	.word	0x0800a481
 800a45c:	0800a489 	.word	0x0800a489
 800a460:	2300      	movs	r3, #0
 800a462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a466:	e2ba      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a468:	2304      	movs	r3, #4
 800a46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46e:	e2b6      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a470:	2308      	movs	r3, #8
 800a472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a476:	e2b2      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a478:	2310      	movs	r3, #16
 800a47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47e:	e2ae      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a480:	2320      	movs	r3, #32
 800a482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a486:	e2aa      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a488:	2340      	movs	r3, #64	; 0x40
 800a48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48e:	e2a6      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a490:	2380      	movs	r3, #128	; 0x80
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e2a2      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a37      	ldr	r2, [pc, #220]	; (800a57c <UART_SetConfig+0x348>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d130      	bne.n	800a504 <UART_SetConfig+0x2d0>
 800a4a2:	4b33      	ldr	r3, [pc, #204]	; (800a570 <UART_SetConfig+0x33c>)
 800a4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	2b05      	cmp	r3, #5
 800a4ac:	d826      	bhi.n	800a4fc <UART_SetConfig+0x2c8>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <UART_SetConfig+0x280>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a4cd 	.word	0x0800a4cd
 800a4b8:	0800a4d5 	.word	0x0800a4d5
 800a4bc:	0800a4dd 	.word	0x0800a4dd
 800a4c0:	0800a4e5 	.word	0x0800a4e5
 800a4c4:	0800a4ed 	.word	0x0800a4ed
 800a4c8:	0800a4f5 	.word	0x0800a4f5
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d2:	e284      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a4d4:	2304      	movs	r3, #4
 800a4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4da:	e280      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a4dc:	2308      	movs	r3, #8
 800a4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e2:	e27c      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ea:	e278      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a4ec:	2320      	movs	r3, #32
 800a4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f2:	e274      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a4f4:	2340      	movs	r3, #64	; 0x40
 800a4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fa:	e270      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a4fc:	2380      	movs	r3, #128	; 0x80
 800a4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a502:	e26c      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a1d      	ldr	r2, [pc, #116]	; (800a580 <UART_SetConfig+0x34c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d142      	bne.n	800a594 <UART_SetConfig+0x360>
 800a50e:	4b18      	ldr	r3, [pc, #96]	; (800a570 <UART_SetConfig+0x33c>)
 800a510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a512:	f003 0307 	and.w	r3, r3, #7
 800a516:	2b05      	cmp	r3, #5
 800a518:	d838      	bhi.n	800a58c <UART_SetConfig+0x358>
 800a51a:	a201      	add	r2, pc, #4	; (adr r2, 800a520 <UART_SetConfig+0x2ec>)
 800a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a520:	0800a539 	.word	0x0800a539
 800a524:	0800a541 	.word	0x0800a541
 800a528:	0800a549 	.word	0x0800a549
 800a52c:	0800a551 	.word	0x0800a551
 800a530:	0800a559 	.word	0x0800a559
 800a534:	0800a585 	.word	0x0800a585
 800a538:	2300      	movs	r3, #0
 800a53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53e:	e24e      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a540:	2304      	movs	r3, #4
 800a542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a546:	e24a      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a548:	2308      	movs	r3, #8
 800a54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54e:	e246      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a550:	2310      	movs	r3, #16
 800a552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a556:	e242      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a558:	2320      	movs	r3, #32
 800a55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55e:	e23e      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a560:	cfff69f3 	.word	0xcfff69f3
 800a564:	58000c00 	.word	0x58000c00
 800a568:	11fff4ff 	.word	0x11fff4ff
 800a56c:	40011000 	.word	0x40011000
 800a570:	58024400 	.word	0x58024400
 800a574:	40004400 	.word	0x40004400
 800a578:	40004800 	.word	0x40004800
 800a57c:	40004c00 	.word	0x40004c00
 800a580:	40005000 	.word	0x40005000
 800a584:	2340      	movs	r3, #64	; 0x40
 800a586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58a:	e228      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a58c:	2380      	movs	r3, #128	; 0x80
 800a58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a592:	e224      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4ab1      	ldr	r2, [pc, #708]	; (800a860 <UART_SetConfig+0x62c>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d176      	bne.n	800a68c <UART_SetConfig+0x458>
 800a59e:	4bb1      	ldr	r3, [pc, #708]	; (800a864 <UART_SetConfig+0x630>)
 800a5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5a6:	2b28      	cmp	r3, #40	; 0x28
 800a5a8:	d86c      	bhi.n	800a684 <UART_SetConfig+0x450>
 800a5aa:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <UART_SetConfig+0x37c>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a655 	.word	0x0800a655
 800a5b4:	0800a685 	.word	0x0800a685
 800a5b8:	0800a685 	.word	0x0800a685
 800a5bc:	0800a685 	.word	0x0800a685
 800a5c0:	0800a685 	.word	0x0800a685
 800a5c4:	0800a685 	.word	0x0800a685
 800a5c8:	0800a685 	.word	0x0800a685
 800a5cc:	0800a685 	.word	0x0800a685
 800a5d0:	0800a65d 	.word	0x0800a65d
 800a5d4:	0800a685 	.word	0x0800a685
 800a5d8:	0800a685 	.word	0x0800a685
 800a5dc:	0800a685 	.word	0x0800a685
 800a5e0:	0800a685 	.word	0x0800a685
 800a5e4:	0800a685 	.word	0x0800a685
 800a5e8:	0800a685 	.word	0x0800a685
 800a5ec:	0800a685 	.word	0x0800a685
 800a5f0:	0800a665 	.word	0x0800a665
 800a5f4:	0800a685 	.word	0x0800a685
 800a5f8:	0800a685 	.word	0x0800a685
 800a5fc:	0800a685 	.word	0x0800a685
 800a600:	0800a685 	.word	0x0800a685
 800a604:	0800a685 	.word	0x0800a685
 800a608:	0800a685 	.word	0x0800a685
 800a60c:	0800a685 	.word	0x0800a685
 800a610:	0800a66d 	.word	0x0800a66d
 800a614:	0800a685 	.word	0x0800a685
 800a618:	0800a685 	.word	0x0800a685
 800a61c:	0800a685 	.word	0x0800a685
 800a620:	0800a685 	.word	0x0800a685
 800a624:	0800a685 	.word	0x0800a685
 800a628:	0800a685 	.word	0x0800a685
 800a62c:	0800a685 	.word	0x0800a685
 800a630:	0800a675 	.word	0x0800a675
 800a634:	0800a685 	.word	0x0800a685
 800a638:	0800a685 	.word	0x0800a685
 800a63c:	0800a685 	.word	0x0800a685
 800a640:	0800a685 	.word	0x0800a685
 800a644:	0800a685 	.word	0x0800a685
 800a648:	0800a685 	.word	0x0800a685
 800a64c:	0800a685 	.word	0x0800a685
 800a650:	0800a67d 	.word	0x0800a67d
 800a654:	2301      	movs	r3, #1
 800a656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a65a:	e1c0      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a65c:	2304      	movs	r3, #4
 800a65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a662:	e1bc      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a664:	2308      	movs	r3, #8
 800a666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66a:	e1b8      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a66c:	2310      	movs	r3, #16
 800a66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a672:	e1b4      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a674:	2320      	movs	r3, #32
 800a676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67a:	e1b0      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a67c:	2340      	movs	r3, #64	; 0x40
 800a67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a682:	e1ac      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a684:	2380      	movs	r3, #128	; 0x80
 800a686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68a:	e1a8      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a75      	ldr	r2, [pc, #468]	; (800a868 <UART_SetConfig+0x634>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d130      	bne.n	800a6f8 <UART_SetConfig+0x4c4>
 800a696:	4b73      	ldr	r3, [pc, #460]	; (800a864 <UART_SetConfig+0x630>)
 800a698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69a:	f003 0307 	and.w	r3, r3, #7
 800a69e:	2b05      	cmp	r3, #5
 800a6a0:	d826      	bhi.n	800a6f0 <UART_SetConfig+0x4bc>
 800a6a2:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <UART_SetConfig+0x474>)
 800a6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a8:	0800a6c1 	.word	0x0800a6c1
 800a6ac:	0800a6c9 	.word	0x0800a6c9
 800a6b0:	0800a6d1 	.word	0x0800a6d1
 800a6b4:	0800a6d9 	.word	0x0800a6d9
 800a6b8:	0800a6e1 	.word	0x0800a6e1
 800a6bc:	0800a6e9 	.word	0x0800a6e9
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c6:	e18a      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ce:	e186      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d6:	e182      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a6d8:	2310      	movs	r3, #16
 800a6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6de:	e17e      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a6e0:	2320      	movs	r3, #32
 800a6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e6:	e17a      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a6e8:	2340      	movs	r3, #64	; 0x40
 800a6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ee:	e176      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a6f0:	2380      	movs	r3, #128	; 0x80
 800a6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f6:	e172      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a5b      	ldr	r2, [pc, #364]	; (800a86c <UART_SetConfig+0x638>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d130      	bne.n	800a764 <UART_SetConfig+0x530>
 800a702:	4b58      	ldr	r3, [pc, #352]	; (800a864 <UART_SetConfig+0x630>)
 800a704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	2b05      	cmp	r3, #5
 800a70c:	d826      	bhi.n	800a75c <UART_SetConfig+0x528>
 800a70e:	a201      	add	r2, pc, #4	; (adr r2, 800a714 <UART_SetConfig+0x4e0>)
 800a710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a714:	0800a72d 	.word	0x0800a72d
 800a718:	0800a735 	.word	0x0800a735
 800a71c:	0800a73d 	.word	0x0800a73d
 800a720:	0800a745 	.word	0x0800a745
 800a724:	0800a74d 	.word	0x0800a74d
 800a728:	0800a755 	.word	0x0800a755
 800a72c:	2300      	movs	r3, #0
 800a72e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a732:	e154      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a734:	2304      	movs	r3, #4
 800a736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a73a:	e150      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a73c:	2308      	movs	r3, #8
 800a73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a742:	e14c      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a744:	2310      	movs	r3, #16
 800a746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74a:	e148      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a74c:	2320      	movs	r3, #32
 800a74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a752:	e144      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a754:	2340      	movs	r3, #64	; 0x40
 800a756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75a:	e140      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a75c:	2380      	movs	r3, #128	; 0x80
 800a75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a762:	e13c      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a41      	ldr	r2, [pc, #260]	; (800a870 <UART_SetConfig+0x63c>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	f040 8082 	bne.w	800a874 <UART_SetConfig+0x640>
 800a770:	4b3c      	ldr	r3, [pc, #240]	; (800a864 <UART_SetConfig+0x630>)
 800a772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a778:	2b28      	cmp	r3, #40	; 0x28
 800a77a:	d86d      	bhi.n	800a858 <UART_SetConfig+0x624>
 800a77c:	a201      	add	r2, pc, #4	; (adr r2, 800a784 <UART_SetConfig+0x550>)
 800a77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a782:	bf00      	nop
 800a784:	0800a829 	.word	0x0800a829
 800a788:	0800a859 	.word	0x0800a859
 800a78c:	0800a859 	.word	0x0800a859
 800a790:	0800a859 	.word	0x0800a859
 800a794:	0800a859 	.word	0x0800a859
 800a798:	0800a859 	.word	0x0800a859
 800a79c:	0800a859 	.word	0x0800a859
 800a7a0:	0800a859 	.word	0x0800a859
 800a7a4:	0800a831 	.word	0x0800a831
 800a7a8:	0800a859 	.word	0x0800a859
 800a7ac:	0800a859 	.word	0x0800a859
 800a7b0:	0800a859 	.word	0x0800a859
 800a7b4:	0800a859 	.word	0x0800a859
 800a7b8:	0800a859 	.word	0x0800a859
 800a7bc:	0800a859 	.word	0x0800a859
 800a7c0:	0800a859 	.word	0x0800a859
 800a7c4:	0800a839 	.word	0x0800a839
 800a7c8:	0800a859 	.word	0x0800a859
 800a7cc:	0800a859 	.word	0x0800a859
 800a7d0:	0800a859 	.word	0x0800a859
 800a7d4:	0800a859 	.word	0x0800a859
 800a7d8:	0800a859 	.word	0x0800a859
 800a7dc:	0800a859 	.word	0x0800a859
 800a7e0:	0800a859 	.word	0x0800a859
 800a7e4:	0800a841 	.word	0x0800a841
 800a7e8:	0800a859 	.word	0x0800a859
 800a7ec:	0800a859 	.word	0x0800a859
 800a7f0:	0800a859 	.word	0x0800a859
 800a7f4:	0800a859 	.word	0x0800a859
 800a7f8:	0800a859 	.word	0x0800a859
 800a7fc:	0800a859 	.word	0x0800a859
 800a800:	0800a859 	.word	0x0800a859
 800a804:	0800a849 	.word	0x0800a849
 800a808:	0800a859 	.word	0x0800a859
 800a80c:	0800a859 	.word	0x0800a859
 800a810:	0800a859 	.word	0x0800a859
 800a814:	0800a859 	.word	0x0800a859
 800a818:	0800a859 	.word	0x0800a859
 800a81c:	0800a859 	.word	0x0800a859
 800a820:	0800a859 	.word	0x0800a859
 800a824:	0800a851 	.word	0x0800a851
 800a828:	2301      	movs	r3, #1
 800a82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82e:	e0d6      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a830:	2304      	movs	r3, #4
 800a832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a836:	e0d2      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a838:	2308      	movs	r3, #8
 800a83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83e:	e0ce      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a840:	2310      	movs	r3, #16
 800a842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a846:	e0ca      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a848:	2320      	movs	r3, #32
 800a84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84e:	e0c6      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a850:	2340      	movs	r3, #64	; 0x40
 800a852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a856:	e0c2      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a858:	2380      	movs	r3, #128	; 0x80
 800a85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85e:	e0be      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a860:	40011400 	.word	0x40011400
 800a864:	58024400 	.word	0x58024400
 800a868:	40007800 	.word	0x40007800
 800a86c:	40007c00 	.word	0x40007c00
 800a870:	40011800 	.word	0x40011800
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4aad      	ldr	r2, [pc, #692]	; (800ab30 <UART_SetConfig+0x8fc>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d176      	bne.n	800a96c <UART_SetConfig+0x738>
 800a87e:	4bad      	ldr	r3, [pc, #692]	; (800ab34 <UART_SetConfig+0x900>)
 800a880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a886:	2b28      	cmp	r3, #40	; 0x28
 800a888:	d86c      	bhi.n	800a964 <UART_SetConfig+0x730>
 800a88a:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <UART_SetConfig+0x65c>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a935 	.word	0x0800a935
 800a894:	0800a965 	.word	0x0800a965
 800a898:	0800a965 	.word	0x0800a965
 800a89c:	0800a965 	.word	0x0800a965
 800a8a0:	0800a965 	.word	0x0800a965
 800a8a4:	0800a965 	.word	0x0800a965
 800a8a8:	0800a965 	.word	0x0800a965
 800a8ac:	0800a965 	.word	0x0800a965
 800a8b0:	0800a93d 	.word	0x0800a93d
 800a8b4:	0800a965 	.word	0x0800a965
 800a8b8:	0800a965 	.word	0x0800a965
 800a8bc:	0800a965 	.word	0x0800a965
 800a8c0:	0800a965 	.word	0x0800a965
 800a8c4:	0800a965 	.word	0x0800a965
 800a8c8:	0800a965 	.word	0x0800a965
 800a8cc:	0800a965 	.word	0x0800a965
 800a8d0:	0800a945 	.word	0x0800a945
 800a8d4:	0800a965 	.word	0x0800a965
 800a8d8:	0800a965 	.word	0x0800a965
 800a8dc:	0800a965 	.word	0x0800a965
 800a8e0:	0800a965 	.word	0x0800a965
 800a8e4:	0800a965 	.word	0x0800a965
 800a8e8:	0800a965 	.word	0x0800a965
 800a8ec:	0800a965 	.word	0x0800a965
 800a8f0:	0800a94d 	.word	0x0800a94d
 800a8f4:	0800a965 	.word	0x0800a965
 800a8f8:	0800a965 	.word	0x0800a965
 800a8fc:	0800a965 	.word	0x0800a965
 800a900:	0800a965 	.word	0x0800a965
 800a904:	0800a965 	.word	0x0800a965
 800a908:	0800a965 	.word	0x0800a965
 800a90c:	0800a965 	.word	0x0800a965
 800a910:	0800a955 	.word	0x0800a955
 800a914:	0800a965 	.word	0x0800a965
 800a918:	0800a965 	.word	0x0800a965
 800a91c:	0800a965 	.word	0x0800a965
 800a920:	0800a965 	.word	0x0800a965
 800a924:	0800a965 	.word	0x0800a965
 800a928:	0800a965 	.word	0x0800a965
 800a92c:	0800a965 	.word	0x0800a965
 800a930:	0800a95d 	.word	0x0800a95d
 800a934:	2301      	movs	r3, #1
 800a936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93a:	e050      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a93c:	2304      	movs	r3, #4
 800a93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a942:	e04c      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a944:	2308      	movs	r3, #8
 800a946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94a:	e048      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a94c:	2310      	movs	r3, #16
 800a94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a952:	e044      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a954:	2320      	movs	r3, #32
 800a956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a95a:	e040      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a962:	e03c      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a964:	2380      	movs	r3, #128	; 0x80
 800a966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a96a:	e038      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a71      	ldr	r2, [pc, #452]	; (800ab38 <UART_SetConfig+0x904>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d130      	bne.n	800a9d8 <UART_SetConfig+0x7a4>
 800a976:	4b6f      	ldr	r3, [pc, #444]	; (800ab34 <UART_SetConfig+0x900>)
 800a978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	2b05      	cmp	r3, #5
 800a980:	d826      	bhi.n	800a9d0 <UART_SetConfig+0x79c>
 800a982:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <UART_SetConfig+0x754>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800a9a1 	.word	0x0800a9a1
 800a98c:	0800a9a9 	.word	0x0800a9a9
 800a990:	0800a9b1 	.word	0x0800a9b1
 800a994:	0800a9b9 	.word	0x0800a9b9
 800a998:	0800a9c1 	.word	0x0800a9c1
 800a99c:	0800a9c9 	.word	0x0800a9c9
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a6:	e01a      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a9a8:	2304      	movs	r3, #4
 800a9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ae:	e016      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a9b0:	2308      	movs	r3, #8
 800a9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b6:	e012      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a9b8:	2310      	movs	r3, #16
 800a9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9be:	e00e      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a9c0:	2320      	movs	r3, #32
 800a9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c6:	e00a      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a9c8:	2340      	movs	r3, #64	; 0x40
 800a9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ce:	e006      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a9d0:	2380      	movs	r3, #128	; 0x80
 800a9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9d6:	e002      	b.n	800a9de <UART_SetConfig+0x7aa>
 800a9d8:	2380      	movs	r3, #128	; 0x80
 800a9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a55      	ldr	r2, [pc, #340]	; (800ab38 <UART_SetConfig+0x904>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	f040 80f0 	bne.w	800abca <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9ee:	2b20      	cmp	r3, #32
 800a9f0:	dc46      	bgt.n	800aa80 <UART_SetConfig+0x84c>
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	db75      	blt.n	800aae2 <UART_SetConfig+0x8ae>
 800a9f6:	3b02      	subs	r3, #2
 800a9f8:	2b1e      	cmp	r3, #30
 800a9fa:	d872      	bhi.n	800aae2 <UART_SetConfig+0x8ae>
 800a9fc:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <UART_SetConfig+0x7d0>)
 800a9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa02:	bf00      	nop
 800aa04:	0800aa87 	.word	0x0800aa87
 800aa08:	0800aae3 	.word	0x0800aae3
 800aa0c:	0800aa8f 	.word	0x0800aa8f
 800aa10:	0800aae3 	.word	0x0800aae3
 800aa14:	0800aae3 	.word	0x0800aae3
 800aa18:	0800aae3 	.word	0x0800aae3
 800aa1c:	0800aa9f 	.word	0x0800aa9f
 800aa20:	0800aae3 	.word	0x0800aae3
 800aa24:	0800aae3 	.word	0x0800aae3
 800aa28:	0800aae3 	.word	0x0800aae3
 800aa2c:	0800aae3 	.word	0x0800aae3
 800aa30:	0800aae3 	.word	0x0800aae3
 800aa34:	0800aae3 	.word	0x0800aae3
 800aa38:	0800aae3 	.word	0x0800aae3
 800aa3c:	0800aaaf 	.word	0x0800aaaf
 800aa40:	0800aae3 	.word	0x0800aae3
 800aa44:	0800aae3 	.word	0x0800aae3
 800aa48:	0800aae3 	.word	0x0800aae3
 800aa4c:	0800aae3 	.word	0x0800aae3
 800aa50:	0800aae3 	.word	0x0800aae3
 800aa54:	0800aae3 	.word	0x0800aae3
 800aa58:	0800aae3 	.word	0x0800aae3
 800aa5c:	0800aae3 	.word	0x0800aae3
 800aa60:	0800aae3 	.word	0x0800aae3
 800aa64:	0800aae3 	.word	0x0800aae3
 800aa68:	0800aae3 	.word	0x0800aae3
 800aa6c:	0800aae3 	.word	0x0800aae3
 800aa70:	0800aae3 	.word	0x0800aae3
 800aa74:	0800aae3 	.word	0x0800aae3
 800aa78:	0800aae3 	.word	0x0800aae3
 800aa7c:	0800aad5 	.word	0x0800aad5
 800aa80:	2b40      	cmp	r3, #64	; 0x40
 800aa82:	d02a      	beq.n	800aada <UART_SetConfig+0x8a6>
 800aa84:	e02d      	b.n	800aae2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa86:	f7fc fa9d 	bl	8006fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa8c:	e02f      	b.n	800aaee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa8e:	f107 0314 	add.w	r3, r7, #20
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fc faac 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa9c:	e027      	b.n	800aaee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa9e:	f107 0308 	add.w	r3, r7, #8
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fc fbf8 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaac:	e01f      	b.n	800aaee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaae:	4b21      	ldr	r3, [pc, #132]	; (800ab34 <UART_SetConfig+0x900>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0320 	and.w	r3, r3, #32
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d009      	beq.n	800aace <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aaba:	4b1e      	ldr	r3, [pc, #120]	; (800ab34 <UART_SetConfig+0x900>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	08db      	lsrs	r3, r3, #3
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	4a1d      	ldr	r2, [pc, #116]	; (800ab3c <UART_SetConfig+0x908>)
 800aac6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aacc:	e00f      	b.n	800aaee <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800aace:	4b1b      	ldr	r3, [pc, #108]	; (800ab3c <UART_SetConfig+0x908>)
 800aad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aad2:	e00c      	b.n	800aaee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aad4:	4b1a      	ldr	r3, [pc, #104]	; (800ab40 <UART_SetConfig+0x90c>)
 800aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aad8:	e009      	b.n	800aaee <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aae0:	e005      	b.n	800aaee <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800aae2:	2300      	movs	r3, #0
 800aae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aaec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 81e6 	beq.w	800aec2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafa:	4a12      	ldr	r2, [pc, #72]	; (800ab44 <UART_SetConfig+0x910>)
 800aafc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab00:	461a      	mov	r2, r3
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab08:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	4413      	add	r3, r2
 800ab14:	6a3a      	ldr	r2, [r7, #32]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d305      	bcc.n	800ab26 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab20:	6a3a      	ldr	r2, [r7, #32]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d910      	bls.n	800ab48 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab2c:	e1c9      	b.n	800aec2 <UART_SetConfig+0xc8e>
 800ab2e:	bf00      	nop
 800ab30:	40011c00 	.word	0x40011c00
 800ab34:	58024400 	.word	0x58024400
 800ab38:	58000c00 	.word	0x58000c00
 800ab3c:	03d09000 	.word	0x03d09000
 800ab40:	003d0900 	.word	0x003d0900
 800ab44:	0801396c 	.word	0x0801396c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f04f 0100 	mov.w	r1, #0
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	4ac1      	ldr	r2, [pc, #772]	; (800ae5c <UART_SetConfig+0xc28>)
 800ab56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	f04f 0300 	mov.w	r3, #0
 800ab60:	f7f5 fc2e 	bl	80003c0 <__aeabi_uldivmod>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4610      	mov	r0, r2
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f04f 0200 	mov.w	r2, #0
 800ab70:	f04f 0300 	mov.w	r3, #0
 800ab74:	020b      	lsls	r3, r1, #8
 800ab76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab7a:	0202      	lsls	r2, r0, #8
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	6849      	ldr	r1, [r1, #4]
 800ab80:	0849      	lsrs	r1, r1, #1
 800ab82:	4608      	mov	r0, r1
 800ab84:	f04f 0100 	mov.w	r1, #0
 800ab88:	1814      	adds	r4, r2, r0
 800ab8a:	eb43 0501 	adc.w	r5, r3, r1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	461a      	mov	r2, r3
 800ab94:	f04f 0300 	mov.w	r3, #0
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	f7f5 fc10 	bl	80003c0 <__aeabi_uldivmod>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4613      	mov	r3, r2
 800aba6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abae:	d308      	bcc.n	800abc2 <UART_SetConfig+0x98e>
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abb6:	d204      	bcs.n	800abc2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abbe:	60da      	str	r2, [r3, #12]
 800abc0:	e17f      	b.n	800aec2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800abc8:	e17b      	b.n	800aec2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abd2:	f040 80bd 	bne.w	800ad50 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800abd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abda:	2b20      	cmp	r3, #32
 800abdc:	dc48      	bgt.n	800ac70 <UART_SetConfig+0xa3c>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	db7b      	blt.n	800acda <UART_SetConfig+0xaa6>
 800abe2:	2b20      	cmp	r3, #32
 800abe4:	d879      	bhi.n	800acda <UART_SetConfig+0xaa6>
 800abe6:	a201      	add	r2, pc, #4	; (adr r2, 800abec <UART_SetConfig+0x9b8>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800ac77 	.word	0x0800ac77
 800abf0:	0800ac7f 	.word	0x0800ac7f
 800abf4:	0800acdb 	.word	0x0800acdb
 800abf8:	0800acdb 	.word	0x0800acdb
 800abfc:	0800ac87 	.word	0x0800ac87
 800ac00:	0800acdb 	.word	0x0800acdb
 800ac04:	0800acdb 	.word	0x0800acdb
 800ac08:	0800acdb 	.word	0x0800acdb
 800ac0c:	0800ac97 	.word	0x0800ac97
 800ac10:	0800acdb 	.word	0x0800acdb
 800ac14:	0800acdb 	.word	0x0800acdb
 800ac18:	0800acdb 	.word	0x0800acdb
 800ac1c:	0800acdb 	.word	0x0800acdb
 800ac20:	0800acdb 	.word	0x0800acdb
 800ac24:	0800acdb 	.word	0x0800acdb
 800ac28:	0800acdb 	.word	0x0800acdb
 800ac2c:	0800aca7 	.word	0x0800aca7
 800ac30:	0800acdb 	.word	0x0800acdb
 800ac34:	0800acdb 	.word	0x0800acdb
 800ac38:	0800acdb 	.word	0x0800acdb
 800ac3c:	0800acdb 	.word	0x0800acdb
 800ac40:	0800acdb 	.word	0x0800acdb
 800ac44:	0800acdb 	.word	0x0800acdb
 800ac48:	0800acdb 	.word	0x0800acdb
 800ac4c:	0800acdb 	.word	0x0800acdb
 800ac50:	0800acdb 	.word	0x0800acdb
 800ac54:	0800acdb 	.word	0x0800acdb
 800ac58:	0800acdb 	.word	0x0800acdb
 800ac5c:	0800acdb 	.word	0x0800acdb
 800ac60:	0800acdb 	.word	0x0800acdb
 800ac64:	0800acdb 	.word	0x0800acdb
 800ac68:	0800acdb 	.word	0x0800acdb
 800ac6c:	0800accd 	.word	0x0800accd
 800ac70:	2b40      	cmp	r3, #64	; 0x40
 800ac72:	d02e      	beq.n	800acd2 <UART_SetConfig+0xa9e>
 800ac74:	e031      	b.n	800acda <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac76:	f7fa fe19 	bl	80058ac <HAL_RCC_GetPCLK1Freq>
 800ac7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac7c:	e033      	b.n	800ace6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac7e:	f7fa fe2b 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 800ac82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ac84:	e02f      	b.n	800ace6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac86:	f107 0314 	add.w	r3, r7, #20
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fc f9b0 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac94:	e027      	b.n	800ace6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac96:	f107 0308 	add.w	r3, r7, #8
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fc fafc 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aca4:	e01f      	b.n	800ace6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aca6:	4b6e      	ldr	r3, [pc, #440]	; (800ae60 <UART_SetConfig+0xc2c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 0320 	and.w	r3, r3, #32
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d009      	beq.n	800acc6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acb2:	4b6b      	ldr	r3, [pc, #428]	; (800ae60 <UART_SetConfig+0xc2c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	08db      	lsrs	r3, r3, #3
 800acb8:	f003 0303 	and.w	r3, r3, #3
 800acbc:	4a69      	ldr	r2, [pc, #420]	; (800ae64 <UART_SetConfig+0xc30>)
 800acbe:	fa22 f303 	lsr.w	r3, r2, r3
 800acc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acc4:	e00f      	b.n	800ace6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800acc6:	4b67      	ldr	r3, [pc, #412]	; (800ae64 <UART_SetConfig+0xc30>)
 800acc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acca:	e00c      	b.n	800ace6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800accc:	4b66      	ldr	r3, [pc, #408]	; (800ae68 <UART_SetConfig+0xc34>)
 800acce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acd0:	e009      	b.n	800ace6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acd8:	e005      	b.n	800ace6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800acda:	2300      	movs	r3, #0
 800acdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ace4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ace6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 80ea 	beq.w	800aec2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf2:	4a5a      	ldr	r2, [pc, #360]	; (800ae5c <UART_SetConfig+0xc28>)
 800acf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acf8:	461a      	mov	r2, r3
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad00:	005a      	lsls	r2, r3, #1
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	085b      	lsrs	r3, r3, #1
 800ad08:	441a      	add	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	2b0f      	cmp	r3, #15
 800ad18:	d916      	bls.n	800ad48 <UART_SetConfig+0xb14>
 800ad1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad20:	d212      	bcs.n	800ad48 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	f023 030f 	bic.w	r3, r3, #15
 800ad2a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2e:	085b      	lsrs	r3, r3, #1
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ad44:	60da      	str	r2, [r3, #12]
 800ad46:	e0bc      	b.n	800aec2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad4e:	e0b8      	b.n	800aec2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	dc4b      	bgt.n	800adf0 <UART_SetConfig+0xbbc>
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f2c0 8087 	blt.w	800ae6c <UART_SetConfig+0xc38>
 800ad5e:	2b20      	cmp	r3, #32
 800ad60:	f200 8084 	bhi.w	800ae6c <UART_SetConfig+0xc38>
 800ad64:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <UART_SetConfig+0xb38>)
 800ad66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800adf7 	.word	0x0800adf7
 800ad70:	0800adff 	.word	0x0800adff
 800ad74:	0800ae6d 	.word	0x0800ae6d
 800ad78:	0800ae6d 	.word	0x0800ae6d
 800ad7c:	0800ae07 	.word	0x0800ae07
 800ad80:	0800ae6d 	.word	0x0800ae6d
 800ad84:	0800ae6d 	.word	0x0800ae6d
 800ad88:	0800ae6d 	.word	0x0800ae6d
 800ad8c:	0800ae17 	.word	0x0800ae17
 800ad90:	0800ae6d 	.word	0x0800ae6d
 800ad94:	0800ae6d 	.word	0x0800ae6d
 800ad98:	0800ae6d 	.word	0x0800ae6d
 800ad9c:	0800ae6d 	.word	0x0800ae6d
 800ada0:	0800ae6d 	.word	0x0800ae6d
 800ada4:	0800ae6d 	.word	0x0800ae6d
 800ada8:	0800ae6d 	.word	0x0800ae6d
 800adac:	0800ae27 	.word	0x0800ae27
 800adb0:	0800ae6d 	.word	0x0800ae6d
 800adb4:	0800ae6d 	.word	0x0800ae6d
 800adb8:	0800ae6d 	.word	0x0800ae6d
 800adbc:	0800ae6d 	.word	0x0800ae6d
 800adc0:	0800ae6d 	.word	0x0800ae6d
 800adc4:	0800ae6d 	.word	0x0800ae6d
 800adc8:	0800ae6d 	.word	0x0800ae6d
 800adcc:	0800ae6d 	.word	0x0800ae6d
 800add0:	0800ae6d 	.word	0x0800ae6d
 800add4:	0800ae6d 	.word	0x0800ae6d
 800add8:	0800ae6d 	.word	0x0800ae6d
 800addc:	0800ae6d 	.word	0x0800ae6d
 800ade0:	0800ae6d 	.word	0x0800ae6d
 800ade4:	0800ae6d 	.word	0x0800ae6d
 800ade8:	0800ae6d 	.word	0x0800ae6d
 800adec:	0800ae4d 	.word	0x0800ae4d
 800adf0:	2b40      	cmp	r3, #64	; 0x40
 800adf2:	d02e      	beq.n	800ae52 <UART_SetConfig+0xc1e>
 800adf4:	e03a      	b.n	800ae6c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adf6:	f7fa fd59 	bl	80058ac <HAL_RCC_GetPCLK1Freq>
 800adfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800adfc:	e03c      	b.n	800ae78 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adfe:	f7fa fd6b 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
 800ae02:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae04:	e038      	b.n	800ae78 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae06:	f107 0314 	add.w	r3, r7, #20
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fc f8f0 	bl	8006ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae14:	e030      	b.n	800ae78 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae16:	f107 0308 	add.w	r3, r7, #8
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fc fa3c 	bl	8007298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae24:	e028      	b.n	800ae78 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae26:	4b0e      	ldr	r3, [pc, #56]	; (800ae60 <UART_SetConfig+0xc2c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d009      	beq.n	800ae46 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae32:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <UART_SetConfig+0xc2c>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	08db      	lsrs	r3, r3, #3
 800ae38:	f003 0303 	and.w	r3, r3, #3
 800ae3c:	4a09      	ldr	r2, [pc, #36]	; (800ae64 <UART_SetConfig+0xc30>)
 800ae3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae44:	e018      	b.n	800ae78 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ae46:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <UART_SetConfig+0xc30>)
 800ae48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae4a:	e015      	b.n	800ae78 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae4c:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <UART_SetConfig+0xc34>)
 800ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae50:	e012      	b.n	800ae78 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae58:	e00e      	b.n	800ae78 <UART_SetConfig+0xc44>
 800ae5a:	bf00      	nop
 800ae5c:	0801396c 	.word	0x0801396c
 800ae60:	58024400 	.word	0x58024400
 800ae64:	03d09000 	.word	0x03d09000
 800ae68:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ae76:	bf00      	nop
    }

    if (pclk != 0U)
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d021      	beq.n	800aec2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae82:	4a1a      	ldr	r2, [pc, #104]	; (800aeec <UART_SetConfig+0xcb8>)
 800ae84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	085b      	lsrs	r3, r3, #1
 800ae96:	441a      	add	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea4:	2b0f      	cmp	r3, #15
 800aea6:	d909      	bls.n	800aebc <UART_SetConfig+0xc88>
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeae:	d205      	bcs.n	800aebc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	60da      	str	r2, [r3, #12]
 800aeba:	e002      	b.n	800aec2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aede:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3738      	adds	r7, #56	; 0x38
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bdb0      	pop	{r4, r5, r7, pc}
 800aeea:	bf00      	nop
 800aeec:	0801396c 	.word	0x0801396c

0800aef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00a      	beq.n	800af1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	430a      	orrs	r2, r1
 800af18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1e:	f003 0302 	and.w	r3, r3, #2
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00a      	beq.n	800af3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	430a      	orrs	r2, r1
 800af3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af40:	f003 0304 	and.w	r3, r3, #4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00a      	beq.n	800af5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af62:	f003 0308 	and.w	r3, r3, #8
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00a      	beq.n	800af80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	430a      	orrs	r2, r1
 800af7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af84:	f003 0310 	and.w	r3, r3, #16
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00a      	beq.n	800afa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa6:	f003 0320 	and.w	r3, r3, #32
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	430a      	orrs	r2, r1
 800afc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d01a      	beq.n	800b006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afee:	d10a      	bne.n	800b006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	430a      	orrs	r2, r1
 800b004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	605a      	str	r2, [r3, #4]
  }
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af02      	add	r7, sp, #8
 800b03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b044:	f7f8 fb0c 	bl	8003660 <HAL_GetTick>
 800b048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0308 	and.w	r3, r3, #8
 800b054:	2b08      	cmp	r3, #8
 800b056:	d10e      	bne.n	800b076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f82f 	bl	800b0ca <UART_WaitOnFlagUntilTimeout>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e025      	b.n	800b0c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b04      	cmp	r3, #4
 800b082:	d10e      	bne.n	800b0a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f819 	bl	800b0ca <UART_WaitOnFlagUntilTimeout>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e00f      	b.n	800b0c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2220      	movs	r2, #32
 800b0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b09c      	sub	sp, #112	; 0x70
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	603b      	str	r3, [r7, #0]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0da:	e0a9      	b.n	800b230 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e2:	f000 80a5 	beq.w	800b230 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0e6:	f7f8 fabb 	bl	8003660 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d302      	bcc.n	800b0fc <UART_WaitOnFlagUntilTimeout+0x32>
 800b0f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d140      	bne.n	800b17e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b104:	e853 3f00 	ldrex	r3, [r3]
 800b108:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b10c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b110:	667b      	str	r3, [r7, #100]	; 0x64
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b11a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b11c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b120:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e6      	bne.n	800b0fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3308      	adds	r3, #8
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b140:	f023 0301 	bic.w	r3, r3, #1
 800b144:	663b      	str	r3, [r7, #96]	; 0x60
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3308      	adds	r3, #8
 800b14c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b14e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b150:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b15c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e5      	bne.n	800b12e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2220      	movs	r2, #32
 800b16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e069      	b.n	800b252 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d051      	beq.n	800b230 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	69db      	ldr	r3, [r3, #28]
 800b192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b19a:	d149      	bne.n	800b230 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	e853 3f00 	ldrex	r3, [r3]
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b1c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1cc:	e841 2300 	strex	r3, r2, [r1]
 800b1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e6      	bne.n	800b1a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	e853 3f00 	ldrex	r3, [r3]
 800b1e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	f023 0301 	bic.w	r3, r3, #1
 800b1ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1f8:	623a      	str	r2, [r7, #32]
 800b1fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fc:	69f9      	ldr	r1, [r7, #28]
 800b1fe:	6a3a      	ldr	r2, [r7, #32]
 800b200:	e841 2300 	strex	r3, r2, [r1]
 800b204:	61bb      	str	r3, [r7, #24]
   return(result);
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e5      	bne.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2220      	movs	r2, #32
 800b210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2220      	movs	r2, #32
 800b218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2220      	movs	r2, #32
 800b220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e010      	b.n	800b252 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	69da      	ldr	r2, [r3, #28]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	4013      	ands	r3, r2
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	bf0c      	ite	eq
 800b240:	2301      	moveq	r3, #1
 800b242:	2300      	movne	r3, #0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	461a      	mov	r2, r3
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	f43f af46 	beq.w	800b0dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3770      	adds	r7, #112	; 0x70
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b25a:	b480      	push	{r7}
 800b25c:	b085      	sub	sp, #20
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d101      	bne.n	800b270 <HAL_UARTEx_DisableFifoMode+0x16>
 800b26c:	2302      	movs	r3, #2
 800b26e:	e027      	b.n	800b2c0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2224      	movs	r2, #36	; 0x24
 800b27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f022 0201 	bic.w	r2, r2, #1
 800b296:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b29e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d101      	bne.n	800b2e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e02d      	b.n	800b340 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2224      	movs	r2, #36	; 0x24
 800b2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f022 0201 	bic.w	r2, r2, #1
 800b30a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	430a      	orrs	r2, r1
 800b31e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f84f 	bl	800b3c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2220      	movs	r2, #32
 800b332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d101      	bne.n	800b360 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b35c:	2302      	movs	r3, #2
 800b35e:	e02d      	b.n	800b3bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2224      	movs	r2, #36	; 0x24
 800b36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f022 0201 	bic.w	r2, r2, #1
 800b386:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	430a      	orrs	r2, r1
 800b39a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f811 	bl	800b3c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d108      	bne.n	800b3e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3e4:	e031      	b.n	800b44a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3e6:	2310      	movs	r3, #16
 800b3e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3ea:	2310      	movs	r3, #16
 800b3ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	0e5b      	lsrs	r3, r3, #25
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	f003 0307 	and.w	r3, r3, #7
 800b3fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	0f5b      	lsrs	r3, r3, #29
 800b406:	b2db      	uxtb	r3, r3
 800b408:	f003 0307 	and.w	r3, r3, #7
 800b40c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	7b3a      	ldrb	r2, [r7, #12]
 800b412:	4911      	ldr	r1, [pc, #68]	; (800b458 <UARTEx_SetNbDataToProcess+0x94>)
 800b414:	5c8a      	ldrb	r2, [r1, r2]
 800b416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b41a:	7b3a      	ldrb	r2, [r7, #12]
 800b41c:	490f      	ldr	r1, [pc, #60]	; (800b45c <UARTEx_SetNbDataToProcess+0x98>)
 800b41e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b420:	fb93 f3f2 	sdiv	r3, r3, r2
 800b424:	b29a      	uxth	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	7b7a      	ldrb	r2, [r7, #13]
 800b430:	4909      	ldr	r1, [pc, #36]	; (800b458 <UARTEx_SetNbDataToProcess+0x94>)
 800b432:	5c8a      	ldrb	r2, [r1, r2]
 800b434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b438:	7b7a      	ldrb	r2, [r7, #13]
 800b43a:	4908      	ldr	r1, [pc, #32]	; (800b45c <UARTEx_SetNbDataToProcess+0x98>)
 800b43c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b43e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b442:	b29a      	uxth	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b44a:	bf00      	nop
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	08013984 	.word	0x08013984
 800b45c:	0801398c 	.word	0x0801398c

0800b460 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b460:	b084      	sub	sp, #16
 800b462:	b480      	push	{r7}
 800b464:	b085      	sub	sp, #20
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	f107 001c 	add.w	r0, r7, #28
 800b46e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b476:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b478:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b47a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b47e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b480:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b482:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b486:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <SDMMC_Init+0x50>)
 800b494:	4013      	ands	r3, r2
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	431a      	orrs	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	b004      	add	sp, #16
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	ffc02c00 	.word	0xffc02c00

0800b4b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f043 0203 	orr.w	r2, r3, #3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0303 	and.w	r3, r3, #3
}
 800b522:	4618      	mov	r0, r3
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
	...

0800b530 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b54e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b554:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b55a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	4313      	orrs	r3, r2
 800b560:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	68da      	ldr	r2, [r3, #12]
 800b566:	4b06      	ldr	r3, [pc, #24]	; (800b580 <SDMMC_SendCommand+0x50>)
 800b568:	4013      	ands	r3, r2
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	431a      	orrs	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	fffee0c0 	.word	0xfffee0c0

0800b584 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	b2db      	uxtb	r3, r3
}
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b085      	sub	sp, #20
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3314      	adds	r3, #20
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b5ea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b5f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b5f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b602:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	431a      	orrs	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0

}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b62a:	2310      	movs	r3, #16
 800b62c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b62e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b634:	2300      	movs	r3, #0
 800b636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b63c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b63e:	f107 0308 	add.w	r3, r7, #8
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ff73 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b64e:	2110      	movs	r1, #16
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fa5f 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b658:	69fb      	ldr	r3, [r7, #28]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3720      	adds	r7, #32
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b088      	sub	sp, #32
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b670:	2311      	movs	r3, #17
 800b672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b674:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	4619      	mov	r1, r3
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff ff50 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b690:	f241 3288 	movw	r2, #5000	; 0x1388
 800b694:	2111      	movs	r1, #17
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fa3c 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b69c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b69e:	69fb      	ldr	r3, [r7, #28]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3720      	adds	r7, #32
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b6b6:	2312      	movs	r3, #18
 800b6b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ca:	f107 0308 	add.w	r3, r7, #8
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff ff2d 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b6d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6da:	2112      	movs	r1, #18
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fa19 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b6e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b088      	sub	sp, #32
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b6fc:	2318      	movs	r3, #24
 800b6fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b700:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b706:	2300      	movs	r3, #0
 800b708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b70a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b70e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b710:	f107 0308 	add.w	r3, r7, #8
 800b714:	4619      	mov	r1, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff ff0a 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b71c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b720:	2118      	movs	r1, #24
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f9f6 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b72a:	69fb      	ldr	r3, [r7, #28]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b088      	sub	sp, #32
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b742:	2319      	movs	r3, #25
 800b744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b74a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b74c:	2300      	movs	r3, #0
 800b74e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b754:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b756:	f107 0308 	add.w	r3, r7, #8
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff fee7 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b762:	f241 3288 	movw	r2, #5000	; 0x1388
 800b766:	2119      	movs	r1, #25
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f9d3 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b76e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b770:	69fb      	ldr	r3, [r7, #28]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3720      	adds	r7, #32
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
	...

0800b77c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b784:	2300      	movs	r3, #0
 800b786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b788:	230c      	movs	r3, #12
 800b78a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b78c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b79a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7b4:	f107 0308 	add.w	r3, r7, #8
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff feb8 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b7c0:	4a0b      	ldr	r2, [pc, #44]	; (800b7f0 <SDMMC_CmdStopTransfer+0x74>)
 800b7c2:	210c      	movs	r1, #12
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f9a5 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b7ca:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7de:	d101      	bne.n	800b7e4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b7e4:	69fb      	ldr	r3, [r7, #28]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3720      	adds	r7, #32
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	05f5e100 	.word	0x05f5e100

0800b7f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b802:	2307      	movs	r3, #7
 800b804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b80a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b816:	f107 0308 	add.w	r3, r7, #8
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff fe87 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b822:	f241 3288 	movw	r2, #5000	; 0x1388
 800b826:	2107      	movs	r1, #7
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f973 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b82e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b830:	69fb      	ldr	r3, [r7, #28]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3720      	adds	r7, #32
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b088      	sub	sp, #32
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b84a:	2300      	movs	r3, #0
 800b84c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b84e:	2300      	movs	r3, #0
 800b850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b856:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b858:	f107 0308 	add.w	r3, r7, #8
 800b85c:	4619      	mov	r1, r3
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7ff fe66 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fb97 	bl	800bf98 <SDMMC_GetCmdError>
 800b86a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b86c:	69fb      	ldr	r3, [r7, #28]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3720      	adds	r7, #32
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b088      	sub	sp, #32
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b87e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b884:	2308      	movs	r3, #8
 800b886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b88c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b88e:	2300      	movs	r3, #0
 800b890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b896:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b898:	f107 0308 	add.w	r3, r7, #8
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7ff fe46 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 fb29 	bl	800befc <SDMMC_GetCmdResp7>
 800b8aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3720      	adds	r7, #32
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b088      	sub	sp, #32
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b8c4:	2337      	movs	r3, #55	; 0x37
 800b8c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8d8:	f107 0308 	add.w	r3, r7, #8
 800b8dc:	4619      	mov	r1, r3
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff fe26 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e8:	2137      	movs	r1, #55	; 0x37
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f912 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b8f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8f2:	69fb      	ldr	r3, [r7, #28]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b90a:	2329      	movs	r3, #41	; 0x29
 800b90c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b90e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b914:	2300      	movs	r3, #0
 800b916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b91c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b91e:	f107 0308 	add.w	r3, r7, #8
 800b922:	4619      	mov	r1, r3
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7ff fe03 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fa2e 	bl	800bd8c <SDMMC_GetCmdResp3>
 800b930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b932:	69fb      	ldr	r3, [r7, #28]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3720      	adds	r7, #32
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b088      	sub	sp, #32
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b94a:	2306      	movs	r3, #6
 800b94c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b94e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b954:	2300      	movs	r3, #0
 800b956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b95c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b95e:	f107 0308 	add.w	r3, r7, #8
 800b962:	4619      	mov	r1, r3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff fde3 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b96a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b96e:	2106      	movs	r1, #6
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f8cf 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b978:	69fb      	ldr	r3, [r7, #28]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b088      	sub	sp, #32
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b98a:	2300      	movs	r3, #0
 800b98c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b98e:	2333      	movs	r3, #51	; 0x33
 800b990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b992:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b998:	2300      	movs	r3, #0
 800b99a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b99c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9a2:	f107 0308 	add.w	r3, r7, #8
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff fdc1 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b9ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9b2:	2133      	movs	r1, #51	; 0x33
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 f8ad 	bl	800bb14 <SDMMC_GetCmdResp1>
 800b9ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9bc:	69fb      	ldr	r3, [r7, #28]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3720      	adds	r7, #32
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b088      	sub	sp, #32
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b9d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b9da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9e6:	f107 0308 	add.w	r3, r7, #8
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff fd9f 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f980 	bl	800bcf8 <SDMMC_GetCmdResp2>
 800b9f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9fa:	69fb      	ldr	r3, [r7, #28]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ba12:	2309      	movs	r3, #9
 800ba14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ba16:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ba1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba26:	f107 0308 	add.w	r3, r7, #8
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff fd7f 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f960 	bl	800bcf8 <SDMMC_GetCmdResp2>
 800ba38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba3a:	69fb      	ldr	r3, [r7, #28]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3720      	adds	r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ba52:	2303      	movs	r3, #3
 800ba54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba66:	f107 0308 	add.w	r3, r7, #8
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff fd5f 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	2103      	movs	r1, #3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f9c8 	bl	800be0c <SDMMC_GetCmdResp6>
 800ba7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba7e:	69fb      	ldr	r3, [r7, #28]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3720      	adds	r7, #32
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b088      	sub	sp, #32
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba96:	230d      	movs	r3, #13
 800ba98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baa0:	2300      	movs	r3, #0
 800baa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baaa:	f107 0308 	add.w	r3, r7, #8
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff fd3d 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bab6:	f241 3288 	movw	r2, #5000	; 0x1388
 800baba:	210d      	movs	r1, #13
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f829 	bl	800bb14 <SDMMC_GetCmdResp1>
 800bac2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bac4:	69fb      	ldr	r3, [r7, #28]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3720      	adds	r7, #32
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b088      	sub	sp, #32
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bada:	230d      	movs	r3, #13
 800badc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bade:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baee:	f107 0308 	add.w	r3, r7, #8
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff fd1b 	bl	800b530 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bafa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafe:	210d      	movs	r1, #13
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f807 	bl	800bb14 <SDMMC_GetCmdResp1>
 800bb06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb08:	69fb      	ldr	r3, [r7, #28]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3720      	adds	r7, #32
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
	...

0800bb14 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b088      	sub	sp, #32
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb22:	4b70      	ldr	r3, [pc, #448]	; (800bce4 <SDMMC_GetCmdResp1+0x1d0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a70      	ldr	r2, [pc, #448]	; (800bce8 <SDMMC_GetCmdResp1+0x1d4>)
 800bb28:	fba2 2303 	umull	r2, r3, r2, r3
 800bb2c:	0a5a      	lsrs	r2, r3, #9
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	fb02 f303 	mul.w	r3, r2, r3
 800bb34:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	1e5a      	subs	r2, r3, #1
 800bb3a:	61fa      	str	r2, [r7, #28]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d102      	bne.n	800bb46 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb44:	e0c9      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bb4c:	69ba      	ldr	r2, [r7, #24]
 800bb4e:	4b67      	ldr	r3, [pc, #412]	; (800bcec <SDMMC_GetCmdResp1+0x1d8>)
 800bb50:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0ef      	beq.n	800bb36 <SDMMC_GetCmdResp1+0x22>
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1ea      	bne.n	800bb36 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb64:	f003 0304 	and.w	r3, r3, #4
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2204      	movs	r2, #4
 800bb70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb72:	2304      	movs	r3, #4
 800bb74:	e0b1      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d004      	beq.n	800bb8c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2201      	movs	r2, #1
 800bb86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e0a6      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4a58      	ldr	r2, [pc, #352]	; (800bcf0 <SDMMC_GetCmdResp1+0x1dc>)
 800bb90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f7ff fcf6 	bl	800b584 <SDMMC_GetCommandResponse>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	7afb      	ldrb	r3, [r7, #11]
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d001      	beq.n	800bba6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bba2:	2301      	movs	r3, #1
 800bba4:	e099      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bba6:	2100      	movs	r1, #0
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7ff fcf8 	bl	800b59e <SDMMC_GetResponse>
 800bbae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	4b50      	ldr	r3, [pc, #320]	; (800bcf4 <SDMMC_GetCmdResp1+0x1e0>)
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e08d      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	da02      	bge.n	800bbca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bbc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbc8:	e087      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bbd4:	2340      	movs	r3, #64	; 0x40
 800bbd6:	e080      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bbe2:	2380      	movs	r3, #128	; 0x80
 800bbe4:	e079      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bbf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbf4:	e071      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bc00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc04:	e069      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bc10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc14:	e061      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bc20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc24:	e059      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc34:	e051      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc44:	e049      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bc50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc54:	e041      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bc60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc64:	e039      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bc70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bc74:	e031      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d002      	beq.n	800bc86 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc84:	e029      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc94:	e021      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bca0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bca4:	e019      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bcb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bcb4:	e011      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bcc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bcc4:	e009      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f003 0308 	and.w	r3, r3, #8
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bcd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bcd4:	e001      	b.n	800bcda <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3720      	adds	r7, #32
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	2400802c 	.word	0x2400802c
 800bce8:	10624dd3 	.word	0x10624dd3
 800bcec:	00200045 	.word	0x00200045
 800bcf0:	002000c5 	.word	0x002000c5
 800bcf4:	fdffe008 	.word	0xfdffe008

0800bcf8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd00:	4b1f      	ldr	r3, [pc, #124]	; (800bd80 <SDMMC_GetCmdResp2+0x88>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a1f      	ldr	r2, [pc, #124]	; (800bd84 <SDMMC_GetCmdResp2+0x8c>)
 800bd06:	fba2 2303 	umull	r2, r3, r2, r3
 800bd0a:	0a5b      	lsrs	r3, r3, #9
 800bd0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd10:	fb02 f303 	mul.w	r3, r2, r3
 800bd14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	1e5a      	subs	r2, r3, #1
 800bd1a:	60fa      	str	r2, [r7, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd24:	e026      	b.n	800bd74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0ef      	beq.n	800bd16 <SDMMC_GetCmdResp2+0x1e>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1ea      	bne.n	800bd16 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d004      	beq.n	800bd56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2204      	movs	r2, #4
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd52:	2304      	movs	r3, #4
 800bd54:	e00e      	b.n	800bd74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5a:	f003 0301 	and.w	r3, r3, #1
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d004      	beq.n	800bd6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e003      	b.n	800bd74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a06      	ldr	r2, [pc, #24]	; (800bd88 <SDMMC_GetCmdResp2+0x90>)
 800bd70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	2400802c 	.word	0x2400802c
 800bd84:	10624dd3 	.word	0x10624dd3
 800bd88:	002000c5 	.word	0x002000c5

0800bd8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd94:	4b1a      	ldr	r3, [pc, #104]	; (800be00 <SDMMC_GetCmdResp3+0x74>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a1a      	ldr	r2, [pc, #104]	; (800be04 <SDMMC_GetCmdResp3+0x78>)
 800bd9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd9e:	0a5b      	lsrs	r3, r3, #9
 800bda0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bda4:	fb02 f303 	mul.w	r3, r2, r3
 800bda8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	1e5a      	subs	r2, r3, #1
 800bdae:	60fa      	str	r2, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdb8:	e01b      	b.n	800bdf2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0ef      	beq.n	800bdaa <SDMMC_GetCmdResp3+0x1e>
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1ea      	bne.n	800bdaa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d004      	beq.n	800bdea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2204      	movs	r2, #4
 800bde4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bde6:	2304      	movs	r3, #4
 800bde8:	e003      	b.n	800bdf2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a06      	ldr	r2, [pc, #24]	; (800be08 <SDMMC_GetCmdResp3+0x7c>)
 800bdee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	2400802c 	.word	0x2400802c
 800be04:	10624dd3 	.word	0x10624dd3
 800be08:	002000c5 	.word	0x002000c5

0800be0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b088      	sub	sp, #32
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	460b      	mov	r3, r1
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be1a:	4b35      	ldr	r3, [pc, #212]	; (800bef0 <SDMMC_GetCmdResp6+0xe4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a35      	ldr	r2, [pc, #212]	; (800bef4 <SDMMC_GetCmdResp6+0xe8>)
 800be20:	fba2 2303 	umull	r2, r3, r2, r3
 800be24:	0a5b      	lsrs	r3, r3, #9
 800be26:	f241 3288 	movw	r2, #5000	; 0x1388
 800be2a:	fb02 f303 	mul.w	r3, r2, r3
 800be2e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	1e5a      	subs	r2, r3, #1
 800be34:	61fa      	str	r2, [r7, #28]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d102      	bne.n	800be40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be3e:	e052      	b.n	800bee6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be44:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d0ef      	beq.n	800be30 <SDMMC_GetCmdResp6+0x24>
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1ea      	bne.n	800be30 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be5e:	f003 0304 	and.w	r3, r3, #4
 800be62:	2b00      	cmp	r3, #0
 800be64:	d004      	beq.n	800be70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2204      	movs	r2, #4
 800be6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be6c:	2304      	movs	r3, #4
 800be6e:	e03a      	b.n	800bee6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d004      	beq.n	800be86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2201      	movs	r2, #1
 800be80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be82:	2301      	movs	r3, #1
 800be84:	e02f      	b.n	800bee6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f7ff fb7c 	bl	800b584 <SDMMC_GetCommandResponse>
 800be8c:	4603      	mov	r3, r0
 800be8e:	461a      	mov	r2, r3
 800be90:	7afb      	ldrb	r3, [r7, #11]
 800be92:	4293      	cmp	r3, r2
 800be94:	d001      	beq.n	800be9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be96:	2301      	movs	r3, #1
 800be98:	e025      	b.n	800bee6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	4a16      	ldr	r2, [pc, #88]	; (800bef8 <SDMMC_GetCmdResp6+0xec>)
 800be9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bea0:	2100      	movs	r1, #0
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7ff fb7b 	bl	800b59e <SDMMC_GetResponse>
 800bea8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d106      	bne.n	800bec2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	0c1b      	lsrs	r3, r3, #16
 800beb8:	b29a      	uxth	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e011      	b.n	800bee6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800becc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bed0:	e009      	b.n	800bee6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bedc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bee0:	e001      	b.n	800bee6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3720      	adds	r7, #32
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	2400802c 	.word	0x2400802c
 800bef4:	10624dd3 	.word	0x10624dd3
 800bef8:	002000c5 	.word	0x002000c5

0800befc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf04:	4b22      	ldr	r3, [pc, #136]	; (800bf90 <SDMMC_GetCmdResp7+0x94>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a22      	ldr	r2, [pc, #136]	; (800bf94 <SDMMC_GetCmdResp7+0x98>)
 800bf0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0e:	0a5b      	lsrs	r3, r3, #9
 800bf10:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf14:	fb02 f303 	mul.w	r3, r2, r3
 800bf18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	1e5a      	subs	r2, r3, #1
 800bf1e:	60fa      	str	r2, [r7, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d102      	bne.n	800bf2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf28:	e02c      	b.n	800bf84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d0ef      	beq.n	800bf1a <SDMMC_GetCmdResp7+0x1e>
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1ea      	bne.n	800bf1a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf48:	f003 0304 	and.w	r3, r3, #4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d004      	beq.n	800bf5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2204      	movs	r2, #4
 800bf54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf56:	2304      	movs	r3, #4
 800bf58:	e014      	b.n	800bf84 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d004      	beq.n	800bf70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e009      	b.n	800bf84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d002      	beq.n	800bf82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2240      	movs	r2, #64	; 0x40
 800bf80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf82:	2300      	movs	r3, #0

}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	2400802c 	.word	0x2400802c
 800bf94:	10624dd3 	.word	0x10624dd3

0800bf98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bfa0:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <SDMMC_GetCmdError+0x50>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a11      	ldr	r2, [pc, #68]	; (800bfec <SDMMC_GetCmdError+0x54>)
 800bfa6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfaa:	0a5b      	lsrs	r3, r3, #9
 800bfac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb0:	fb02 f303 	mul.w	r3, r2, r3
 800bfb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	1e5a      	subs	r2, r3, #1
 800bfba:	60fa      	str	r2, [r7, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfc4:	e009      	b.n	800bfda <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0f1      	beq.n	800bfb6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a06      	ldr	r2, [pc, #24]	; (800bff0 <SDMMC_GetCmdError+0x58>)
 800bfd6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	2400802c 	.word	0x2400802c
 800bfec:	10624dd3 	.word	0x10624dd3
 800bff0:	002000c5 	.word	0x002000c5

0800bff4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bff8:	4904      	ldr	r1, [pc, #16]	; (800c00c <MX_FATFS_Init+0x18>)
 800bffa:	4805      	ldr	r0, [pc, #20]	; (800c010 <MX_FATFS_Init+0x1c>)
 800bffc:	f003 f8ea 	bl	800f1d4 <FATFS_LinkDriver>
 800c000:	4603      	mov	r3, r0
 800c002:	461a      	mov	r2, r3
 800c004:	4b03      	ldr	r3, [pc, #12]	; (800c014 <MX_FATFS_Init+0x20>)
 800c006:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c008:	bf00      	nop
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	24027698 	.word	0x24027698
 800c010:	08013994 	.word	0x08013994
 800c014:	24027694 	.word	0x24027694

0800c018 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c018:	b480      	push	{r7}
 800c01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c01c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c01e:	4618      	mov	r0, r3
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c032:	f000 f885 	bl	800c140 <BSP_SD_IsDetected>
 800c036:	4603      	mov	r3, r0
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d001      	beq.n	800c040 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c03c:	2302      	movs	r3, #2
 800c03e:	e012      	b.n	800c066 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c040:	480b      	ldr	r0, [pc, #44]	; (800c070 <BSP_SD_Init+0x48>)
 800c042:	f7fb fd33 	bl	8007aac <HAL_SD_Init>
 800c046:	4603      	mov	r3, r0
 800c048:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c04a:	79fb      	ldrb	r3, [r7, #7]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d109      	bne.n	800c064 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c050:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c054:	4806      	ldr	r0, [pc, #24]	; (800c070 <BSP_SD_Init+0x48>)
 800c056:	f7fc fbe1 	bl	800881c <HAL_SD_ConfigWideBusOperation>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c064:	79fb      	ldrb	r3, [r7, #7]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	240271e4 	.word	0x240271e4

0800c074 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	68f9      	ldr	r1, [r7, #12]
 800c08a:	4806      	ldr	r0, [pc, #24]	; (800c0a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c08c:	f7fb fe28 	bl	8007ce0 <HAL_SD_ReadBlocks_DMA>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c09a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	240271e4 	.word	0x240271e4

0800c0a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	68f9      	ldr	r1, [r7, #12]
 800c0be:	4806      	ldr	r0, [pc, #24]	; (800c0d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c0c0:	f7fb feb6 	bl	8007e30 <HAL_SD_WriteBlocks_DMA>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3718      	adds	r7, #24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	240271e4 	.word	0x240271e4

0800c0dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c0e0:	4805      	ldr	r0, [pc, #20]	; (800c0f8 <BSP_SD_GetCardState+0x1c>)
 800c0e2:	f7fc fcad 	bl	8008a40 <HAL_SD_GetCardState>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b04      	cmp	r3, #4
 800c0ea:	bf14      	ite	ne
 800c0ec:	2301      	movne	r3, #1
 800c0ee:	2300      	moveq	r3, #0
 800c0f0:	b2db      	uxtb	r3, r3
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	240271e4 	.word	0x240271e4

0800c0fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	4803      	ldr	r0, [pc, #12]	; (800c114 <BSP_SD_GetCardInfo+0x18>)
 800c108:	f7fc fb5c 	bl	80087c4 <HAL_SD_GetCardInfo>
}
 800c10c:	bf00      	nop
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	240271e4 	.word	0x240271e4

0800c118 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c120:	f000 f9ac 	bl	800c47c <BSP_SD_WriteCpltCallback>
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c134:	f000 f9b4 	bl	800c4a0 <BSP_SD_ReadCpltCallback>
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c146:	2301      	movs	r3, #1
 800c148:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c14a:	f000 f80b 	bl	800c164 <BSP_PlatformIsDetected>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d101      	bne.n	800c158 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c154:	2300      	movs	r3, #0
 800c156:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	b2db      	uxtb	r3, r3
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c16a:	2301      	movs	r3, #1
 800c16c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c16e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c172:	4806      	ldr	r0, [pc, #24]	; (800c18c <BSP_PlatformIsDetected+0x28>)
 800c174:	f7f8 f956 	bl	8004424 <HAL_GPIO_ReadPin>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c17e:	2300      	movs	r3, #0
 800c180:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c182:	79fb      	ldrb	r3, [r7, #7]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	58020800 	.word	0x58020800

0800c190 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800c198:	f003 f922 	bl	800f3e0 <osKernelGetTickCount>
 800c19c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800c19e:	e006      	b.n	800c1ae <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c1a0:	f7ff ff9c 	bl	800c0dc <BSP_SD_GetCardState>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e009      	b.n	800c1c2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800c1ae:	f003 f917 	bl	800f3e0 <osKernelGetTickCount>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d8f0      	bhi.n	800c1a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c1be:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c1d6:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <SD_CheckStatus+0x38>)
 800c1d8:	2201      	movs	r2, #1
 800c1da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c1dc:	f7ff ff7e 	bl	800c0dc <BSP_SD_GetCardState>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d107      	bne.n	800c1f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c1e6:	4b07      	ldr	r3, [pc, #28]	; (800c204 <SD_CheckStatus+0x38>)
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	f023 0301 	bic.w	r3, r3, #1
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	4b04      	ldr	r3, [pc, #16]	; (800c204 <SD_CheckStatus+0x38>)
 800c1f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c1f6:	4b03      	ldr	r3, [pc, #12]	; (800c204 <SD_CheckStatus+0x38>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	b2db      	uxtb	r3, r3
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	24008039 	.word	0x24008039

0800c208 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c212:	4b1c      	ldr	r3, [pc, #112]	; (800c284 <SD_initialize+0x7c>)
 800c214:	2201      	movs	r2, #1
 800c216:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800c218:	f003 f89a 	bl	800f350 <osKernelGetState>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d129      	bne.n	800c276 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c222:	f7ff ff01 	bl	800c028 <BSP_SD_Init>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d107      	bne.n	800c23c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c22c:	79fb      	ldrb	r3, [r7, #7]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff ffcc 	bl	800c1cc <SD_CheckStatus>
 800c234:	4603      	mov	r3, r0
 800c236:	461a      	mov	r2, r3
 800c238:	4b12      	ldr	r3, [pc, #72]	; (800c284 <SD_initialize+0x7c>)
 800c23a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c23c:	4b11      	ldr	r3, [pc, #68]	; (800c284 <SD_initialize+0x7c>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b01      	cmp	r3, #1
 800c244:	d017      	beq.n	800c276 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800c246:	4b10      	ldr	r3, [pc, #64]	; (800c288 <SD_initialize+0x80>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d107      	bne.n	800c25e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800c24e:	2200      	movs	r2, #0
 800c250:	2102      	movs	r1, #2
 800c252:	200a      	movs	r0, #10
 800c254:	f003 faca 	bl	800f7ec <osMessageQueueNew>
 800c258:	4603      	mov	r3, r0
 800c25a:	4a0b      	ldr	r2, [pc, #44]	; (800c288 <SD_initialize+0x80>)
 800c25c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800c25e:	4b0a      	ldr	r3, [pc, #40]	; (800c288 <SD_initialize+0x80>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d107      	bne.n	800c276 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800c266:	4b07      	ldr	r3, [pc, #28]	; (800c284 <SD_initialize+0x7c>)
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	f043 0301 	orr.w	r3, r3, #1
 800c270:	b2da      	uxtb	r2, r3
 800c272:	4b04      	ldr	r3, [pc, #16]	; (800c284 <SD_initialize+0x7c>)
 800c274:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c276:	4b03      	ldr	r3, [pc, #12]	; (800c284 <SD_initialize+0x7c>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	b2db      	uxtb	r3, r3
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	24008039 	.word	0x24008039
 800c288:	240081d0 	.word	0x240081d0

0800c28c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c296:	79fb      	ldrb	r3, [r7, #7]
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff ff97 	bl	800c1cc <SD_CheckStatus>
 800c29e:	4603      	mov	r3, r0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	60b9      	str	r1, [r7, #8]
 800c2b0:	607a      	str	r2, [r7, #4]
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c2bc:	f247 5030 	movw	r0, #30000	; 0x7530
 800c2c0:	f7ff ff66 	bl	800c190 <SD_CheckStatusWithTimeout>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	da01      	bge.n	800c2ce <SD_read+0x26>
  {
    return res;
 800c2ca:	7ffb      	ldrb	r3, [r7, #31]
 800c2cc:	e02f      	b.n	800c32e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	68b8      	ldr	r0, [r7, #8]
 800c2d4:	f7ff fece 	bl	800c074 <BSP_SD_ReadBlocks_DMA>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800c2dc:	7fbb      	ldrb	r3, [r7, #30]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d124      	bne.n	800c32c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c2e2:	4b15      	ldr	r3, [pc, #84]	; (800c338 <SD_read+0x90>)
 800c2e4:	6818      	ldr	r0, [r3, #0]
 800c2e6:	f107 0112 	add.w	r1, r7, #18
 800c2ea:	f247 5330 	movw	r3, #30000	; 0x7530
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f003 fb50 	bl	800f994 <osMessageQueueGet>
 800c2f4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d117      	bne.n	800c32c <SD_read+0x84>
 800c2fc:	8a7b      	ldrh	r3, [r7, #18]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d114      	bne.n	800c32c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800c302:	f003 f86d 	bl	800f3e0 <osKernelGetTickCount>
 800c306:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c308:	e007      	b.n	800c31a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c30a:	f7ff fee7 	bl	800c0dc <BSP_SD_GetCardState>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d102      	bne.n	800c31a <SD_read+0x72>
              {
                res = RES_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c318:	e008      	b.n	800c32c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c31a:	f003 f861 	bl	800f3e0 <osKernelGetTickCount>
 800c31e:	4602      	mov	r2, r0
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	f247 522f 	movw	r2, #29999	; 0x752f
 800c328:	4293      	cmp	r3, r2
 800c32a:	d9ee      	bls.n	800c30a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c32c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3720      	adds	r7, #32
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	240081d0 	.word	0x240081d0

0800c33c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af00      	add	r7, sp, #0
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	607a      	str	r2, [r7, #4]
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c350:	f247 5030 	movw	r0, #30000	; 0x7530
 800c354:	f7ff ff1c 	bl	800c190 <SD_CheckStatusWithTimeout>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	da01      	bge.n	800c362 <SD_write+0x26>
  {
    return res;
 800c35e:	7ffb      	ldrb	r3, [r7, #31]
 800c360:	e02d      	b.n	800c3be <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c362:	683a      	ldr	r2, [r7, #0]
 800c364:	6879      	ldr	r1, [r7, #4]
 800c366:	68b8      	ldr	r0, [r7, #8]
 800c368:	f7ff fe9e 	bl	800c0a8 <BSP_SD_WriteBlocks_DMA>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d124      	bne.n	800c3bc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <SD_write+0x8c>)
 800c374:	6818      	ldr	r0, [r3, #0]
 800c376:	f107 0112 	add.w	r1, r7, #18
 800c37a:	f247 5330 	movw	r3, #30000	; 0x7530
 800c37e:	2200      	movs	r2, #0
 800c380:	f003 fb08 	bl	800f994 <osMessageQueueGet>
 800c384:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d117      	bne.n	800c3bc <SD_write+0x80>
 800c38c:	8a7b      	ldrh	r3, [r7, #18]
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d114      	bne.n	800c3bc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800c392:	f003 f825 	bl	800f3e0 <osKernelGetTickCount>
 800c396:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c398:	e007      	b.n	800c3aa <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c39a:	f7ff fe9f 	bl	800c0dc <BSP_SD_GetCardState>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d102      	bne.n	800c3aa <SD_write+0x6e>
          {
            res = RES_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	77fb      	strb	r3, [r7, #31]
            break;
 800c3a8:	e008      	b.n	800c3bc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c3aa:	f003 f819 	bl	800f3e0 <osKernelGetTickCount>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	f247 522f 	movw	r2, #29999	; 0x752f
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d9ee      	bls.n	800c39a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800c3bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3720      	adds	r7, #32
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	240081d0 	.word	0x240081d0

0800c3cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08c      	sub	sp, #48	; 0x30
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	603a      	str	r2, [r7, #0]
 800c3d6:	71fb      	strb	r3, [r7, #7]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c3e2:	4b25      	ldr	r3, [pc, #148]	; (800c478 <SD_ioctl+0xac>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <SD_ioctl+0x28>
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e03c      	b.n	800c46e <SD_ioctl+0xa2>

  switch (cmd)
 800c3f4:	79bb      	ldrb	r3, [r7, #6]
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d834      	bhi.n	800c464 <SD_ioctl+0x98>
 800c3fa:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <SD_ioctl+0x34>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c411 	.word	0x0800c411
 800c404:	0800c419 	.word	0x0800c419
 800c408:	0800c431 	.word	0x0800c431
 800c40c:	0800c44b 	.word	0x0800c44b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c416:	e028      	b.n	800c46a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c418:	f107 0308 	add.w	r3, r7, #8
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff fe6d 	bl	800c0fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c422:	6a3a      	ldr	r2, [r7, #32]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c42e:	e01c      	b.n	800c46a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c430:	f107 0308 	add.w	r3, r7, #8
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff fe61 	bl	800c0fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c448:	e00f      	b.n	800c46a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c44a:	f107 0308 	add.w	r3, r7, #8
 800c44e:	4618      	mov	r0, r3
 800c450:	f7ff fe54 	bl	800c0fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	0a5a      	lsrs	r2, r3, #9
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c462:	e002      	b.n	800c46a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c464:	2304      	movs	r3, #4
 800c466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c46a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3730      	adds	r7, #48	; 0x30
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	24008039 	.word	0x24008039

0800c47c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800c482:	2302      	movs	r3, #2
 800c484:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c486:	4b05      	ldr	r3, [pc, #20]	; (800c49c <BSP_SD_WriteCpltCallback+0x20>)
 800c488:	6818      	ldr	r0, [r3, #0]
 800c48a:	1db9      	adds	r1, r7, #6
 800c48c:	2300      	movs	r3, #0
 800c48e:	2200      	movs	r2, #0
 800c490:	f003 fa20 	bl	800f8d4 <osMessageQueuePut>
#endif
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	240081d0 	.word	0x240081d0

0800c4a0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c4aa:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <BSP_SD_ReadCpltCallback+0x20>)
 800c4ac:	6818      	ldr	r0, [r3, #0]
 800c4ae:	1db9      	adds	r1, r7, #6
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f003 fa0e 	bl	800f8d4 <osMessageQueuePut>
#endif
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	240081d0 	.word	0x240081d0

0800c4c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	4a08      	ldr	r2, [pc, #32]	; (800c4f4 <disk_status+0x30>)
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	79fa      	ldrb	r2, [r7, #7]
 800c4dc:	4905      	ldr	r1, [pc, #20]	; (800c4f4 <disk_status+0x30>)
 800c4de:	440a      	add	r2, r1
 800c4e0:	7a12      	ldrb	r2, [r2, #8]
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	4798      	blx	r3
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	240081fc 	.word	0x240081fc

0800c4f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	4a0d      	ldr	r2, [pc, #52]	; (800c540 <disk_initialize+0x48>)
 800c50a:	5cd3      	ldrb	r3, [r2, r3]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d111      	bne.n	800c534 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c510:	79fb      	ldrb	r3, [r7, #7]
 800c512:	4a0b      	ldr	r2, [pc, #44]	; (800c540 <disk_initialize+0x48>)
 800c514:	2101      	movs	r1, #1
 800c516:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c518:	79fb      	ldrb	r3, [r7, #7]
 800c51a:	4a09      	ldr	r2, [pc, #36]	; (800c540 <disk_initialize+0x48>)
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	79fa      	ldrb	r2, [r7, #7]
 800c526:	4906      	ldr	r1, [pc, #24]	; (800c540 <disk_initialize+0x48>)
 800c528:	440a      	add	r2, r1
 800c52a:	7a12      	ldrb	r2, [r2, #8]
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	4603      	mov	r3, r0
 800c532:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c534:	7bfb      	ldrb	r3, [r7, #15]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	240081fc 	.word	0x240081fc

0800c544 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c544:	b590      	push	{r4, r7, lr}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60b9      	str	r1, [r7, #8]
 800c54c:	607a      	str	r2, [r7, #4]
 800c54e:	603b      	str	r3, [r7, #0]
 800c550:	4603      	mov	r3, r0
 800c552:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c554:	7bfb      	ldrb	r3, [r7, #15]
 800c556:	4a0a      	ldr	r2, [pc, #40]	; (800c580 <disk_read+0x3c>)
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	689c      	ldr	r4, [r3, #8]
 800c560:	7bfb      	ldrb	r3, [r7, #15]
 800c562:	4a07      	ldr	r2, [pc, #28]	; (800c580 <disk_read+0x3c>)
 800c564:	4413      	add	r3, r2
 800c566:	7a18      	ldrb	r0, [r3, #8]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	68b9      	ldr	r1, [r7, #8]
 800c56e:	47a0      	blx	r4
 800c570:	4603      	mov	r3, r0
 800c572:	75fb      	strb	r3, [r7, #23]
  return res;
 800c574:	7dfb      	ldrb	r3, [r7, #23]
}
 800c576:	4618      	mov	r0, r3
 800c578:	371c      	adds	r7, #28
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd90      	pop	{r4, r7, pc}
 800c57e:	bf00      	nop
 800c580:	240081fc 	.word	0x240081fc

0800c584 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c584:	b590      	push	{r4, r7, lr}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	607a      	str	r2, [r7, #4]
 800c58e:	603b      	str	r3, [r7, #0]
 800c590:	4603      	mov	r3, r0
 800c592:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c594:	7bfb      	ldrb	r3, [r7, #15]
 800c596:	4a0a      	ldr	r2, [pc, #40]	; (800c5c0 <disk_write+0x3c>)
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4413      	add	r3, r2
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	68dc      	ldr	r4, [r3, #12]
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
 800c5a2:	4a07      	ldr	r2, [pc, #28]	; (800c5c0 <disk_write+0x3c>)
 800c5a4:	4413      	add	r3, r2
 800c5a6:	7a18      	ldrb	r0, [r3, #8]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	68b9      	ldr	r1, [r7, #8]
 800c5ae:	47a0      	blx	r4
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	371c      	adds	r7, #28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd90      	pop	{r4, r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	240081fc 	.word	0x240081fc

0800c5c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	603a      	str	r2, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c5d4:	79fb      	ldrb	r3, [r7, #7]
 800c5d6:	4a09      	ldr	r2, [pc, #36]	; (800c5fc <disk_ioctl+0x38>)
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	79fa      	ldrb	r2, [r7, #7]
 800c5e2:	4906      	ldr	r1, [pc, #24]	; (800c5fc <disk_ioctl+0x38>)
 800c5e4:	440a      	add	r2, r1
 800c5e6:	7a10      	ldrb	r0, [r2, #8]
 800c5e8:	79b9      	ldrb	r1, [r7, #6]
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	4798      	blx	r3
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	240081fc 	.word	0x240081fc

0800c600 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3301      	adds	r3, #1
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c610:	89fb      	ldrh	r3, [r7, #14]
 800c612:	021b      	lsls	r3, r3, #8
 800c614:	b21a      	sxth	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	b21b      	sxth	r3, r3
 800c61c:	4313      	orrs	r3, r2
 800c61e:	b21b      	sxth	r3, r3
 800c620:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c622:	89fb      	ldrh	r3, [r7, #14]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3303      	adds	r3, #3
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	021b      	lsls	r3, r3, #8
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	3202      	adds	r2, #2
 800c648:	7812      	ldrb	r2, [r2, #0]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	021b      	lsls	r3, r3, #8
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	3201      	adds	r2, #1
 800c656:	7812      	ldrb	r2, [r2, #0]
 800c658:	4313      	orrs	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	021b      	lsls	r3, r3, #8
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	7812      	ldrb	r2, [r2, #0]
 800c664:	4313      	orrs	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]
	return rv;
 800c668:	68fb      	ldr	r3, [r7, #12]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	607a      	str	r2, [r7, #4]
 800c688:	887a      	ldrh	r2, [r7, #2]
 800c68a:	b2d2      	uxtb	r2, r2
 800c68c:	701a      	strb	r2, [r3, #0]
 800c68e:	887b      	ldrh	r3, [r7, #2]
 800c690:	0a1b      	lsrs	r3, r3, #8
 800c692:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	607a      	str	r2, [r7, #4]
 800c69a:	887a      	ldrh	r2, [r7, #2]
 800c69c:	b2d2      	uxtb	r2, r2
 800c69e:	701a      	strb	r2, [r3, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	0a1b      	lsrs	r3, r3, #8
 800c6c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	607a      	str	r2, [r7, #4]
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	b2d2      	uxtb	r2, r2
 800c6d2:	701a      	strb	r2, [r3, #0]
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	0a1b      	lsrs	r3, r3, #8
 800c6d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	1c5a      	adds	r2, r3, #1
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	b2d2      	uxtb	r2, r2
 800c6e4:	701a      	strb	r2, [r3, #0]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	0a1b      	lsrs	r3, r3, #8
 800c6ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	1c5a      	adds	r2, r3, #1
 800c6f0:	607a      	str	r2, [r7, #4]
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	b2d2      	uxtb	r2, r2
 800c6f6:	701a      	strb	r2, [r3, #0]
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c704:	b480      	push	{r7}
 800c706:	b087      	sub	sp, #28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00d      	beq.n	800c73a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	1c53      	adds	r3, r2, #1
 800c722:	613b      	str	r3, [r7, #16]
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	1c59      	adds	r1, r3, #1
 800c728:	6179      	str	r1, [r7, #20]
 800c72a:	7812      	ldrb	r2, [r2, #0]
 800c72c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3b01      	subs	r3, #1
 800c732:	607b      	str	r3, [r7, #4]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1f1      	bne.n	800c71e <mem_cpy+0x1a>
	}
}
 800c73a:	bf00      	nop
 800c73c:	371c      	adds	r7, #28
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c746:	b480      	push	{r7}
 800c748:	b087      	sub	sp, #28
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	60f8      	str	r0, [r7, #12]
 800c74e:	60b9      	str	r1, [r7, #8]
 800c750:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	617a      	str	r2, [r7, #20]
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	b2d2      	uxtb	r2, r2
 800c760:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3b01      	subs	r3, #1
 800c766:	607b      	str	r3, [r7, #4]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1f3      	bne.n	800c756 <mem_set+0x10>
}
 800c76e:	bf00      	nop
 800c770:	bf00      	nop
 800c772:	371c      	adds	r7, #28
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c77c:	b480      	push	{r7}
 800c77e:	b089      	sub	sp, #36	; 0x24
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	61fb      	str	r3, [r7, #28]
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	1c5a      	adds	r2, r3, #1
 800c798:	61fa      	str	r2, [r7, #28]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	4619      	mov	r1, r3
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	61ba      	str	r2, [r7, #24]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	1acb      	subs	r3, r1, r3
 800c7a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	607b      	str	r3, [r7, #4]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d002      	beq.n	800c7bc <mem_cmp+0x40>
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0eb      	beq.n	800c794 <mem_cmp+0x18>

	return r;
 800c7bc:	697b      	ldr	r3, [r7, #20]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3724      	adds	r7, #36	; 0x24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c7d4:	e002      	b.n	800c7dc <chk_chr+0x12>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	607b      	str	r3, [r7, #4]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d005      	beq.n	800c7f0 <chk_chr+0x26>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d1f2      	bne.n	800c7d6 <chk_chr+0xc>
	return *str;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d009      	beq.n	800c822 <lock_fs+0x22>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	4618      	mov	r0, r3
 800c814:	f002 fd14 	bl	800f240 <ff_req_grant>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <lock_fs+0x22>
 800c81e:	2301      	movs	r3, #1
 800c820:	e000      	b.n	800c824 <lock_fs+0x24>
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00d      	beq.n	800c85a <unlock_fs+0x2e>
 800c83e:	78fb      	ldrb	r3, [r7, #3]
 800c840:	2b0c      	cmp	r3, #12
 800c842:	d00a      	beq.n	800c85a <unlock_fs+0x2e>
 800c844:	78fb      	ldrb	r3, [r7, #3]
 800c846:	2b0b      	cmp	r3, #11
 800c848:	d007      	beq.n	800c85a <unlock_fs+0x2e>
 800c84a:	78fb      	ldrb	r3, [r7, #3]
 800c84c:	2b0f      	cmp	r3, #15
 800c84e:	d004      	beq.n	800c85a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	4618      	mov	r0, r3
 800c856:	f002 fd08 	bl	800f26a <ff_rel_grant>
	}
}
 800c85a:	bf00      	nop
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c86e:	2300      	movs	r3, #0
 800c870:	60bb      	str	r3, [r7, #8]
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	60fb      	str	r3, [r7, #12]
 800c876:	e029      	b.n	800c8cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c878:	4a27      	ldr	r2, [pc, #156]	; (800c918 <chk_lock+0xb4>)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	4413      	add	r3, r2
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d01d      	beq.n	800c8c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c886:	4a24      	ldr	r2, [pc, #144]	; (800c918 <chk_lock+0xb4>)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	011b      	lsls	r3, r3, #4
 800c88c:	4413      	add	r3, r2
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d116      	bne.n	800c8c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c898:	4a1f      	ldr	r2, [pc, #124]	; (800c918 <chk_lock+0xb4>)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	011b      	lsls	r3, r3, #4
 800c89e:	4413      	add	r3, r2
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d10c      	bne.n	800c8c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c8ac:	4a1a      	ldr	r2, [pc, #104]	; (800c918 <chk_lock+0xb4>)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	011b      	lsls	r3, r3, #4
 800c8b2:	4413      	add	r3, r2
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d102      	bne.n	800c8c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c8c0:	e007      	b.n	800c8d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	60fb      	str	r3, [r7, #12]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d9d2      	bls.n	800c878 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d109      	bne.n	800c8ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <chk_lock+0x80>
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d101      	bne.n	800c8e8 <chk_lock+0x84>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	e010      	b.n	800c90a <chk_lock+0xa6>
 800c8e8:	2312      	movs	r3, #18
 800c8ea:	e00e      	b.n	800c90a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d108      	bne.n	800c904 <chk_lock+0xa0>
 800c8f2:	4a09      	ldr	r2, [pc, #36]	; (800c918 <chk_lock+0xb4>)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	011b      	lsls	r3, r3, #4
 800c8f8:	4413      	add	r3, r2
 800c8fa:	330c      	adds	r3, #12
 800c8fc:	881b      	ldrh	r3, [r3, #0]
 800c8fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c902:	d101      	bne.n	800c908 <chk_lock+0xa4>
 800c904:	2310      	movs	r3, #16
 800c906:	e000      	b.n	800c90a <chk_lock+0xa6>
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	240081dc 	.word	0x240081dc

0800c91c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c922:	2300      	movs	r3, #0
 800c924:	607b      	str	r3, [r7, #4]
 800c926:	e002      	b.n	800c92e <enq_lock+0x12>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	3301      	adds	r3, #1
 800c92c:	607b      	str	r3, [r7, #4]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d806      	bhi.n	800c942 <enq_lock+0x26>
 800c934:	4a09      	ldr	r2, [pc, #36]	; (800c95c <enq_lock+0x40>)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	011b      	lsls	r3, r3, #4
 800c93a:	4413      	add	r3, r2
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1f2      	bne.n	800c928 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b02      	cmp	r3, #2
 800c946:	bf14      	ite	ne
 800c948:	2301      	movne	r3, #1
 800c94a:	2300      	moveq	r3, #0
 800c94c:	b2db      	uxtb	r3, r3
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	240081dc 	.word	0x240081dc

0800c960 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c96a:	2300      	movs	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]
 800c96e:	e01f      	b.n	800c9b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c970:	4a41      	ldr	r2, [pc, #260]	; (800ca78 <inc_lock+0x118>)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	011b      	lsls	r3, r3, #4
 800c976:	4413      	add	r3, r2
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d113      	bne.n	800c9aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c982:	4a3d      	ldr	r2, [pc, #244]	; (800ca78 <inc_lock+0x118>)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	011b      	lsls	r3, r3, #4
 800c988:	4413      	add	r3, r2
 800c98a:	3304      	adds	r3, #4
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c992:	429a      	cmp	r2, r3
 800c994:	d109      	bne.n	800c9aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c996:	4a38      	ldr	r2, [pc, #224]	; (800ca78 <inc_lock+0x118>)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	4413      	add	r3, r2
 800c99e:	3308      	adds	r3, #8
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d006      	beq.n	800c9b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	60fb      	str	r3, [r7, #12]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d9dc      	bls.n	800c970 <inc_lock+0x10>
 800c9b6:	e000      	b.n	800c9ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c9b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d132      	bne.n	800ca26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	60fb      	str	r3, [r7, #12]
 800c9c4:	e002      	b.n	800c9cc <inc_lock+0x6c>
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d806      	bhi.n	800c9e0 <inc_lock+0x80>
 800c9d2:	4a29      	ldr	r2, [pc, #164]	; (800ca78 <inc_lock+0x118>)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	011b      	lsls	r3, r3, #4
 800c9d8:	4413      	add	r3, r2
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d1f2      	bne.n	800c9c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d101      	bne.n	800c9ea <inc_lock+0x8a>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e040      	b.n	800ca6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	4922      	ldr	r1, [pc, #136]	; (800ca78 <inc_lock+0x118>)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	011b      	lsls	r3, r3, #4
 800c9f4:	440b      	add	r3, r1
 800c9f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	689a      	ldr	r2, [r3, #8]
 800c9fc:	491e      	ldr	r1, [pc, #120]	; (800ca78 <inc_lock+0x118>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	440b      	add	r3, r1
 800ca04:	3304      	adds	r3, #4
 800ca06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	695a      	ldr	r2, [r3, #20]
 800ca0c:	491a      	ldr	r1, [pc, #104]	; (800ca78 <inc_lock+0x118>)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	011b      	lsls	r3, r3, #4
 800ca12:	440b      	add	r3, r1
 800ca14:	3308      	adds	r3, #8
 800ca16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ca18:	4a17      	ldr	r2, [pc, #92]	; (800ca78 <inc_lock+0x118>)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	011b      	lsls	r3, r3, #4
 800ca1e:	4413      	add	r3, r2
 800ca20:	330c      	adds	r3, #12
 800ca22:	2200      	movs	r2, #0
 800ca24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d009      	beq.n	800ca40 <inc_lock+0xe0>
 800ca2c:	4a12      	ldr	r2, [pc, #72]	; (800ca78 <inc_lock+0x118>)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	011b      	lsls	r3, r3, #4
 800ca32:	4413      	add	r3, r2
 800ca34:	330c      	adds	r3, #12
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <inc_lock+0xe0>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	e015      	b.n	800ca6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d108      	bne.n	800ca58 <inc_lock+0xf8>
 800ca46:	4a0c      	ldr	r2, [pc, #48]	; (800ca78 <inc_lock+0x118>)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	011b      	lsls	r3, r3, #4
 800ca4c:	4413      	add	r3, r2
 800ca4e:	330c      	adds	r3, #12
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	3301      	adds	r3, #1
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	e001      	b.n	800ca5c <inc_lock+0xfc>
 800ca58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca5c:	4906      	ldr	r1, [pc, #24]	; (800ca78 <inc_lock+0x118>)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	011b      	lsls	r3, r3, #4
 800ca62:	440b      	add	r3, r1
 800ca64:	330c      	adds	r3, #12
 800ca66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3301      	adds	r3, #1
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	240081dc 	.word	0x240081dc

0800ca7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	607b      	str	r3, [r7, #4]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d825      	bhi.n	800cadc <dec_lock+0x60>
		n = Files[i].ctr;
 800ca90:	4a17      	ldr	r2, [pc, #92]	; (800caf0 <dec_lock+0x74>)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	011b      	lsls	r3, r3, #4
 800ca96:	4413      	add	r3, r2
 800ca98:	330c      	adds	r3, #12
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca9e:	89fb      	ldrh	r3, [r7, #14]
 800caa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caa4:	d101      	bne.n	800caaa <dec_lock+0x2e>
 800caa6:	2300      	movs	r3, #0
 800caa8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800caaa:	89fb      	ldrh	r3, [r7, #14]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <dec_lock+0x3a>
 800cab0:	89fb      	ldrh	r3, [r7, #14]
 800cab2:	3b01      	subs	r3, #1
 800cab4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cab6:	4a0e      	ldr	r2, [pc, #56]	; (800caf0 <dec_lock+0x74>)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	4413      	add	r3, r2
 800cabe:	330c      	adds	r3, #12
 800cac0:	89fa      	ldrh	r2, [r7, #14]
 800cac2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cac4:	89fb      	ldrh	r3, [r7, #14]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d105      	bne.n	800cad6 <dec_lock+0x5a>
 800caca:	4a09      	ldr	r2, [pc, #36]	; (800caf0 <dec_lock+0x74>)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	011b      	lsls	r3, r3, #4
 800cad0:	4413      	add	r3, r2
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	737b      	strb	r3, [r7, #13]
 800cada:	e001      	b.n	800cae0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cadc:	2302      	movs	r3, #2
 800cade:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cae0:	7b7b      	ldrb	r3, [r7, #13]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	240081dc 	.word	0x240081dc

0800caf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cafc:	2300      	movs	r3, #0
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	e010      	b.n	800cb24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cb02:	4a0d      	ldr	r2, [pc, #52]	; (800cb38 <clear_lock+0x44>)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	011b      	lsls	r3, r3, #4
 800cb08:	4413      	add	r3, r2
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d105      	bne.n	800cb1e <clear_lock+0x2a>
 800cb12:	4a09      	ldr	r2, [pc, #36]	; (800cb38 <clear_lock+0x44>)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	011b      	lsls	r3, r3, #4
 800cb18:	4413      	add	r3, r2
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3301      	adds	r3, #1
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d9eb      	bls.n	800cb02 <clear_lock+0xe>
	}
}
 800cb2a:	bf00      	nop
 800cb2c:	bf00      	nop
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	240081dc 	.word	0x240081dc

0800cb3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	78db      	ldrb	r3, [r3, #3]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d034      	beq.n	800cbba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	7858      	ldrb	r0, [r3, #1]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cb60:	2301      	movs	r3, #1
 800cb62:	697a      	ldr	r2, [r7, #20]
 800cb64:	f7ff fd0e 	bl	800c584 <disk_write>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d002      	beq.n	800cb74 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	73fb      	strb	r3, [r7, #15]
 800cb72:	e022      	b.n	800cbba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	1ad2      	subs	r2, r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	69db      	ldr	r3, [r3, #28]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d217      	bcs.n	800cbba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	789b      	ldrb	r3, [r3, #2]
 800cb8e:	613b      	str	r3, [r7, #16]
 800cb90:	e010      	b.n	800cbb4 <sync_window+0x78>
					wsect += fs->fsize;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4413      	add	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	7858      	ldrb	r0, [r3, #1]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cba6:	2301      	movs	r3, #1
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	f7ff fceb 	bl	800c584 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	613b      	str	r3, [r7, #16]
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d8eb      	bhi.n	800cb92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d01b      	beq.n	800cc14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7ff ffad 	bl	800cb3c <sync_window>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d113      	bne.n	800cc14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	7858      	ldrb	r0, [r3, #1]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	f7ff fca3 	bl	800c544 <disk_read>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d004      	beq.n	800cc0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cc04:	f04f 33ff 	mov.w	r3, #4294967295
 800cc08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
	...

0800cc20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff ff87 	bl	800cb3c <sync_window>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cc32:	7bfb      	ldrb	r3, [r7, #15]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d158      	bne.n	800ccea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	d148      	bne.n	800ccd2 <sync_fs+0xb2>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	791b      	ldrb	r3, [r3, #4]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d144      	bne.n	800ccd2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	3334      	adds	r3, #52	; 0x34
 800cc4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc50:	2100      	movs	r1, #0
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff fd77 	bl	800c746 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3334      	adds	r3, #52	; 0x34
 800cc5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff fd06 	bl	800c676 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3334      	adds	r3, #52	; 0x34
 800cc6e:	4921      	ldr	r1, [pc, #132]	; (800ccf4 <sync_fs+0xd4>)
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7ff fd1b 	bl	800c6ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3334      	adds	r3, #52	; 0x34
 800cc7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc7e:	491e      	ldr	r1, [pc, #120]	; (800ccf8 <sync_fs+0xd8>)
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7ff fd13 	bl	800c6ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3334      	adds	r3, #52	; 0x34
 800cc8a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	4619      	mov	r1, r3
 800cc94:	4610      	mov	r0, r2
 800cc96:	f7ff fd09 	bl	800c6ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	3334      	adds	r3, #52	; 0x34
 800cc9e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	4619      	mov	r1, r3
 800cca8:	4610      	mov	r0, r2
 800ccaa:	f7ff fcff 	bl	800c6ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	7858      	ldrb	r0, [r3, #1]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	f7ff fc5c 	bl	800c584 <disk_write>
			fs->fsi_flag = 0;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	785b      	ldrb	r3, [r3, #1]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2100      	movs	r1, #0
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff fc72 	bl	800c5c4 <disk_ioctl>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d001      	beq.n	800ccea <sync_fs+0xca>
 800cce6:	2301      	movs	r3, #1
 800cce8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	41615252 	.word	0x41615252
 800ccf8:	61417272 	.word	0x61417272

0800ccfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	3b02      	subs	r3, #2
 800cd0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	3b02      	subs	r3, #2
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d301      	bcc.n	800cd1c <clust2sect+0x20>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	e008      	b.n	800cd2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	895b      	ldrh	r3, [r3, #10]
 800cd20:	461a      	mov	r2, r3
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	fb03 f202 	mul.w	r2, r3, r2
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2c:	4413      	add	r3, r2
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	370c      	adds	r7, #12
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b086      	sub	sp, #24
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d904      	bls.n	800cd5a <get_fat+0x20>
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	699b      	ldr	r3, [r3, #24]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d302      	bcc.n	800cd60 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	617b      	str	r3, [r7, #20]
 800cd5e:	e08f      	b.n	800ce80 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd60:	f04f 33ff 	mov.w	r3, #4294967295
 800cd64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b03      	cmp	r3, #3
 800cd6c:	d062      	beq.n	800ce34 <get_fat+0xfa>
 800cd6e:	2b03      	cmp	r3, #3
 800cd70:	dc7c      	bgt.n	800ce6c <get_fat+0x132>
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d002      	beq.n	800cd7c <get_fat+0x42>
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d042      	beq.n	800ce00 <get_fat+0xc6>
 800cd7a:	e077      	b.n	800ce6c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	085b      	lsrs	r3, r3, #1
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	4413      	add	r3, r2
 800cd88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	0a5b      	lsrs	r3, r3, #9
 800cd92:	4413      	add	r3, r2
 800cd94:	4619      	mov	r1, r3
 800cd96:	6938      	ldr	r0, [r7, #16]
 800cd98:	f7ff ff14 	bl	800cbc4 <move_window>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d167      	bne.n	800ce72 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	1c5a      	adds	r2, r3, #1
 800cda6:	60fa      	str	r2, [r7, #12]
 800cda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	4413      	add	r3, r2
 800cdb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cdb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	0a5b      	lsrs	r3, r3, #9
 800cdbe:	4413      	add	r3, r2
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6938      	ldr	r0, [r7, #16]
 800cdc4:	f7ff fefe 	bl	800cbc4 <move_window>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d153      	bne.n	800ce76 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cddc:	021b      	lsls	r3, r3, #8
 800cdde:	461a      	mov	r2, r3
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <get_fat+0xbc>
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	091b      	lsrs	r3, r3, #4
 800cdf4:	e002      	b.n	800cdfc <get_fat+0xc2>
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdfc:	617b      	str	r3, [r7, #20]
			break;
 800cdfe:	e03f      	b.n	800ce80 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	0a1b      	lsrs	r3, r3, #8
 800ce08:	4413      	add	r3, r2
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6938      	ldr	r0, [r7, #16]
 800ce0e:	f7ff fed9 	bl	800cbc4 <move_window>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d130      	bne.n	800ce7a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ce26:	4413      	add	r3, r2
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff fbe9 	bl	800c600 <ld_word>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	617b      	str	r3, [r7, #20]
			break;
 800ce32:	e025      	b.n	800ce80 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	09db      	lsrs	r3, r3, #7
 800ce3c:	4413      	add	r3, r2
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6938      	ldr	r0, [r7, #16]
 800ce42:	f7ff febf 	bl	800cbc4 <move_window>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d118      	bne.n	800ce7e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ce5a:	4413      	add	r3, r2
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff fbe7 	bl	800c630 <ld_dword>
 800ce62:	4603      	mov	r3, r0
 800ce64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ce68:	617b      	str	r3, [r7, #20]
			break;
 800ce6a:	e009      	b.n	800ce80 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	617b      	str	r3, [r7, #20]
 800ce70:	e006      	b.n	800ce80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce72:	bf00      	nop
 800ce74:	e004      	b.n	800ce80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce76:	bf00      	nop
 800ce78:	e002      	b.n	800ce80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce7a:	bf00      	nop
 800ce7c:	e000      	b.n	800ce80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce7e:	bf00      	nop
		}
	}

	return val;
 800ce80:	697b      	ldr	r3, [r7, #20]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ce8a:	b590      	push	{r4, r7, lr}
 800ce8c:	b089      	sub	sp, #36	; 0x24
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	60f8      	str	r0, [r7, #12]
 800ce92:	60b9      	str	r1, [r7, #8]
 800ce94:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ce96:	2302      	movs	r3, #2
 800ce98:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	f240 80d2 	bls.w	800d046 <put_fat+0x1bc>
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	f080 80cc 	bcs.w	800d046 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	f000 8096 	beq.w	800cfe4 <put_fat+0x15a>
 800ceb8:	2b03      	cmp	r3, #3
 800ceba:	f300 80cd 	bgt.w	800d058 <put_fat+0x1ce>
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d002      	beq.n	800cec8 <put_fat+0x3e>
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d06e      	beq.n	800cfa4 <put_fat+0x11a>
 800cec6:	e0c7      	b.n	800d058 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	61bb      	str	r3, [r7, #24]
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	085b      	lsrs	r3, r3, #1
 800ced0:	69ba      	ldr	r2, [r7, #24]
 800ced2:	4413      	add	r3, r2
 800ced4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	0a5b      	lsrs	r3, r3, #9
 800cede:	4413      	add	r3, r2
 800cee0:	4619      	mov	r1, r3
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f7ff fe6e 	bl	800cbc4 <move_window>
 800cee8:	4603      	mov	r3, r0
 800ceea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ceec:	7ffb      	ldrb	r3, [r7, #31]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f040 80ab 	bne.w	800d04a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	1c59      	adds	r1, r3, #1
 800cefe:	61b9      	str	r1, [r7, #24]
 800cf00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf04:	4413      	add	r3, r2
 800cf06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	f003 0301 	and.w	r3, r3, #1
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00d      	beq.n	800cf2e <put_fat+0xa4>
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	b25b      	sxtb	r3, r3
 800cf18:	f003 030f 	and.w	r3, r3, #15
 800cf1c:	b25a      	sxtb	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	011b      	lsls	r3, r3, #4
 800cf24:	b25b      	sxtb	r3, r3
 800cf26:	4313      	orrs	r3, r2
 800cf28:	b25b      	sxtb	r3, r3
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	e001      	b.n	800cf32 <put_fat+0xa8>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	0a5b      	lsrs	r3, r3, #9
 800cf44:	4413      	add	r3, r2
 800cf46:	4619      	mov	r1, r3
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f7ff fe3b 	bl	800cbc4 <move_window>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf52:	7ffb      	ldrb	r3, [r7, #31]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d17a      	bne.n	800d04e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf64:	4413      	add	r3, r2
 800cf66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d003      	beq.n	800cf7a <put_fat+0xf0>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	091b      	lsrs	r3, r3, #4
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	e00e      	b.n	800cf98 <put_fat+0x10e>
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	b25b      	sxtb	r3, r3
 800cf80:	f023 030f 	bic.w	r3, r3, #15
 800cf84:	b25a      	sxtb	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	0a1b      	lsrs	r3, r3, #8
 800cf8a:	b25b      	sxtb	r3, r3
 800cf8c:	f003 030f 	and.w	r3, r3, #15
 800cf90:	b25b      	sxtb	r3, r3
 800cf92:	4313      	orrs	r3, r2
 800cf94:	b25b      	sxtb	r3, r3
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	697a      	ldr	r2, [r7, #20]
 800cf9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	70da      	strb	r2, [r3, #3]
			break;
 800cfa2:	e059      	b.n	800d058 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	0a1b      	lsrs	r3, r3, #8
 800cfac:	4413      	add	r3, r2
 800cfae:	4619      	mov	r1, r3
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f7ff fe07 	bl	800cbc4 <move_window>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfba:	7ffb      	ldrb	r3, [r7, #31]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d148      	bne.n	800d052 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	005b      	lsls	r3, r3, #1
 800cfca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cfce:	4413      	add	r3, r2
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	b292      	uxth	r2, r2
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7ff fb4d 	bl	800c676 <st_word>
			fs->wflag = 1;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	70da      	strb	r2, [r3, #3]
			break;
 800cfe2:	e039      	b.n	800d058 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	09db      	lsrs	r3, r3, #7
 800cfec:	4413      	add	r3, r2
 800cfee:	4619      	mov	r1, r3
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f7ff fde7 	bl	800cbc4 <move_window>
 800cff6:	4603      	mov	r3, r0
 800cff8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cffa:	7ffb      	ldrb	r3, [r7, #31]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d12a      	bne.n	800d056 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d014:	4413      	add	r3, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff fb0a 	bl	800c630 <ld_dword>
 800d01c:	4603      	mov	r3, r0
 800d01e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d022:	4323      	orrs	r3, r4
 800d024:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d034:	4413      	add	r3, r2
 800d036:	6879      	ldr	r1, [r7, #4]
 800d038:	4618      	mov	r0, r3
 800d03a:	f7ff fb37 	bl	800c6ac <st_dword>
			fs->wflag = 1;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2201      	movs	r2, #1
 800d042:	70da      	strb	r2, [r3, #3]
			break;
 800d044:	e008      	b.n	800d058 <put_fat+0x1ce>
		}
	}
 800d046:	bf00      	nop
 800d048:	e006      	b.n	800d058 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d04a:	bf00      	nop
 800d04c:	e004      	b.n	800d058 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d04e:	bf00      	nop
 800d050:	e002      	b.n	800d058 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d052:	bf00      	nop
 800d054:	e000      	b.n	800d058 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d056:	bf00      	nop
	return res;
 800d058:	7ffb      	ldrb	r3, [r7, #31]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3724      	adds	r7, #36	; 0x24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd90      	pop	{r4, r7, pc}

0800d062 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b088      	sub	sp, #32
 800d066:	af00      	add	r7, sp, #0
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	60b9      	str	r1, [r7, #8]
 800d06c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d904      	bls.n	800d088 <remove_chain+0x26>
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	429a      	cmp	r2, r3
 800d086:	d301      	bcc.n	800d08c <remove_chain+0x2a>
 800d088:	2302      	movs	r3, #2
 800d08a:	e04b      	b.n	800d124 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00c      	beq.n	800d0ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d092:	f04f 32ff 	mov.w	r2, #4294967295
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	69b8      	ldr	r0, [r7, #24]
 800d09a:	f7ff fef6 	bl	800ce8a <put_fat>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d0a2:	7ffb      	ldrb	r3, [r7, #31]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <remove_chain+0x4a>
 800d0a8:	7ffb      	ldrb	r3, [r7, #31]
 800d0aa:	e03b      	b.n	800d124 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d0ac:	68b9      	ldr	r1, [r7, #8]
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f7ff fe43 	bl	800cd3a <get_fat>
 800d0b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d031      	beq.n	800d120 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d101      	bne.n	800d0c6 <remove_chain+0x64>
 800d0c2:	2302      	movs	r3, #2
 800d0c4:	e02e      	b.n	800d124 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0cc:	d101      	bne.n	800d0d2 <remove_chain+0x70>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e028      	b.n	800d124 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	68b9      	ldr	r1, [r7, #8]
 800d0d6:	69b8      	ldr	r0, [r7, #24]
 800d0d8:	f7ff fed7 	bl	800ce8a <put_fat>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d0e0:	7ffb      	ldrb	r3, [r7, #31]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <remove_chain+0x88>
 800d0e6:	7ffb      	ldrb	r3, [r7, #31]
 800d0e8:	e01c      	b.n	800d124 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	695a      	ldr	r2, [r3, #20]
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	3b02      	subs	r3, #2
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d20b      	bcs.n	800d110 <remove_chain+0xae>
			fs->free_clst++;
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	695b      	ldr	r3, [r3, #20]
 800d0fc:	1c5a      	adds	r2, r3, #1
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	791b      	ldrb	r3, [r3, #4]
 800d106:	f043 0301 	orr.w	r3, r3, #1
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	699b      	ldr	r3, [r3, #24]
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d3c6      	bcc.n	800d0ac <remove_chain+0x4a>
 800d11e:	e000      	b.n	800d122 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d120:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3720      	adds	r7, #32
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b088      	sub	sp, #32
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10d      	bne.n	800d15e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d004      	beq.n	800d158 <create_chain+0x2c>
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	699b      	ldr	r3, [r3, #24]
 800d152:	69ba      	ldr	r2, [r7, #24]
 800d154:	429a      	cmp	r2, r3
 800d156:	d31b      	bcc.n	800d190 <create_chain+0x64>
 800d158:	2301      	movs	r3, #1
 800d15a:	61bb      	str	r3, [r7, #24]
 800d15c:	e018      	b.n	800d190 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff fdea 	bl	800cd3a <get_fat>
 800d166:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d801      	bhi.n	800d172 <create_chain+0x46>
 800d16e:	2301      	movs	r3, #1
 800d170:	e070      	b.n	800d254 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d178:	d101      	bne.n	800d17e <create_chain+0x52>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	e06a      	b.n	800d254 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	699b      	ldr	r3, [r3, #24]
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	429a      	cmp	r2, r3
 800d186:	d201      	bcs.n	800d18c <create_chain+0x60>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	e063      	b.n	800d254 <create_chain+0x128>
		scl = clst;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	3301      	adds	r3, #1
 800d198:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	699b      	ldr	r3, [r3, #24]
 800d19e:	69fa      	ldr	r2, [r7, #28]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d307      	bcc.n	800d1b4 <create_chain+0x88>
				ncl = 2;
 800d1a4:	2302      	movs	r3, #2
 800d1a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d1a8:	69fa      	ldr	r2, [r7, #28]
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d901      	bls.n	800d1b4 <create_chain+0x88>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e04f      	b.n	800d254 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d1b4:	69f9      	ldr	r1, [r7, #28]
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff fdbf 	bl	800cd3a <get_fat>
 800d1bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00e      	beq.n	800d1e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d003      	beq.n	800d1d2 <create_chain+0xa6>
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d0:	d101      	bne.n	800d1d6 <create_chain+0xaa>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	e03e      	b.n	800d254 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d1d6:	69fa      	ldr	r2, [r7, #28]
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d1da      	bne.n	800d194 <create_chain+0x68>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e038      	b.n	800d254 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d1e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e8:	69f9      	ldr	r1, [r7, #28]
 800d1ea:	6938      	ldr	r0, [r7, #16]
 800d1ec:	f7ff fe4d 	bl	800ce8a <put_fat>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d1f4:	7dfb      	ldrb	r3, [r7, #23]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d109      	bne.n	800d20e <create_chain+0xe2>
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d006      	beq.n	800d20e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d200:	69fa      	ldr	r2, [r7, #28]
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6938      	ldr	r0, [r7, #16]
 800d206:	f7ff fe40 	bl	800ce8a <put_fat>
 800d20a:	4603      	mov	r3, r0
 800d20c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d116      	bne.n	800d242 <create_chain+0x116>
		fs->last_clst = ncl;
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	69fa      	ldr	r2, [r7, #28]
 800d218:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	695a      	ldr	r2, [r3, #20]
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	3b02      	subs	r3, #2
 800d224:	429a      	cmp	r2, r3
 800d226:	d804      	bhi.n	800d232 <create_chain+0x106>
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	1e5a      	subs	r2, r3, #1
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	791b      	ldrb	r3, [r3, #4]
 800d236:	f043 0301 	orr.w	r3, r3, #1
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	711a      	strb	r2, [r3, #4]
 800d240:	e007      	b.n	800d252 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d242:	7dfb      	ldrb	r3, [r7, #23]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d102      	bne.n	800d24e <create_chain+0x122>
 800d248:	f04f 33ff 	mov.w	r3, #4294967295
 800d24c:	e000      	b.n	800d250 <create_chain+0x124>
 800d24e:	2301      	movs	r3, #1
 800d250:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d252:	69fb      	ldr	r3, [r7, #28]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3720      	adds	r7, #32
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b087      	sub	sp, #28
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d270:	3304      	adds	r3, #4
 800d272:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	0a5b      	lsrs	r3, r3, #9
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	8952      	ldrh	r2, [r2, #10]
 800d27c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d280:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	1d1a      	adds	r2, r3, #4
 800d286:	613a      	str	r2, [r7, #16]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <clmt_clust+0x3a>
 800d292:	2300      	movs	r3, #0
 800d294:	e010      	b.n	800d2b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d296:	697a      	ldr	r2, [r7, #20]
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d307      	bcc.n	800d2ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	617b      	str	r3, [r7, #20]
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d2ac:	e7e9      	b.n	800d282 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d2ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	4413      	add	r3, r2
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	371c      	adds	r7, #28
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2da:	d204      	bcs.n	800d2e6 <dir_sdi+0x22>
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	f003 031f 	and.w	r3, r3, #31
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <dir_sdi+0x26>
		return FR_INT_ERR;
 800d2e6:	2302      	movs	r3, #2
 800d2e8:	e063      	b.n	800d3b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	683a      	ldr	r2, [r7, #0]
 800d2ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d106      	bne.n	800d30a <dir_sdi+0x46>
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b02      	cmp	r3, #2
 800d302:	d902      	bls.n	800d30a <dir_sdi+0x46>
		clst = fs->dirbase;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d308:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10c      	bne.n	800d32a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	095b      	lsrs	r3, r3, #5
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	8912      	ldrh	r2, [r2, #8]
 800d318:	4293      	cmp	r3, r2
 800d31a:	d301      	bcc.n	800d320 <dir_sdi+0x5c>
 800d31c:	2302      	movs	r3, #2
 800d31e:	e048      	b.n	800d3b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	61da      	str	r2, [r3, #28]
 800d328:	e029      	b.n	800d37e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	895b      	ldrh	r3, [r3, #10]
 800d32e:	025b      	lsls	r3, r3, #9
 800d330:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d332:	e019      	b.n	800d368 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6979      	ldr	r1, [r7, #20]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fcfe 	bl	800cd3a <get_fat>
 800d33e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d346:	d101      	bne.n	800d34c <dir_sdi+0x88>
 800d348:	2301      	movs	r3, #1
 800d34a:	e032      	b.n	800d3b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d904      	bls.n	800d35c <dir_sdi+0x98>
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	697a      	ldr	r2, [r7, #20]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d301      	bcc.n	800d360 <dir_sdi+0x9c>
 800d35c:	2302      	movs	r3, #2
 800d35e:	e028      	b.n	800d3b2 <dir_sdi+0xee>
			ofs -= csz;
 800d360:	683a      	ldr	r2, [r7, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d2e1      	bcs.n	800d334 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d370:	6979      	ldr	r1, [r7, #20]
 800d372:	6938      	ldr	r0, [r7, #16]
 800d374:	f7ff fcc2 	bl	800ccfc <clust2sect>
 800d378:	4602      	mov	r2, r0
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	697a      	ldr	r2, [r7, #20]
 800d382:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	69db      	ldr	r3, [r3, #28]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <dir_sdi+0xcc>
 800d38c:	2302      	movs	r3, #2
 800d38e:	e010      	b.n	800d3b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	69da      	ldr	r2, [r3, #28]
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	0a5b      	lsrs	r3, r3, #9
 800d398:	441a      	add	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3aa:	441a      	add	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b086      	sub	sp, #24
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	695b      	ldr	r3, [r3, #20]
 800d3ce:	3320      	adds	r3, #32
 800d3d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <dir_next+0x28>
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d3e0:	d301      	bcc.n	800d3e6 <dir_next+0x2c>
 800d3e2:	2304      	movs	r3, #4
 800d3e4:	e0aa      	b.n	800d53c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 8098 	bne.w	800d522 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	69db      	ldr	r3, [r3, #28]
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d10b      	bne.n	800d41c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	095b      	lsrs	r3, r3, #5
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	8912      	ldrh	r2, [r2, #8]
 800d40c:	4293      	cmp	r3, r2
 800d40e:	f0c0 8088 	bcc.w	800d522 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	61da      	str	r2, [r3, #28]
 800d418:	2304      	movs	r3, #4
 800d41a:	e08f      	b.n	800d53c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	0a5b      	lsrs	r3, r3, #9
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	8952      	ldrh	r2, [r2, #10]
 800d424:	3a01      	subs	r2, #1
 800d426:	4013      	ands	r3, r2
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d17a      	bne.n	800d522 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	699b      	ldr	r3, [r3, #24]
 800d432:	4619      	mov	r1, r3
 800d434:	4610      	mov	r0, r2
 800d436:	f7ff fc80 	bl	800cd3a <get_fat>
 800d43a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d801      	bhi.n	800d446 <dir_next+0x8c>
 800d442:	2302      	movs	r3, #2
 800d444:	e07a      	b.n	800d53c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44c:	d101      	bne.n	800d452 <dir_next+0x98>
 800d44e:	2301      	movs	r3, #1
 800d450:	e074      	b.n	800d53c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d358      	bcc.n	800d50e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d104      	bne.n	800d46c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	61da      	str	r2, [r3, #28]
 800d468:	2304      	movs	r3, #4
 800d46a:	e067      	b.n	800d53c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	4619      	mov	r1, r3
 800d474:	4610      	mov	r0, r2
 800d476:	f7ff fe59 	bl	800d12c <create_chain>
 800d47a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d101      	bne.n	800d486 <dir_next+0xcc>
 800d482:	2307      	movs	r3, #7
 800d484:	e05a      	b.n	800d53c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d101      	bne.n	800d490 <dir_next+0xd6>
 800d48c:	2302      	movs	r3, #2
 800d48e:	e055      	b.n	800d53c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d496:	d101      	bne.n	800d49c <dir_next+0xe2>
 800d498:	2301      	movs	r3, #1
 800d49a:	e04f      	b.n	800d53c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f7ff fb4d 	bl	800cb3c <sync_window>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <dir_next+0xf2>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e047      	b.n	800d53c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	3334      	adds	r3, #52	; 0x34
 800d4b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff f945 	bl	800c746 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d4bc:	2300      	movs	r3, #0
 800d4be:	613b      	str	r3, [r7, #16]
 800d4c0:	6979      	ldr	r1, [r7, #20]
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff fc1a 	bl	800ccfc <clust2sect>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	631a      	str	r2, [r3, #48]	; 0x30
 800d4ce:	e012      	b.n	800d4f6 <dir_next+0x13c>
						fs->wflag = 1;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f7ff fb30 	bl	800cb3c <sync_window>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d001      	beq.n	800d4e6 <dir_next+0x12c>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e02a      	b.n	800d53c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	613b      	str	r3, [r7, #16]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4f0:	1c5a      	adds	r2, r3, #1
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	631a      	str	r2, [r3, #48]	; 0x30
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	895b      	ldrh	r3, [r3, #10]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d3e6      	bcc.n	800d4d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	1ad2      	subs	r2, r2, r3
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	697a      	ldr	r2, [r7, #20]
 800d512:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d514:	6979      	ldr	r1, [r7, #20]
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f7ff fbf0 	bl	800ccfc <clust2sect>
 800d51c:	4602      	mov	r2, r0
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d534:	441a      	add	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3718      	adds	r7, #24
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d554:	2100      	movs	r1, #0
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7ff feb4 	bl	800d2c4 <dir_sdi>
 800d55c:	4603      	mov	r3, r0
 800d55e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d560:	7dfb      	ldrb	r3, [r7, #23]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d12b      	bne.n	800d5be <dir_alloc+0x7a>
		n = 0;
 800d566:	2300      	movs	r3, #0
 800d568:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	69db      	ldr	r3, [r3, #28]
 800d56e:	4619      	mov	r1, r3
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7ff fb27 	bl	800cbc4 <move_window>
 800d576:	4603      	mov	r3, r0
 800d578:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d57a:	7dfb      	ldrb	r3, [r7, #23]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d11d      	bne.n	800d5bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a1b      	ldr	r3, [r3, #32]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2be5      	cmp	r3, #229	; 0xe5
 800d588:	d004      	beq.n	800d594 <dir_alloc+0x50>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d107      	bne.n	800d5a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	3301      	adds	r3, #1
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	693a      	ldr	r2, [r7, #16]
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d102      	bne.n	800d5a8 <dir_alloc+0x64>
 800d5a2:	e00c      	b.n	800d5be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff ff05 	bl	800d3ba <dir_next>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d5b4:	7dfb      	ldrb	r3, [r7, #23]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d0d7      	beq.n	800d56a <dir_alloc+0x26>
 800d5ba:	e000      	b.n	800d5be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d5bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
 800d5c0:	2b04      	cmp	r3, #4
 800d5c2:	d101      	bne.n	800d5c8 <dir_alloc+0x84>
 800d5c4:	2307      	movs	r3, #7
 800d5c6:	75fb      	strb	r3, [r7, #23]
	return res;
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b084      	sub	sp, #16
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	331a      	adds	r3, #26
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff f80d 	bl	800c600 <ld_word>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b03      	cmp	r3, #3
 800d5f0:	d109      	bne.n	800d606 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	3314      	adds	r3, #20
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7ff f802 	bl	800c600 <ld_word>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	041b      	lsls	r3, r3, #16
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d606:	68fb      	ldr	r3, [r7, #12]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	331a      	adds	r3, #26
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	b292      	uxth	r2, r2
 800d624:	4611      	mov	r1, r2
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff f825 	bl	800c676 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b03      	cmp	r3, #3
 800d632:	d109      	bne.n	800d648 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f103 0214 	add.w	r2, r3, #20
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	0c1b      	lsrs	r3, r3, #16
 800d63e:	b29b      	uxth	r3, r3
 800d640:	4619      	mov	r1, r3
 800d642:	4610      	mov	r0, r2
 800d644:	f7ff f817 	bl	800c676 <st_word>
	}
}
 800d648:	bf00      	nop
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d65e:	2100      	movs	r1, #0
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff fe2f 	bl	800d2c4 <dir_sdi>
 800d666:	4603      	mov	r3, r0
 800d668:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d66a:	7dfb      	ldrb	r3, [r7, #23]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d001      	beq.n	800d674 <dir_find+0x24>
 800d670:	7dfb      	ldrb	r3, [r7, #23]
 800d672:	e03e      	b.n	800d6f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	69db      	ldr	r3, [r3, #28]
 800d678:	4619      	mov	r1, r3
 800d67a:	6938      	ldr	r0, [r7, #16]
 800d67c:	f7ff faa2 	bl	800cbc4 <move_window>
 800d680:	4603      	mov	r3, r0
 800d682:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d684:	7dfb      	ldrb	r3, [r7, #23]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d12f      	bne.n	800d6ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a1b      	ldr	r3, [r3, #32]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d692:	7bfb      	ldrb	r3, [r7, #15]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d102      	bne.n	800d69e <dir_find+0x4e>
 800d698:	2304      	movs	r3, #4
 800d69a:	75fb      	strb	r3, [r7, #23]
 800d69c:	e028      	b.n	800d6f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6a1b      	ldr	r3, [r3, #32]
 800d6a2:	330b      	adds	r3, #11
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a1b      	ldr	r3, [r3, #32]
 800d6b4:	330b      	adds	r3, #11
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	f003 0308 	and.w	r3, r3, #8
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10a      	bne.n	800d6d6 <dir_find+0x86>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a18      	ldr	r0, [r3, #32]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	3324      	adds	r3, #36	; 0x24
 800d6c8:	220b      	movs	r2, #11
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	f7ff f856 	bl	800c77c <mem_cmp>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00b      	beq.n	800d6ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fe6e 	bl	800d3ba <dir_next>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d0c5      	beq.n	800d674 <dir_find+0x24>
 800d6e8:	e002      	b.n	800d6f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d6ea:	bf00      	nop
 800d6ec:	e000      	b.n	800d6f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d6ee:	bf00      	nop

	return res;
 800d6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3718      	adds	r7, #24
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d708:	2101      	movs	r1, #1
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff ff1a 	bl	800d544 <dir_alloc>
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d11c      	bne.n	800d754 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	69db      	ldr	r3, [r3, #28]
 800d71e:	4619      	mov	r1, r3
 800d720:	68b8      	ldr	r0, [r7, #8]
 800d722:	f7ff fa4f 	bl	800cbc4 <move_window>
 800d726:	4603      	mov	r3, r0
 800d728:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d111      	bne.n	800d754 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6a1b      	ldr	r3, [r3, #32]
 800d734:	2220      	movs	r2, #32
 800d736:	2100      	movs	r1, #0
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff f804 	bl	800c746 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a18      	ldr	r0, [r3, #32]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	3324      	adds	r3, #36	; 0x24
 800d746:	220b      	movs	r2, #11
 800d748:	4619      	mov	r1, r3
 800d74a:	f7fe ffdb 	bl	800c704 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2201      	movs	r2, #1
 800d752:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d754:	7bfb      	ldrb	r3, [r7, #15]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
	...

0800d760 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b088      	sub	sp, #32
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	60fb      	str	r3, [r7, #12]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	3324      	adds	r3, #36	; 0x24
 800d774:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d776:	220b      	movs	r2, #11
 800d778:	2120      	movs	r1, #32
 800d77a:	68b8      	ldr	r0, [r7, #8]
 800d77c:	f7fe ffe3 	bl	800c746 <mem_set>
	si = i = 0; ni = 8;
 800d780:	2300      	movs	r3, #0
 800d782:	613b      	str	r3, [r7, #16]
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	2308      	movs	r3, #8
 800d78a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	1c5a      	adds	r2, r3, #1
 800d790:	61fa      	str	r2, [r7, #28]
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	4413      	add	r3, r2
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d79a:	7efb      	ldrb	r3, [r7, #27]
 800d79c:	2b20      	cmp	r3, #32
 800d79e:	d94e      	bls.n	800d83e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d7a0:	7efb      	ldrb	r3, [r7, #27]
 800d7a2:	2b2f      	cmp	r3, #47	; 0x2f
 800d7a4:	d006      	beq.n	800d7b4 <create_name+0x54>
 800d7a6:	7efb      	ldrb	r3, [r7, #27]
 800d7a8:	2b5c      	cmp	r3, #92	; 0x5c
 800d7aa:	d110      	bne.n	800d7ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d7ac:	e002      	b.n	800d7b4 <create_name+0x54>
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	61fb      	str	r3, [r7, #28]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	2b2f      	cmp	r3, #47	; 0x2f
 800d7be:	d0f6      	beq.n	800d7ae <create_name+0x4e>
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	2b5c      	cmp	r3, #92	; 0x5c
 800d7ca:	d0f0      	beq.n	800d7ae <create_name+0x4e>
			break;
 800d7cc:	e038      	b.n	800d840 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d7ce:	7efb      	ldrb	r3, [r7, #27]
 800d7d0:	2b2e      	cmp	r3, #46	; 0x2e
 800d7d2:	d003      	beq.n	800d7dc <create_name+0x7c>
 800d7d4:	693a      	ldr	r2, [r7, #16]
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d30c      	bcc.n	800d7f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	2b0b      	cmp	r3, #11
 800d7e0:	d002      	beq.n	800d7e8 <create_name+0x88>
 800d7e2:	7efb      	ldrb	r3, [r7, #27]
 800d7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d7e6:	d001      	beq.n	800d7ec <create_name+0x8c>
 800d7e8:	2306      	movs	r3, #6
 800d7ea:	e044      	b.n	800d876 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d7ec:	2308      	movs	r3, #8
 800d7ee:	613b      	str	r3, [r7, #16]
 800d7f0:	230b      	movs	r3, #11
 800d7f2:	617b      	str	r3, [r7, #20]
			continue;
 800d7f4:	e022      	b.n	800d83c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d7f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	da04      	bge.n	800d808 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d7fe:	7efb      	ldrb	r3, [r7, #27]
 800d800:	3b80      	subs	r3, #128	; 0x80
 800d802:	4a1f      	ldr	r2, [pc, #124]	; (800d880 <create_name+0x120>)
 800d804:	5cd3      	ldrb	r3, [r2, r3]
 800d806:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d808:	7efb      	ldrb	r3, [r7, #27]
 800d80a:	4619      	mov	r1, r3
 800d80c:	481d      	ldr	r0, [pc, #116]	; (800d884 <create_name+0x124>)
 800d80e:	f7fe ffdc 	bl	800c7ca <chk_chr>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <create_name+0xbc>
 800d818:	2306      	movs	r3, #6
 800d81a:	e02c      	b.n	800d876 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d81c:	7efb      	ldrb	r3, [r7, #27]
 800d81e:	2b60      	cmp	r3, #96	; 0x60
 800d820:	d905      	bls.n	800d82e <create_name+0xce>
 800d822:	7efb      	ldrb	r3, [r7, #27]
 800d824:	2b7a      	cmp	r3, #122	; 0x7a
 800d826:	d802      	bhi.n	800d82e <create_name+0xce>
 800d828:	7efb      	ldrb	r3, [r7, #27]
 800d82a:	3b20      	subs	r3, #32
 800d82c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	1c5a      	adds	r2, r3, #1
 800d832:	613a      	str	r2, [r7, #16]
 800d834:	68ba      	ldr	r2, [r7, #8]
 800d836:	4413      	add	r3, r2
 800d838:	7efa      	ldrb	r2, [r7, #27]
 800d83a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d83c:	e7a6      	b.n	800d78c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d83e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	441a      	add	r2, r3
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <create_name+0xf4>
 800d850:	2306      	movs	r3, #6
 800d852:	e010      	b.n	800d876 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	2be5      	cmp	r3, #229	; 0xe5
 800d85a:	d102      	bne.n	800d862 <create_name+0x102>
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	2205      	movs	r2, #5
 800d860:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d862:	7efb      	ldrb	r3, [r7, #27]
 800d864:	2b20      	cmp	r3, #32
 800d866:	d801      	bhi.n	800d86c <create_name+0x10c>
 800d868:	2204      	movs	r2, #4
 800d86a:	e000      	b.n	800d86e <create_name+0x10e>
 800d86c:	2200      	movs	r2, #0
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	330b      	adds	r3, #11
 800d872:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d874:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d876:	4618      	mov	r0, r3
 800d878:	3720      	adds	r7, #32
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	080139a8 	.word	0x080139a8
 800d884:	080138b8 	.word	0x080138b8

0800d888 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b086      	sub	sp, #24
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d89c:	e002      	b.n	800d8a4 <follow_path+0x1c>
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	603b      	str	r3, [r7, #0]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	2b2f      	cmp	r3, #47	; 0x2f
 800d8aa:	d0f8      	beq.n	800d89e <follow_path+0x16>
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b5c      	cmp	r3, #92	; 0x5c
 800d8b2:	d0f4      	beq.n	800d89e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	2b1f      	cmp	r3, #31
 800d8c0:	d80a      	bhi.n	800d8d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2280      	movs	r2, #128	; 0x80
 800d8c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7ff fcf9 	bl	800d2c4 <dir_sdi>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	75fb      	strb	r3, [r7, #23]
 800d8d6:	e043      	b.n	800d960 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d8d8:	463b      	mov	r3, r7
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7ff ff3f 	bl	800d760 <create_name>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d8e6:	7dfb      	ldrb	r3, [r7, #23]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d134      	bne.n	800d956 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff feaf 	bl	800d650 <dir_find>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d8fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00a      	beq.n	800d91a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d904:	7dfb      	ldrb	r3, [r7, #23]
 800d906:	2b04      	cmp	r3, #4
 800d908:	d127      	bne.n	800d95a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d90a:	7afb      	ldrb	r3, [r7, #11]
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	2b00      	cmp	r3, #0
 800d912:	d122      	bne.n	800d95a <follow_path+0xd2>
 800d914:	2305      	movs	r3, #5
 800d916:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d918:	e01f      	b.n	800d95a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d91a:	7afb      	ldrb	r3, [r7, #11]
 800d91c:	f003 0304 	and.w	r3, r3, #4
 800d920:	2b00      	cmp	r3, #0
 800d922:	d11c      	bne.n	800d95e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	799b      	ldrb	r3, [r3, #6]
 800d928:	f003 0310 	and.w	r3, r3, #16
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d930:	2305      	movs	r3, #5
 800d932:	75fb      	strb	r3, [r7, #23]
 800d934:	e014      	b.n	800d960 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	695b      	ldr	r3, [r3, #20]
 800d940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d944:	4413      	add	r3, r2
 800d946:	4619      	mov	r1, r3
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f7ff fe42 	bl	800d5d2 <ld_clust>
 800d94e:	4602      	mov	r2, r0
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d954:	e7c0      	b.n	800d8d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800d956:	bf00      	nop
 800d958:	e002      	b.n	800d960 <follow_path+0xd8>
				break;
 800d95a:	bf00      	nop
 800d95c:	e000      	b.n	800d960 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d95e:	bf00      	nop
			}
		}
	}

	return res;
 800d960:	7dfb      	ldrb	r3, [r7, #23]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3718      	adds	r7, #24
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d96a:	b480      	push	{r7}
 800d96c:	b087      	sub	sp, #28
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d972:	f04f 33ff 	mov.w	r3, #4294967295
 800d976:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d031      	beq.n	800d9e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	617b      	str	r3, [r7, #20]
 800d986:	e002      	b.n	800d98e <get_ldnumber+0x24>
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	3301      	adds	r3, #1
 800d98c:	617b      	str	r3, [r7, #20]
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	2b20      	cmp	r3, #32
 800d994:	d903      	bls.n	800d99e <get_ldnumber+0x34>
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	2b3a      	cmp	r3, #58	; 0x3a
 800d99c:	d1f4      	bne.n	800d988 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b3a      	cmp	r3, #58	; 0x3a
 800d9a4:	d11c      	bne.n	800d9e0 <get_ldnumber+0x76>
			tp = *path;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	1c5a      	adds	r2, r3, #1
 800d9b0:	60fa      	str	r2, [r7, #12]
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	3b30      	subs	r3, #48	; 0x30
 800d9b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	2b09      	cmp	r3, #9
 800d9bc:	d80e      	bhi.n	800d9dc <get_ldnumber+0x72>
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d10a      	bne.n	800d9dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d107      	bne.n	800d9dc <get_ldnumber+0x72>
					vol = (int)i;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	617b      	str	r3, [r7, #20]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	e002      	b.n	800d9e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d9e4:	693b      	ldr	r3, [r7, #16]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	371c      	adds	r7, #28
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
	...

0800d9f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	70da      	strb	r2, [r3, #3]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f04f 32ff 	mov.w	r2, #4294967295
 800da0a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800da0c:	6839      	ldr	r1, [r7, #0]
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f7ff f8d8 	bl	800cbc4 <move_window>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <check_fs+0x2a>
 800da1a:	2304      	movs	r3, #4
 800da1c:	e038      	b.n	800da90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	3334      	adds	r3, #52	; 0x34
 800da22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe fdea 	bl	800c600 <ld_word>
 800da2c:	4603      	mov	r3, r0
 800da2e:	461a      	mov	r2, r3
 800da30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800da34:	429a      	cmp	r2, r3
 800da36:	d001      	beq.n	800da3c <check_fs+0x48>
 800da38:	2303      	movs	r3, #3
 800da3a:	e029      	b.n	800da90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da42:	2be9      	cmp	r3, #233	; 0xe9
 800da44:	d009      	beq.n	800da5a <check_fs+0x66>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da4c:	2beb      	cmp	r3, #235	; 0xeb
 800da4e:	d11e      	bne.n	800da8e <check_fs+0x9a>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800da56:	2b90      	cmp	r3, #144	; 0x90
 800da58:	d119      	bne.n	800da8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3334      	adds	r3, #52	; 0x34
 800da5e:	3336      	adds	r3, #54	; 0x36
 800da60:	4618      	mov	r0, r3
 800da62:	f7fe fde5 	bl	800c630 <ld_dword>
 800da66:	4603      	mov	r3, r0
 800da68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da6c:	4a0a      	ldr	r2, [pc, #40]	; (800da98 <check_fs+0xa4>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d101      	bne.n	800da76 <check_fs+0x82>
 800da72:	2300      	movs	r3, #0
 800da74:	e00c      	b.n	800da90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	3334      	adds	r3, #52	; 0x34
 800da7a:	3352      	adds	r3, #82	; 0x52
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe fdd7 	bl	800c630 <ld_dword>
 800da82:	4603      	mov	r3, r0
 800da84:	4a05      	ldr	r2, [pc, #20]	; (800da9c <check_fs+0xa8>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d101      	bne.n	800da8e <check_fs+0x9a>
 800da8a:	2300      	movs	r3, #0
 800da8c:	e000      	b.n	800da90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800da8e:	2302      	movs	r3, #2
}
 800da90:	4618      	mov	r0, r3
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	00544146 	.word	0x00544146
 800da9c:	33544146 	.word	0x33544146

0800daa0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b096      	sub	sp, #88	; 0x58
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	4613      	mov	r3, r2
 800daac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2200      	movs	r2, #0
 800dab2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7ff ff58 	bl	800d96a <get_ldnumber>
 800daba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	da01      	bge.n	800dac6 <find_volume+0x26>
 800dac2:	230b      	movs	r3, #11
 800dac4:	e236      	b.n	800df34 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dac6:	4aac      	ldr	r2, [pc, #688]	; (800dd78 <find_volume+0x2d8>)
 800dac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dace:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <find_volume+0x3a>
 800dad6:	230c      	movs	r3, #12
 800dad8:	e22c      	b.n	800df34 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800dada:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dadc:	f7fe fe90 	bl	800c800 <lock_fs>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d101      	bne.n	800daea <find_volume+0x4a>
 800dae6:	230f      	movs	r3, #15
 800dae8:	e224      	b.n	800df34 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800daf0:	79fb      	ldrb	r3, [r7, #7]
 800daf2:	f023 0301 	bic.w	r3, r3, #1
 800daf6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01a      	beq.n	800db36 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800db00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db02:	785b      	ldrb	r3, [r3, #1]
 800db04:	4618      	mov	r0, r3
 800db06:	f7fe fcdd 	bl	800c4c4 <disk_status>
 800db0a:	4603      	mov	r3, r0
 800db0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800db10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10c      	bne.n	800db36 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800db1c:	79fb      	ldrb	r3, [r7, #7]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d007      	beq.n	800db32 <find_volume+0x92>
 800db22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db26:	f003 0304 	and.w	r3, r3, #4
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800db2e:	230a      	movs	r3, #10
 800db30:	e200      	b.n	800df34 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800db32:	2300      	movs	r3, #0
 800db34:	e1fe      	b.n	800df34 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800db36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db38:	2200      	movs	r2, #0
 800db3a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800db3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	785b      	ldrb	r3, [r3, #1]
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fe fcd5 	bl	800c4f8 <disk_initialize>
 800db4e:	4603      	mov	r3, r0
 800db50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800db54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800db60:	2303      	movs	r3, #3
 800db62:	e1e7      	b.n	800df34 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800db64:	79fb      	ldrb	r3, [r7, #7]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d007      	beq.n	800db7a <find_volume+0xda>
 800db6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db6e:	f003 0304 	and.w	r3, r3, #4
 800db72:	2b00      	cmp	r3, #0
 800db74:	d001      	beq.n	800db7a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800db76:	230a      	movs	r3, #10
 800db78:	e1dc      	b.n	800df34 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800db7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db82:	f7ff ff37 	bl	800d9f4 <check_fs>
 800db86:	4603      	mov	r3, r0
 800db88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800db8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db90:	2b02      	cmp	r3, #2
 800db92:	d14b      	bne.n	800dc2c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db94:	2300      	movs	r3, #0
 800db96:	643b      	str	r3, [r7, #64]	; 0x40
 800db98:	e01f      	b.n	800dbda <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800db9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba2:	011b      	lsls	r3, r3, #4
 800dba4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dba8:	4413      	add	r3, r2
 800dbaa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbae:	3304      	adds	r3, #4
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d006      	beq.n	800dbc4 <find_volume+0x124>
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb8:	3308      	adds	r3, #8
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fe fd38 	bl	800c630 <ld_dword>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	e000      	b.n	800dbc6 <find_volume+0x126>
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800dbce:	440b      	add	r3, r1
 800dbd0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dbd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	643b      	str	r3, [r7, #64]	; 0x40
 800dbda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d9dc      	bls.n	800db9a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <find_volume+0x150>
 800dbea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbec:	3b01      	subs	r3, #1
 800dbee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dbf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dbfe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dc00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d005      	beq.n	800dc12 <find_volume+0x172>
 800dc06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc0a:	f7ff fef3 	bl	800d9f4 <check_fs>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	e000      	b.n	800dc14 <find_volume+0x174>
 800dc12:	2303      	movs	r3, #3
 800dc14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dc18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d905      	bls.n	800dc2c <find_volume+0x18c>
 800dc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc22:	3301      	adds	r3, #1
 800dc24:	643b      	str	r3, [r7, #64]	; 0x40
 800dc26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc28:	2b03      	cmp	r3, #3
 800dc2a:	d9e1      	bls.n	800dbf0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dc2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc30:	2b04      	cmp	r3, #4
 800dc32:	d101      	bne.n	800dc38 <find_volume+0x198>
 800dc34:	2301      	movs	r3, #1
 800dc36:	e17d      	b.n	800df34 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dc38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d901      	bls.n	800dc44 <find_volume+0x1a4>
 800dc40:	230d      	movs	r3, #13
 800dc42:	e177      	b.n	800df34 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc46:	3334      	adds	r3, #52	; 0x34
 800dc48:	330b      	adds	r3, #11
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fe fcd8 	bl	800c600 <ld_word>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc56:	d001      	beq.n	800dc5c <find_volume+0x1bc>
 800dc58:	230d      	movs	r3, #13
 800dc5a:	e16b      	b.n	800df34 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	3334      	adds	r3, #52	; 0x34
 800dc60:	3316      	adds	r3, #22
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fe fccc 	bl	800c600 <ld_word>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dc6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d106      	bne.n	800dc80 <find_volume+0x1e0>
 800dc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc74:	3334      	adds	r3, #52	; 0x34
 800dc76:	3324      	adds	r3, #36	; 0x24
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fe fcd9 	bl	800c630 <ld_dword>
 800dc7e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc84:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc88:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc92:	789b      	ldrb	r3, [r3, #2]
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d005      	beq.n	800dca4 <find_volume+0x204>
 800dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9a:	789b      	ldrb	r3, [r3, #2]
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	d001      	beq.n	800dca4 <find_volume+0x204>
 800dca0:	230d      	movs	r3, #13
 800dca2:	e147      	b.n	800df34 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca6:	789b      	ldrb	r3, [r3, #2]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcac:	fb02 f303 	mul.w	r3, r2, r3
 800dcb0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc0:	895b      	ldrh	r3, [r3, #10]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d008      	beq.n	800dcd8 <find_volume+0x238>
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc8:	895b      	ldrh	r3, [r3, #10]
 800dcca:	461a      	mov	r2, r3
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	895b      	ldrh	r3, [r3, #10]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	4013      	ands	r3, r2
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <find_volume+0x23c>
 800dcd8:	230d      	movs	r3, #13
 800dcda:	e12b      	b.n	800df34 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcde:	3334      	adds	r3, #52	; 0x34
 800dce0:	3311      	adds	r3, #17
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe fc8c 	bl	800c600 <ld_word>
 800dce8:	4603      	mov	r3, r0
 800dcea:	461a      	mov	r2, r3
 800dcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf2:	891b      	ldrh	r3, [r3, #8]
 800dcf4:	f003 030f 	and.w	r3, r3, #15
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <find_volume+0x262>
 800dcfe:	230d      	movs	r3, #13
 800dd00:	e118      	b.n	800df34 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd04:	3334      	adds	r3, #52	; 0x34
 800dd06:	3313      	adds	r3, #19
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fe fc79 	bl	800c600 <ld_word>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d106      	bne.n	800dd26 <find_volume+0x286>
 800dd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1a:	3334      	adds	r3, #52	; 0x34
 800dd1c:	3320      	adds	r3, #32
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe fc86 	bl	800c630 <ld_dword>
 800dd24:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd28:	3334      	adds	r3, #52	; 0x34
 800dd2a:	330e      	adds	r3, #14
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe fc67 	bl	800c600 <ld_word>
 800dd32:	4603      	mov	r3, r0
 800dd34:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dd36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d101      	bne.n	800dd40 <find_volume+0x2a0>
 800dd3c:	230d      	movs	r3, #13
 800dd3e:	e0f9      	b.n	800df34 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dd40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd44:	4413      	add	r3, r2
 800dd46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd48:	8912      	ldrh	r2, [r2, #8]
 800dd4a:	0912      	lsrs	r2, r2, #4
 800dd4c:	b292      	uxth	r2, r2
 800dd4e:	4413      	add	r3, r2
 800dd50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dd52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d201      	bcs.n	800dd5e <find_volume+0x2be>
 800dd5a:	230d      	movs	r3, #13
 800dd5c:	e0ea      	b.n	800df34 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dd5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd66:	8952      	ldrh	r2, [r2, #10]
 800dd68:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d103      	bne.n	800dd7c <find_volume+0x2dc>
 800dd74:	230d      	movs	r3, #13
 800dd76:	e0dd      	b.n	800df34 <find_volume+0x494>
 800dd78:	240081d4 	.word	0x240081d4
		fmt = FS_FAT32;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d802      	bhi.n	800dd92 <find_volume+0x2f2>
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d802      	bhi.n	800dda2 <find_volume+0x302>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	1c9a      	adds	r2, r3, #2
 800dda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ddaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddae:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ddb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ddb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddb4:	441a      	add	r2, r3
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ddba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	441a      	add	r2, r3
 800ddc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ddc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ddc8:	2b03      	cmp	r3, #3
 800ddca:	d11e      	bne.n	800de0a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddce:	3334      	adds	r3, #52	; 0x34
 800ddd0:	332a      	adds	r3, #42	; 0x2a
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fe fc14 	bl	800c600 <ld_word>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d001      	beq.n	800dde2 <find_volume+0x342>
 800ddde:	230d      	movs	r3, #13
 800dde0:	e0a8      	b.n	800df34 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde4:	891b      	ldrh	r3, [r3, #8]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <find_volume+0x34e>
 800ddea:	230d      	movs	r3, #13
 800ddec:	e0a2      	b.n	800df34 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	3334      	adds	r3, #52	; 0x34
 800ddf2:	332c      	adds	r3, #44	; 0x2c
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe fc1b 	bl	800c630 <ld_dword>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800de00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de02:	699b      	ldr	r3, [r3, #24]
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	647b      	str	r3, [r7, #68]	; 0x44
 800de08:	e01f      	b.n	800de4a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	891b      	ldrh	r3, [r3, #8]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <find_volume+0x376>
 800de12:	230d      	movs	r3, #13
 800de14:	e08e      	b.n	800df34 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800de16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de1c:	441a      	add	r2, r3
 800de1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de20:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800de22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de26:	2b02      	cmp	r3, #2
 800de28:	d103      	bne.n	800de32 <find_volume+0x392>
 800de2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	e00a      	b.n	800de48 <find_volume+0x3a8>
 800de32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de34:	699a      	ldr	r2, [r3, #24]
 800de36:	4613      	mov	r3, r2
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	4413      	add	r3, r2
 800de3c:	085a      	lsrs	r2, r3, #1
 800de3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de40:	699b      	ldr	r3, [r3, #24]
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800de48:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800de4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4c:	69da      	ldr	r2, [r3, #28]
 800de4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800de54:	0a5b      	lsrs	r3, r3, #9
 800de56:	429a      	cmp	r2, r3
 800de58:	d201      	bcs.n	800de5e <find_volume+0x3be>
 800de5a:	230d      	movs	r3, #13
 800de5c:	e06a      	b.n	800df34 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800de5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de60:	f04f 32ff 	mov.w	r2, #4294967295
 800de64:	615a      	str	r2, [r3, #20]
 800de66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de68:	695a      	ldr	r2, [r3, #20]
 800de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800de6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de70:	2280      	movs	r2, #128	; 0x80
 800de72:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800de74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de78:	2b03      	cmp	r3, #3
 800de7a:	d149      	bne.n	800df10 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800de7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7e:	3334      	adds	r3, #52	; 0x34
 800de80:	3330      	adds	r3, #48	; 0x30
 800de82:	4618      	mov	r0, r3
 800de84:	f7fe fbbc 	bl	800c600 <ld_word>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d140      	bne.n	800df10 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800de8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de90:	3301      	adds	r3, #1
 800de92:	4619      	mov	r1, r3
 800de94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de96:	f7fe fe95 	bl	800cbc4 <move_window>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d137      	bne.n	800df10 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800dea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea2:	2200      	movs	r2, #0
 800dea4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea8:	3334      	adds	r3, #52	; 0x34
 800deaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800deae:	4618      	mov	r0, r3
 800deb0:	f7fe fba6 	bl	800c600 <ld_word>
 800deb4:	4603      	mov	r3, r0
 800deb6:	461a      	mov	r2, r3
 800deb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800debc:	429a      	cmp	r2, r3
 800debe:	d127      	bne.n	800df10 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec2:	3334      	adds	r3, #52	; 0x34
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fe fbb3 	bl	800c630 <ld_dword>
 800deca:	4603      	mov	r3, r0
 800decc:	4a1b      	ldr	r2, [pc, #108]	; (800df3c <find_volume+0x49c>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d11e      	bne.n	800df10 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ded2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded4:	3334      	adds	r3, #52	; 0x34
 800ded6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe fba8 	bl	800c630 <ld_dword>
 800dee0:	4603      	mov	r3, r0
 800dee2:	4a17      	ldr	r2, [pc, #92]	; (800df40 <find_volume+0x4a0>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d113      	bne.n	800df10 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deea:	3334      	adds	r3, #52	; 0x34
 800deec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800def0:	4618      	mov	r0, r3
 800def2:	f7fe fb9d 	bl	800c630 <ld_dword>
 800def6:	4602      	mov	r2, r0
 800def8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defa:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800defc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defe:	3334      	adds	r3, #52	; 0x34
 800df00:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800df04:	4618      	mov	r0, r3
 800df06:	f7fe fb93 	bl	800c630 <ld_dword>
 800df0a:	4602      	mov	r2, r0
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800df10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df12:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800df16:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800df18:	4b0a      	ldr	r3, [pc, #40]	; (800df44 <find_volume+0x4a4>)
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	3301      	adds	r3, #1
 800df1e:	b29a      	uxth	r2, r3
 800df20:	4b08      	ldr	r3, [pc, #32]	; (800df44 <find_volume+0x4a4>)
 800df22:	801a      	strh	r2, [r3, #0]
 800df24:	4b07      	ldr	r3, [pc, #28]	; (800df44 <find_volume+0x4a4>)
 800df26:	881a      	ldrh	r2, [r3, #0]
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800df2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df2e:	f7fe fde1 	bl	800caf4 <clear_lock>
#endif
	return FR_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3758      	adds	r7, #88	; 0x58
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	41615252 	.word	0x41615252
 800df40:	61417272 	.word	0x61417272
 800df44:	240081d8 	.word	0x240081d8

0800df48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800df52:	2309      	movs	r3, #9
 800df54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d02e      	beq.n	800dfba <validate+0x72>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d02a      	beq.n	800dfba <validate+0x72>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d025      	beq.n	800dfba <validate+0x72>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	889a      	ldrh	r2, [r3, #4]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	88db      	ldrh	r3, [r3, #6]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d11e      	bne.n	800dfba <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4618      	mov	r0, r3
 800df82:	f7fe fc3d 	bl	800c800 <lock_fs>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d014      	beq.n	800dfb6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	785b      	ldrb	r3, [r3, #1]
 800df92:	4618      	mov	r0, r3
 800df94:	f7fe fa96 	bl	800c4c4 <disk_status>
 800df98:	4603      	mov	r3, r0
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d102      	bne.n	800dfa8 <validate+0x60>
				res = FR_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	73fb      	strb	r3, [r7, #15]
 800dfa6:	e008      	b.n	800dfba <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2100      	movs	r1, #0
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe fc3c 	bl	800c82c <unlock_fs>
 800dfb4:	e001      	b.n	800dfba <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800dfb6:	230f      	movs	r3, #15
 800dfb8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dfba:	7bfb      	ldrb	r3, [r7, #15]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d102      	bne.n	800dfc6 <validate+0x7e>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	e000      	b.n	800dfc8 <validate+0x80>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	6013      	str	r3, [r2, #0]
	return res;
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
	...

0800dfd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b088      	sub	sp, #32
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800dfea:	f107 0310 	add.w	r3, r7, #16
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff fcbb 	bl	800d96a <get_ldnumber>
 800dff4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	da01      	bge.n	800e000 <f_mount+0x28>
 800dffc:	230b      	movs	r3, #11
 800dffe:	e048      	b.n	800e092 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e000:	4a26      	ldr	r2, [pc, #152]	; (800e09c <f_mount+0xc4>)
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e008:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00f      	beq.n	800e030 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e010:	69b8      	ldr	r0, [r7, #24]
 800e012:	f7fe fd6f 	bl	800caf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f001 f904 	bl	800f228 <ff_del_syncobj>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d101      	bne.n	800e02a <f_mount+0x52>
 800e026:	2302      	movs	r3, #2
 800e028:	e033      	b.n	800e092 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	2200      	movs	r2, #0
 800e02e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00f      	beq.n	800e056 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2200      	movs	r2, #0
 800e03a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	330c      	adds	r3, #12
 800e044:	4619      	mov	r1, r3
 800e046:	4610      	mov	r0, r2
 800e048:	f001 f8d3 	bl	800f1f2 <ff_cre_syncobj>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <f_mount+0x7e>
 800e052:	2302      	movs	r3, #2
 800e054:	e01d      	b.n	800e092 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	4910      	ldr	r1, [pc, #64]	; (800e09c <f_mount+0xc4>)
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d002      	beq.n	800e06c <f_mount+0x94>
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d001      	beq.n	800e070 <f_mount+0x98>
 800e06c:	2300      	movs	r3, #0
 800e06e:	e010      	b.n	800e092 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e070:	f107 010c 	add.w	r1, r7, #12
 800e074:	f107 0308 	add.w	r3, r7, #8
 800e078:	2200      	movs	r2, #0
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7ff fd10 	bl	800daa0 <find_volume>
 800e080:	4603      	mov	r3, r0
 800e082:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	7dfa      	ldrb	r2, [r7, #23]
 800e088:	4611      	mov	r1, r2
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe fbce 	bl	800c82c <unlock_fs>
 800e090:	7dfb      	ldrb	r3, [r7, #23]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3720      	adds	r7, #32
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	240081d4 	.word	0x240081d4

0800e0a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b098      	sub	sp, #96	; 0x60
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <f_open+0x18>
 800e0b4:	2309      	movs	r3, #9
 800e0b6:	e1b4      	b.n	800e422 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e0b8:	79fb      	ldrb	r3, [r7, #7]
 800e0ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e0c0:	79fa      	ldrb	r2, [r7, #7]
 800e0c2:	f107 0110 	add.w	r1, r7, #16
 800e0c6:	f107 0308 	add.w	r3, r7, #8
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7ff fce8 	bl	800daa0 <find_volume>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e0d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f040 8191 	bne.w	800e402 <f_open+0x362>
		dj.obj.fs = fs;
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	f107 0314 	add.w	r3, r7, #20
 800e0ea:	4611      	mov	r1, r2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7ff fbcb 	bl	800d888 <follow_path>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e0f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d11a      	bne.n	800e136 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e100:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e104:	b25b      	sxtb	r3, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	da03      	bge.n	800e112 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e10a:	2306      	movs	r3, #6
 800e10c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e110:	e011      	b.n	800e136 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e112:	79fb      	ldrb	r3, [r7, #7]
 800e114:	f023 0301 	bic.w	r3, r3, #1
 800e118:	2b00      	cmp	r3, #0
 800e11a:	bf14      	ite	ne
 800e11c:	2301      	movne	r3, #1
 800e11e:	2300      	moveq	r3, #0
 800e120:	b2db      	uxtb	r3, r3
 800e122:	461a      	mov	r2, r3
 800e124:	f107 0314 	add.w	r3, r7, #20
 800e128:	4611      	mov	r1, r2
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fe fb9a 	bl	800c864 <chk_lock>
 800e130:	4603      	mov	r3, r0
 800e132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e136:	79fb      	ldrb	r3, [r7, #7]
 800e138:	f003 031c 	and.w	r3, r3, #28
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d07f      	beq.n	800e240 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e144:	2b00      	cmp	r3, #0
 800e146:	d017      	beq.n	800e178 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e14c:	2b04      	cmp	r3, #4
 800e14e:	d10e      	bne.n	800e16e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e150:	f7fe fbe4 	bl	800c91c <enq_lock>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d006      	beq.n	800e168 <f_open+0xc8>
 800e15a:	f107 0314 	add.w	r3, r7, #20
 800e15e:	4618      	mov	r0, r3
 800e160:	f7ff facb 	bl	800d6fa <dir_register>
 800e164:	4603      	mov	r3, r0
 800e166:	e000      	b.n	800e16a <f_open+0xca>
 800e168:	2312      	movs	r3, #18
 800e16a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	f043 0308 	orr.w	r3, r3, #8
 800e174:	71fb      	strb	r3, [r7, #7]
 800e176:	e010      	b.n	800e19a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e178:	7ebb      	ldrb	r3, [r7, #26]
 800e17a:	f003 0311 	and.w	r3, r3, #17
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d003      	beq.n	800e18a <f_open+0xea>
					res = FR_DENIED;
 800e182:	2307      	movs	r3, #7
 800e184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e188:	e007      	b.n	800e19a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e18a:	79fb      	ldrb	r3, [r7, #7]
 800e18c:	f003 0304 	and.w	r3, r3, #4
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <f_open+0xfa>
 800e194:	2308      	movs	r3, #8
 800e196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e19a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d168      	bne.n	800e274 <f_open+0x1d4>
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	f003 0308 	and.w	r3, r3, #8
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d063      	beq.n	800e274 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e1ac:	f7fd ff34 	bl	800c018 <get_fattime>
 800e1b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b4:	330e      	adds	r3, #14
 800e1b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fe fa77 	bl	800c6ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c0:	3316      	adds	r3, #22
 800e1c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe fa71 	bl	800c6ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1cc:	330b      	adds	r3, #11
 800e1ce:	2220      	movs	r2, #32
 800e1d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff f9fa 	bl	800d5d2 <ld_clust>
 800e1de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7ff fa12 	bl	800d610 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ee:	331c      	adds	r3, #28
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe fa5a 	bl	800c6ac <st_dword>
					fs->wflag = 1;
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e200:	2b00      	cmp	r3, #0
 800e202:	d037      	beq.n	800e274 <f_open+0x1d4>
						dw = fs->winsect;
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e208:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e20a:	f107 0314 	add.w	r3, r7, #20
 800e20e:	2200      	movs	r2, #0
 800e210:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e212:	4618      	mov	r0, r3
 800e214:	f7fe ff25 	bl	800d062 <remove_chain>
 800e218:	4603      	mov	r3, r0
 800e21a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e21e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e222:	2b00      	cmp	r3, #0
 800e224:	d126      	bne.n	800e274 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fe fcca 	bl	800cbc4 <move_window>
 800e230:	4603      	mov	r3, r0
 800e232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e23a:	3a01      	subs	r2, #1
 800e23c:	611a      	str	r2, [r3, #16]
 800e23e:	e019      	b.n	800e274 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e244:	2b00      	cmp	r3, #0
 800e246:	d115      	bne.n	800e274 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e248:	7ebb      	ldrb	r3, [r7, #26]
 800e24a:	f003 0310 	and.w	r3, r3, #16
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <f_open+0x1ba>
					res = FR_NO_FILE;
 800e252:	2304      	movs	r3, #4
 800e254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e258:	e00c      	b.n	800e274 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	f003 0302 	and.w	r3, r3, #2
 800e260:	2b00      	cmp	r3, #0
 800e262:	d007      	beq.n	800e274 <f_open+0x1d4>
 800e264:	7ebb      	ldrb	r3, [r7, #26]
 800e266:	f003 0301 	and.w	r3, r3, #1
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <f_open+0x1d4>
						res = FR_DENIED;
 800e26e:	2307      	movs	r3, #7
 800e270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d128      	bne.n	800e2ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e27c:	79fb      	ldrb	r3, [r7, #7]
 800e27e:	f003 0308 	and.w	r3, r3, #8
 800e282:	2b00      	cmp	r3, #0
 800e284:	d003      	beq.n	800e28e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e286:	79fb      	ldrb	r3, [r7, #7]
 800e288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e28c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e29c:	79fb      	ldrb	r3, [r7, #7]
 800e29e:	f023 0301 	bic.w	r3, r3, #1
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	bf14      	ite	ne
 800e2a6:	2301      	movne	r3, #1
 800e2a8:	2300      	moveq	r3, #0
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	f107 0314 	add.w	r3, r7, #20
 800e2b2:	4611      	mov	r1, r2
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fe fb53 	bl	800c960 <inc_lock>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d102      	bne.n	800e2ce <f_open+0x22e>
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e2ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f040 8095 	bne.w	800e402 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2dc:	4611      	mov	r1, r2
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff f977 	bl	800d5d2 <ld_clust>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ec:	331c      	adds	r3, #28
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe f99e 	bl	800c630 <ld_dword>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	88da      	ldrh	r2, [r3, #6]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	79fa      	ldrb	r2, [r7, #7]
 800e312:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2200      	movs	r2, #0
 800e324:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	3330      	adds	r3, #48	; 0x30
 800e32a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e32e:	2100      	movs	r1, #0
 800e330:	4618      	mov	r0, r3
 800e332:	f7fe fa08 	bl	800c746 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e336:	79fb      	ldrb	r3, [r7, #7]
 800e338:	f003 0320 	and.w	r3, r3, #32
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d060      	beq.n	800e402 <f_open+0x362>
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d05c      	beq.n	800e402 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	68da      	ldr	r2, [r3, #12]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	895b      	ldrh	r3, [r3, #10]
 800e354:	025b      	lsls	r3, r3, #9
 800e356:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	657b      	str	r3, [r7, #84]	; 0x54
 800e364:	e016      	b.n	800e394 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fe fce5 	bl	800cd3a <get_fat>
 800e370:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e374:	2b01      	cmp	r3, #1
 800e376:	d802      	bhi.n	800e37e <f_open+0x2de>
 800e378:	2302      	movs	r3, #2
 800e37a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e37e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e384:	d102      	bne.n	800e38c <f_open+0x2ec>
 800e386:	2301      	movs	r3, #1
 800e388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e38c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	657b      	str	r3, [r7, #84]	; 0x54
 800e394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d103      	bne.n	800e3a4 <f_open+0x304>
 800e39c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d8e0      	bhi.n	800e366 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e3aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d127      	bne.n	800e402 <f_open+0x362>
 800e3b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d022      	beq.n	800e402 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fe fc9b 	bl	800ccfc <clust2sect>
 800e3c6:	6478      	str	r0, [r7, #68]	; 0x44
 800e3c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d103      	bne.n	800e3d6 <f_open+0x336>
						res = FR_INT_ERR;
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e3d4:	e015      	b.n	800e402 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3d8:	0a5a      	lsrs	r2, r3, #9
 800e3da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3dc:	441a      	add	r2, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	7858      	ldrb	r0, [r3, #1]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6a1a      	ldr	r2, [r3, #32]
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	f7fe f8a7 	bl	800c544 <disk_read>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <f_open+0x362>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e406:	2b00      	cmp	r3, #0
 800e408:	d002      	beq.n	800e410 <f_open+0x370>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800e416:	4611      	mov	r1, r2
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fe fa07 	bl	800c82c <unlock_fs>
 800e41e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e422:	4618      	mov	r0, r3
 800e424:	3760      	adds	r7, #96	; 0x60
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b08c      	sub	sp, #48	; 0x30
 800e42e:	af00      	add	r7, sp, #0
 800e430:	60f8      	str	r0, [r7, #12]
 800e432:	60b9      	str	r1, [r7, #8]
 800e434:	607a      	str	r2, [r7, #4]
 800e436:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	2200      	movs	r2, #0
 800e440:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f107 0210 	add.w	r2, r7, #16
 800e448:	4611      	mov	r1, r2
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7ff fd7c 	bl	800df48 <validate>
 800e450:	4603      	mov	r3, r0
 800e452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d107      	bne.n	800e46e <f_write+0x44>
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	7d5b      	ldrb	r3, [r3, #21]
 800e462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d009      	beq.n	800e482 <f_write+0x58>
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e474:	4611      	mov	r1, r2
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe f9d8 	bl	800c82c <unlock_fs>
 800e47c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e480:	e173      	b.n	800e76a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	7d1b      	ldrb	r3, [r3, #20]
 800e486:	f003 0302 	and.w	r3, r3, #2
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <f_write+0x72>
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	2107      	movs	r1, #7
 800e492:	4618      	mov	r0, r3
 800e494:	f7fe f9ca 	bl	800c82c <unlock_fs>
 800e498:	2307      	movs	r3, #7
 800e49a:	e166      	b.n	800e76a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	699a      	ldr	r2, [r3, #24]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	441a      	add	r2, r3
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	699b      	ldr	r3, [r3, #24]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	f080 814b 	bcs.w	800e744 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	43db      	mvns	r3, r3
 800e4b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e4b6:	e145      	b.n	800e744 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f040 8101 	bne.w	800e6c8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	699b      	ldr	r3, [r3, #24]
 800e4ca:	0a5b      	lsrs	r3, r3, #9
 800e4cc:	693a      	ldr	r2, [r7, #16]
 800e4ce:	8952      	ldrh	r2, [r2, #10]
 800e4d0:	3a01      	subs	r2, #1
 800e4d2:	4013      	ands	r3, r2
 800e4d4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d14d      	bne.n	800e578 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	699b      	ldr	r3, [r3, #24]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d10c      	bne.n	800e4fe <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d11a      	bne.n	800e526 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe fe19 	bl	800d12c <create_chain>
 800e4fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800e4fc:	e013      	b.n	800e526 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e502:	2b00      	cmp	r3, #0
 800e504:	d007      	beq.n	800e516 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	699b      	ldr	r3, [r3, #24]
 800e50a:	4619      	mov	r1, r3
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7fe fea5 	bl	800d25c <clmt_clust>
 800e512:	62b8      	str	r0, [r7, #40]	; 0x28
 800e514:	e007      	b.n	800e526 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	69db      	ldr	r3, [r3, #28]
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	f7fe fe04 	bl	800d12c <create_chain>
 800e524:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f000 8110 	beq.w	800e74e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	2b01      	cmp	r3, #1
 800e532:	d109      	bne.n	800e548 <f_write+0x11e>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2202      	movs	r2, #2
 800e538:	755a      	strb	r2, [r3, #21]
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2102      	movs	r1, #2
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fe f974 	bl	800c82c <unlock_fs>
 800e544:	2302      	movs	r3, #2
 800e546:	e110      	b.n	800e76a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54e:	d109      	bne.n	800e564 <f_write+0x13a>
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2201      	movs	r2, #1
 800e554:	755a      	strb	r2, [r3, #21]
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	2101      	movs	r1, #1
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe f966 	bl	800c82c <unlock_fs>
 800e560:	2301      	movs	r3, #1
 800e562:	e102      	b.n	800e76a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e568:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d102      	bne.n	800e578 <f_write+0x14e>
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e576:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	7d1b      	ldrb	r3, [r3, #20]
 800e57c:	b25b      	sxtb	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	da1d      	bge.n	800e5be <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	7858      	ldrb	r0, [r3, #1]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6a1a      	ldr	r2, [r3, #32]
 800e590:	2301      	movs	r3, #1
 800e592:	f7fd fff7 	bl	800c584 <disk_write>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d009      	beq.n	800e5b0 <f_write+0x186>
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	755a      	strb	r2, [r3, #21]
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	2101      	movs	r1, #1
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fe f940 	bl	800c82c <unlock_fs>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e0dc      	b.n	800e76a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	7d1b      	ldrb	r3, [r3, #20]
 800e5b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e5be:	693a      	ldr	r2, [r7, #16]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	69db      	ldr	r3, [r3, #28]
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	4610      	mov	r0, r2
 800e5c8:	f7fe fb98 	bl	800ccfc <clust2sect>
 800e5cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d109      	bne.n	800e5e8 <f_write+0x1be>
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	755a      	strb	r2, [r3, #21]
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	2102      	movs	r1, #2
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe f924 	bl	800c82c <unlock_fs>
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	e0c0      	b.n	800e76a <f_write+0x340>
			sect += csect;
 800e5e8:	697a      	ldr	r2, [r7, #20]
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	0a5b      	lsrs	r3, r3, #9
 800e5f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d041      	beq.n	800e680 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e5fc:	69ba      	ldr	r2, [r7, #24]
 800e5fe:	6a3b      	ldr	r3, [r7, #32]
 800e600:	4413      	add	r3, r2
 800e602:	693a      	ldr	r2, [r7, #16]
 800e604:	8952      	ldrh	r2, [r2, #10]
 800e606:	4293      	cmp	r3, r2
 800e608:	d905      	bls.n	800e616 <f_write+0x1ec>
					cc = fs->csize - csect;
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	895b      	ldrh	r3, [r3, #10]
 800e60e:	461a      	mov	r2, r3
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	7858      	ldrb	r0, [r3, #1]
 800e61a:	6a3b      	ldr	r3, [r7, #32]
 800e61c:	697a      	ldr	r2, [r7, #20]
 800e61e:	69f9      	ldr	r1, [r7, #28]
 800e620:	f7fd ffb0 	bl	800c584 <disk_write>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d009      	beq.n	800e63e <f_write+0x214>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2201      	movs	r2, #1
 800e62e:	755a      	strb	r2, [r3, #21]
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	2101      	movs	r1, #1
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe f8f9 	bl	800c82c <unlock_fs>
 800e63a:	2301      	movs	r3, #1
 800e63c:	e095      	b.n	800e76a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6a1a      	ldr	r2, [r3, #32]
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	6a3a      	ldr	r2, [r7, #32]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d915      	bls.n	800e678 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6a1a      	ldr	r2, [r3, #32]
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	025b      	lsls	r3, r3, #9
 800e65c:	69fa      	ldr	r2, [r7, #28]
 800e65e:	4413      	add	r3, r2
 800e660:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e664:	4619      	mov	r1, r3
 800e666:	f7fe f84d 	bl	800c704 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	7d1b      	ldrb	r3, [r3, #20]
 800e66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e672:	b2da      	uxtb	r2, r3
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e678:	6a3b      	ldr	r3, [r7, #32]
 800e67a:	025b      	lsls	r3, r3, #9
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e67e:	e044      	b.n	800e70a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6a1b      	ldr	r3, [r3, #32]
 800e684:	697a      	ldr	r2, [r7, #20]
 800e686:	429a      	cmp	r2, r3
 800e688:	d01b      	beq.n	800e6c2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	699a      	ldr	r2, [r3, #24]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e692:	429a      	cmp	r2, r3
 800e694:	d215      	bcs.n	800e6c2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	7858      	ldrb	r0, [r3, #1]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	697a      	ldr	r2, [r7, #20]
 800e6a4:	f7fd ff4e 	bl	800c544 <disk_read>
 800e6a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d009      	beq.n	800e6c2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	755a      	strb	r2, [r3, #21]
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	2101      	movs	r1, #1
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe f8b7 	bl	800c82c <unlock_fs>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e053      	b.n	800e76a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	697a      	ldr	r2, [r7, #20]
 800e6c6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	699b      	ldr	r3, [r3, #24]
 800e6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e6d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d901      	bls.n	800e6e2 <f_write+0x2b8>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6f0:	4413      	add	r3, r2
 800e6f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6f4:	69f9      	ldr	r1, [r7, #28]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fe f804 	bl	800c704 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	7d1b      	ldrb	r3, [r3, #20]
 800e700:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e704:	b2da      	uxtb	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e70a:	69fa      	ldr	r2, [r7, #28]
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	4413      	add	r3, r2
 800e710:	61fb      	str	r3, [r7, #28]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	699a      	ldr	r2, [r3, #24]
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	441a      	add	r2, r3
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	619a      	str	r2, [r3, #24]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	68da      	ldr	r2, [r3, #12]
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	699b      	ldr	r3, [r3, #24]
 800e726:	429a      	cmp	r2, r3
 800e728:	bf38      	it	cc
 800e72a:	461a      	movcc	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	60da      	str	r2, [r3, #12]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	441a      	add	r2, r3
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	601a      	str	r2, [r3, #0]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	f47f aeb6 	bne.w	800e4b8 <f_write+0x8e>
 800e74c:	e000      	b.n	800e750 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e74e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	7d1b      	ldrb	r3, [r3, #20]
 800e754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	2100      	movs	r1, #0
 800e762:	4618      	mov	r0, r3
 800e764:	f7fe f862 	bl	800c82c <unlock_fs>
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3730      	adds	r7, #48	; 0x30
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b086      	sub	sp, #24
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f107 0208 	add.w	r2, r7, #8
 800e780:	4611      	mov	r1, r2
 800e782:	4618      	mov	r0, r3
 800e784:	f7ff fbe0 	bl	800df48 <validate>
 800e788:	4603      	mov	r3, r0
 800e78a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e78c:	7dfb      	ldrb	r3, [r7, #23]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d16d      	bne.n	800e86e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	7d1b      	ldrb	r3, [r3, #20]
 800e796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d067      	beq.n	800e86e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	7d1b      	ldrb	r3, [r3, #20]
 800e7a2:	b25b      	sxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	da1a      	bge.n	800e7de <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	7858      	ldrb	r0, [r3, #1]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a1a      	ldr	r2, [r3, #32]
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	f7fd fee4 	bl	800c584 <disk_write>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d006      	beq.n	800e7d0 <f_sync+0x5e>
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	2101      	movs	r1, #1
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7fe f830 	bl	800c82c <unlock_fs>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e055      	b.n	800e87c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	7d1b      	ldrb	r3, [r3, #20]
 800e7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7d8:	b2da      	uxtb	r2, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e7de:	f7fd fc1b 	bl	800c018 <get_fattime>
 800e7e2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	f7fe f9e9 	bl	800cbc4 <move_window>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e7f6:	7dfb      	ldrb	r3, [r7, #23]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d138      	bne.n	800e86e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e800:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	330b      	adds	r3, #11
 800e806:	781a      	ldrb	r2, [r3, #0]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	330b      	adds	r3, #11
 800e80c:	f042 0220 	orr.w	r2, r2, #32
 800e810:	b2d2      	uxtb	r2, r2
 800e812:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6818      	ldr	r0, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	461a      	mov	r2, r3
 800e81e:	68f9      	ldr	r1, [r7, #12]
 800e820:	f7fe fef6 	bl	800d610 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f103 021c 	add.w	r2, r3, #28
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	4619      	mov	r1, r3
 800e830:	4610      	mov	r0, r2
 800e832:	f7fd ff3b 	bl	800c6ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3316      	adds	r3, #22
 800e83a:	6939      	ldr	r1, [r7, #16]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fd ff35 	bl	800c6ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	3312      	adds	r3, #18
 800e846:	2100      	movs	r1, #0
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fd ff14 	bl	800c676 <st_word>
					fs->wflag = 1;
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	2201      	movs	r2, #1
 800e852:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe f9e2 	bl	800cc20 <sync_fs>
 800e85c:	4603      	mov	r3, r0
 800e85e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	7d1b      	ldrb	r3, [r3, #20]
 800e864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	7dfa      	ldrb	r2, [r7, #23]
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f7fd ffd9 	bl	800c82c <unlock_fs>
 800e87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f7ff ff70 	bl	800e772 <f_sync>
 800e892:	4603      	mov	r3, r0
 800e894:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e896:	7bfb      	ldrb	r3, [r7, #15]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d11d      	bne.n	800e8d8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f107 0208 	add.w	r2, r7, #8
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7ff fb4f 	bl	800df48 <validate>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e8ae:	7bfb      	ldrb	r3, [r7, #15]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d111      	bne.n	800e8d8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe f8df 	bl	800ca7c <dec_lock>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d102      	bne.n	800e8ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fd ffaa 	bl	800c82c <unlock_fs>
#endif
		}
	}
	return res;
 800e8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
	...

0800e8e4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800e8e4:	b590      	push	{r4, r7, lr}
 800e8e6:	b09d      	sub	sp, #116	; 0x74
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	607a      	str	r2, [r7, #4]
 800e8ee:	603b      	str	r3, [r7, #0]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800e8f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8fc:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e8fe:	f107 030c 	add.w	r3, r7, #12
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff f831 	bl	800d96a <get_ldnumber>
 800e908:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	da02      	bge.n	800e916 <f_mkfs+0x32>
 800e910:	230b      	movs	r3, #11
 800e912:	f000 bc0d 	b.w	800f130 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800e916:	4a94      	ldr	r2, [pc, #592]	; (800eb68 <f_mkfs+0x284>)
 800e918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d005      	beq.n	800e92e <f_mkfs+0x4a>
 800e922:	4a91      	ldr	r2, [pc, #580]	; (800eb68 <f_mkfs+0x284>)
 800e924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e92a:	2200      	movs	r2, #0
 800e92c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800e92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e930:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800e934:	2300      	movs	r3, #0
 800e936:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800e93a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e93e:	4618      	mov	r0, r3
 800e940:	f7fd fdda 	bl	800c4f8 <disk_initialize>
 800e944:	4603      	mov	r3, r0
 800e946:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800e94a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	2b00      	cmp	r3, #0
 800e954:	d001      	beq.n	800e95a <f_mkfs+0x76>
 800e956:	2303      	movs	r3, #3
 800e958:	e3ea      	b.n	800f130 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e95a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e95e:	f003 0304 	and.w	r3, r3, #4
 800e962:	2b00      	cmp	r3, #0
 800e964:	d001      	beq.n	800e96a <f_mkfs+0x86>
 800e966:	230a      	movs	r3, #10
 800e968:	e3e2      	b.n	800f130 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800e96a:	f107 0214 	add.w	r2, r7, #20
 800e96e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e972:	2103      	movs	r1, #3
 800e974:	4618      	mov	r0, r3
 800e976:	f7fd fe25 	bl	800c5c4 <disk_ioctl>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10c      	bne.n	800e99a <f_mkfs+0xb6>
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d009      	beq.n	800e99a <f_mkfs+0xb6>
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e98c:	d805      	bhi.n	800e99a <f_mkfs+0xb6>
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	1e5a      	subs	r2, r3, #1
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	4013      	ands	r3, r2
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <f_mkfs+0xba>
 800e99a:	2301      	movs	r3, #1
 800e99c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800e99e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9a2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d003      	beq.n	800e9b2 <f_mkfs+0xce>
 800e9aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d309      	bcc.n	800e9c6 <f_mkfs+0xe2>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e9b8:	d805      	bhi.n	800e9c6 <f_mkfs+0xe2>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	1e5a      	subs	r2, r3, #1
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4013      	ands	r3, r2
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d001      	beq.n	800e9ca <f_mkfs+0xe6>
 800e9c6:	2313      	movs	r3, #19
 800e9c8:	e3b2      	b.n	800f130 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800e9ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9d2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800e9d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800e9e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	fb02 f303 	mul.w	r3, r2, r3
 800e9ec:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800e9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d101      	bne.n	800e9f8 <f_mkfs+0x114>
 800e9f4:	230e      	movs	r3, #14
 800e9f6:	e39b      	b.n	800f130 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800e9f8:	f107 0210 	add.w	r2, r7, #16
 800e9fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ea00:	2101      	movs	r1, #1
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fd fdde 	bl	800c5c4 <disk_ioctl>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d001      	beq.n	800ea12 <f_mkfs+0x12e>
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e38e      	b.n	800f130 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800ea12:	7afb      	ldrb	r3, [r7, #11]
 800ea14:	f003 0308 	and.w	r3, r3, #8
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <f_mkfs+0x13c>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	e000      	b.n	800ea22 <f_mkfs+0x13e>
 800ea20:	233f      	movs	r3, #63	; 0x3f
 800ea22:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d901      	bls.n	800ea30 <f_mkfs+0x14c>
 800ea2c:	230e      	movs	r3, #14
 800ea2e:	e37f      	b.n	800f130 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800ea30:	693a      	ldr	r2, [r7, #16]
 800ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	2b7f      	cmp	r3, #127	; 0x7f
 800ea3c:	d801      	bhi.n	800ea42 <f_mkfs+0x15e>
 800ea3e:	230e      	movs	r3, #14
 800ea40:	e376      	b.n	800f130 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2b80      	cmp	r3, #128	; 0x80
 800ea46:	d901      	bls.n	800ea4c <f_mkfs+0x168>
 800ea48:	2313      	movs	r3, #19
 800ea4a:	e371      	b.n	800f130 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800ea4c:	7afb      	ldrb	r3, [r7, #11]
 800ea4e:	f003 0302 	and.w	r3, r3, #2
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00d      	beq.n	800ea72 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800ea56:	7afb      	ldrb	r3, [r7, #11]
 800ea58:	f003 0307 	and.w	r3, r3, #7
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d004      	beq.n	800ea6a <f_mkfs+0x186>
 800ea60:	7afb      	ldrb	r3, [r7, #11]
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d103      	bne.n	800ea72 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ea70:	e009      	b.n	800ea86 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800ea72:	7afb      	ldrb	r3, [r7, #11]
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d101      	bne.n	800ea80 <f_mkfs+0x19c>
 800ea7c:	2313      	movs	r3, #19
 800ea7e:	e357      	b.n	800f130 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800ea80:	2302      	movs	r3, #2
 800ea82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800ea8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ea8e:	2b03      	cmp	r3, #3
 800ea90:	d13c      	bne.n	800eb0c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800ea92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d11b      	bne.n	800ead0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	0c5b      	lsrs	r3, r3, #17
 800ea9c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	64bb      	str	r3, [r7, #72]	; 0x48
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	653b      	str	r3, [r7, #80]	; 0x50
 800eaa6:	e005      	b.n	800eab4 <f_mkfs+0x1d0>
 800eaa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaaa:	3301      	adds	r3, #1
 800eaac:	64bb      	str	r3, [r7, #72]	; 0x48
 800eaae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	653b      	str	r3, [r7, #80]	; 0x50
 800eab4:	4a2d      	ldr	r2, [pc, #180]	; (800eb6c <f_mkfs+0x288>)
 800eab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d007      	beq.n	800ead0 <f_mkfs+0x1ec>
 800eac0:	4a2a      	ldr	r2, [pc, #168]	; (800eb6c <f_mkfs+0x288>)
 800eac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eac8:	461a      	mov	r2, r3
 800eaca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eacc:	4293      	cmp	r3, r2
 800eace:	d2eb      	bcs.n	800eaa8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800ead0:	693a      	ldr	r2, [r7, #16]
 800ead2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ead8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	3302      	adds	r3, #2
 800eade:	009a      	lsls	r2, r3, #2
 800eae0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eae2:	4413      	add	r3, r2
 800eae4:	1e5a      	subs	r2, r3, #1
 800eae6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eae8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaec:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800eaee:	2320      	movs	r3, #32
 800eaf0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800eaf6:	6a3b      	ldr	r3, [r7, #32]
 800eaf8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d903      	bls.n	800eb08 <f_mkfs+0x224>
 800eb00:	6a3b      	ldr	r3, [r7, #32]
 800eb02:	4a1b      	ldr	r2, [pc, #108]	; (800eb70 <f_mkfs+0x28c>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d952      	bls.n	800ebae <f_mkfs+0x2ca>
 800eb08:	230e      	movs	r3, #14
 800eb0a:	e311      	b.n	800f130 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800eb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d11b      	bne.n	800eb4a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	0b1b      	lsrs	r3, r3, #12
 800eb16:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800eb18:	2300      	movs	r3, #0
 800eb1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	653b      	str	r3, [r7, #80]	; 0x50
 800eb20:	e005      	b.n	800eb2e <f_mkfs+0x24a>
 800eb22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb24:	3301      	adds	r3, #1
 800eb26:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb2a:	005b      	lsls	r3, r3, #1
 800eb2c:	653b      	str	r3, [r7, #80]	; 0x50
 800eb2e:	4a11      	ldr	r2, [pc, #68]	; (800eb74 <f_mkfs+0x290>)
 800eb30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d007      	beq.n	800eb4a <f_mkfs+0x266>
 800eb3a:	4a0e      	ldr	r2, [pc, #56]	; (800eb74 <f_mkfs+0x290>)
 800eb3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb42:	461a      	mov	r2, r3
 800eb44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d2eb      	bcs.n	800eb22 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb52:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800eb54:	6a3b      	ldr	r3, [r7, #32]
 800eb56:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d90c      	bls.n	800eb78 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800eb5e:	6a3b      	ldr	r3, [r7, #32]
 800eb60:	3302      	adds	r3, #2
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb66:	e012      	b.n	800eb8e <f_mkfs+0x2aa>
 800eb68:	240081d4 	.word	0x240081d4
 800eb6c:	08013a28 	.word	0x08013a28
 800eb70:	0ffffff5 	.word	0x0ffffff5
 800eb74:	08013a38 	.word	0x08013a38
				} else {
					fmt = FS_FAT12;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800eb7e:	6a3a      	ldr	r2, [r7, #32]
 800eb80:	4613      	mov	r3, r2
 800eb82:	005b      	lsls	r3, r3, #1
 800eb84:	4413      	add	r3, r2
 800eb86:	3301      	adds	r3, #1
 800eb88:	085b      	lsrs	r3, r3, #1
 800eb8a:	3303      	adds	r3, #3
 800eb8c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800eb8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb92:	4413      	add	r3, r2
 800eb94:	1e5a      	subs	r2, r3, #1
 800eb96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb98:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb9c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800eb9e:	2301      	movs	r3, #1
 800eba0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800eba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eba4:	015a      	lsls	r2, r3, #5
 800eba6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eba8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebac:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ebae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebb2:	4413      	add	r3, r2
 800ebb4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ebb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebba:	fb02 f203 	mul.w	r2, r2, r3
 800ebbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebc0:	4413      	add	r3, r2
 800ebc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ebc4:	4413      	add	r3, r2
 800ebc6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ebc8:	697a      	ldr	r2, [r7, #20]
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	4413      	add	r3, r2
 800ebce:	1e5a      	subs	r2, r3, #1
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	425b      	negs	r3, r3
 800ebd4:	401a      	ands	r2, r3
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ebdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ebe0:	2b03      	cmp	r3, #3
 800ebe2:	d108      	bne.n	800ebf6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ebe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ebe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebe8:	4413      	add	r3, r2
 800ebea:	657b      	str	r3, [r7, #84]	; 0x54
 800ebec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebf0:	4413      	add	r3, r2
 800ebf2:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebf4:	e006      	b.n	800ec04 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ebf6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ebf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec00:	4413      	add	r3, r2
 800ec02:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ec04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec06:	011a      	lsls	r2, r3, #4
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	441a      	add	r2, r3
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	1ad2      	subs	r2, r2, r3
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d901      	bls.n	800ec1a <f_mkfs+0x336>
 800ec16:	230e      	movs	r3, #14
 800ec18:	e28a      	b.n	800f130 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800ec1a:	693a      	ldr	r2, [r7, #16]
 800ec1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec1e:	1ad2      	subs	r2, r2, r3
 800ec20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec24:	fb01 f303 	mul.w	r3, r1, r3
 800ec28:	1ad2      	subs	r2, r2, r3
 800ec2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec2c:	1ad2      	subs	r2, r2, r3
 800ec2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec34:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800ec36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec3a:	2b03      	cmp	r3, #3
 800ec3c:	d10f      	bne.n	800ec5e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d80a      	bhi.n	800ec5e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d105      	bne.n	800ec5a <f_mkfs+0x376>
 800ec4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec50:	085b      	lsrs	r3, r3, #1
 800ec52:	607b      	str	r3, [r7, #4]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d144      	bne.n	800ece4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800ec5a:	230e      	movs	r3, #14
 800ec5c:	e268      	b.n	800f130 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800ec5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d133      	bne.n	800ecce <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ec66:	6a3b      	ldr	r3, [r7, #32]
 800ec68:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d91e      	bls.n	800ecae <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d107      	bne.n	800ec86 <f_mkfs+0x3a2>
 800ec76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec78:	005b      	lsls	r3, r3, #1
 800ec7a:	2b40      	cmp	r3, #64	; 0x40
 800ec7c:	d803      	bhi.n	800ec86 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800ec7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	607b      	str	r3, [r7, #4]
 800ec84:	e033      	b.n	800ecee <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800ec86:	7afb      	ldrb	r3, [r7, #11]
 800ec88:	f003 0302 	and.w	r3, r3, #2
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d003      	beq.n	800ec98 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800ec90:	2303      	movs	r3, #3
 800ec92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ec96:	e02a      	b.n	800ecee <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d105      	bne.n	800ecaa <f_mkfs+0x3c6>
 800ec9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	607b      	str	r3, [r7, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b80      	cmp	r3, #128	; 0x80
 800eca8:	d91e      	bls.n	800ece8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800ecaa:	230e      	movs	r3, #14
 800ecac:	e240      	b.n	800f130 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800ecae:	6a3b      	ldr	r3, [r7, #32]
 800ecb0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d80a      	bhi.n	800ecce <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d105      	bne.n	800ecca <f_mkfs+0x3e6>
 800ecbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecc0:	005b      	lsls	r3, r3, #1
 800ecc2:	607b      	str	r3, [r7, #4]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b80      	cmp	r3, #128	; 0x80
 800ecc8:	d910      	bls.n	800ecec <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800ecca:	230e      	movs	r3, #14
 800eccc:	e230      	b.n	800f130 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800ecce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d10c      	bne.n	800ecf0 <f_mkfs+0x40c>
 800ecd6:	6a3b      	ldr	r3, [r7, #32]
 800ecd8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d907      	bls.n	800ecf0 <f_mkfs+0x40c>
 800ece0:	230e      	movs	r3, #14
 800ece2:	e225      	b.n	800f130 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ece4:	bf00      	nop
 800ece6:	e6ce      	b.n	800ea86 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ece8:	bf00      	nop
 800ecea:	e6cc      	b.n	800ea86 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ecec:	bf00      	nop
			pau = au;
 800ecee:	e6ca      	b.n	800ea86 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800ecf0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800ecf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecfa:	f7fd fd24 	bl	800c746 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800ecfe:	220b      	movs	r2, #11
 800ed00:	49bc      	ldr	r1, [pc, #752]	; (800eff4 <f_mkfs+0x710>)
 800ed02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed04:	f7fd fcfe 	bl	800c704 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800ed08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0a:	330b      	adds	r3, #11
 800ed0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ed0e:	4611      	mov	r1, r2
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fd fcb0 	bl	800c676 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	330d      	adds	r3, #13
 800ed1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed1c:	b2d2      	uxtb	r2, r2
 800ed1e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800ed20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed22:	330e      	adds	r3, #14
 800ed24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed26:	b292      	uxth	r2, r2
 800ed28:	4611      	mov	r1, r2
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fd fca3 	bl	800c676 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	3310      	adds	r3, #16
 800ed34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed36:	b2d2      	uxtb	r2, r2
 800ed38:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	f103 0211 	add.w	r2, r3, #17
 800ed40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed44:	2b03      	cmp	r3, #3
 800ed46:	d002      	beq.n	800ed4e <f_mkfs+0x46a>
 800ed48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	e000      	b.n	800ed50 <f_mkfs+0x46c>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	4619      	mov	r1, r3
 800ed52:	4610      	mov	r0, r2
 800ed54:	f7fd fc8f 	bl	800c676 <st_word>
		if (sz_vol < 0x10000) {
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed5e:	d208      	bcs.n	800ed72 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	3313      	adds	r3, #19
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	b292      	uxth	r2, r2
 800ed68:	4611      	mov	r1, r2
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fd fc83 	bl	800c676 <st_word>
 800ed70:	e006      	b.n	800ed80 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	3320      	adds	r3, #32
 800ed76:	693a      	ldr	r2, [r7, #16]
 800ed78:	4611      	mov	r1, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fd fc96 	bl	800c6ac <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	3315      	adds	r3, #21
 800ed84:	22f8      	movs	r2, #248	; 0xf8
 800ed86:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	3318      	adds	r3, #24
 800ed8c:	213f      	movs	r1, #63	; 0x3f
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fd fc71 	bl	800c676 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800ed94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed96:	331a      	adds	r3, #26
 800ed98:	21ff      	movs	r1, #255	; 0xff
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fd fc6b 	bl	800c676 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	331c      	adds	r3, #28
 800eda4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7fd fc80 	bl	800c6ac <st_dword>
		if (fmt == FS_FAT32) {
 800edac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800edb0:	2b03      	cmp	r3, #3
 800edb2:	d131      	bne.n	800ee18 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800edb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800edba:	f7fd f92d 	bl	800c018 <get_fattime>
 800edbe:	4603      	mov	r3, r0
 800edc0:	4619      	mov	r1, r3
 800edc2:	4620      	mov	r0, r4
 800edc4:	f7fd fc72 	bl	800c6ac <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800edc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edca:	3324      	adds	r3, #36	; 0x24
 800edcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fd fc6c 	bl	800c6ac <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	332c      	adds	r3, #44	; 0x2c
 800edd8:	2102      	movs	r1, #2
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fd fc66 	bl	800c6ac <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800ede0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede2:	3330      	adds	r3, #48	; 0x30
 800ede4:	2101      	movs	r1, #1
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fd fc45 	bl	800c676 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800edec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edee:	3332      	adds	r3, #50	; 0x32
 800edf0:	2106      	movs	r1, #6
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7fd fc3f 	bl	800c676 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	3340      	adds	r3, #64	; 0x40
 800edfc:	2280      	movs	r2, #128	; 0x80
 800edfe:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ee00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee02:	3342      	adds	r3, #66	; 0x42
 800ee04:	2229      	movs	r2, #41	; 0x29
 800ee06:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	3347      	adds	r3, #71	; 0x47
 800ee0c:	2213      	movs	r2, #19
 800ee0e:	497a      	ldr	r1, [pc, #488]	; (800eff8 <f_mkfs+0x714>)
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fd fc77 	bl	800c704 <mem_cpy>
 800ee16:	e020      	b.n	800ee5a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800ee18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800ee1e:	f7fd f8fb 	bl	800c018 <get_fattime>
 800ee22:	4603      	mov	r3, r0
 800ee24:	4619      	mov	r1, r3
 800ee26:	4620      	mov	r0, r4
 800ee28:	f7fd fc40 	bl	800c6ac <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ee2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2e:	3316      	adds	r3, #22
 800ee30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee32:	b292      	uxth	r2, r2
 800ee34:	4611      	mov	r1, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd fc1d 	bl	800c676 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3e:	3324      	adds	r3, #36	; 0x24
 800ee40:	2280      	movs	r2, #128	; 0x80
 800ee42:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ee44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee46:	3326      	adds	r3, #38	; 0x26
 800ee48:	2229      	movs	r2, #41	; 0x29
 800ee4a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4e:	332b      	adds	r3, #43	; 0x2b
 800ee50:	2213      	movs	r2, #19
 800ee52:	496a      	ldr	r1, [pc, #424]	; (800effc <f_mkfs+0x718>)
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fd fc55 	bl	800c704 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ee60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fd fc06 	bl	800c676 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800ee6a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ee6e:	2301      	movs	r3, #1
 800ee70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee74:	f7fd fb86 	bl	800c584 <disk_write>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d001      	beq.n	800ee82 <f_mkfs+0x59e>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e156      	b.n	800f130 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800ee82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee86:	2b03      	cmp	r3, #3
 800ee88:	d140      	bne.n	800ef0c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8c:	1d9a      	adds	r2, r3, #6
 800ee8e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ee92:	2301      	movs	r3, #1
 800ee94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee96:	f7fd fb75 	bl	800c584 <disk_write>
			mem_set(buf, 0, ss);
 800ee9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	2100      	movs	r1, #0
 800eea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eea2:	f7fd fc50 	bl	800c746 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800eea6:	4956      	ldr	r1, [pc, #344]	; (800f000 <f_mkfs+0x71c>)
 800eea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeaa:	f7fd fbff 	bl	800c6ac <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eeb4:	4953      	ldr	r1, [pc, #332]	; (800f004 <f_mkfs+0x720>)
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fd fbf8 	bl	800c6ac <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800eebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eec2:	6a3b      	ldr	r3, [r7, #32]
 800eec4:	3b01      	subs	r3, #1
 800eec6:	4619      	mov	r1, r3
 800eec8:	4610      	mov	r0, r2
 800eeca:	f7fd fbef 	bl	800c6ac <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800eed4:	2102      	movs	r1, #2
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7fd fbe8 	bl	800c6ac <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eee2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fd fbc5 	bl	800c676 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800eeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeee:	1dda      	adds	r2, r3, #7
 800eef0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800eef4:	2301      	movs	r3, #1
 800eef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eef8:	f7fd fb44 	bl	800c584 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefe:	1c5a      	adds	r2, r3, #1
 800ef00:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ef04:	2301      	movs	r3, #1
 800ef06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef08:	f7fd fb3c 	bl	800c584 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800ef0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef0e:	2100      	movs	r1, #0
 800ef10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef12:	f7fd fc18 	bl	800c746 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800ef16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef18:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef1e:	e04b      	b.n	800efb8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800ef20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef24:	2b03      	cmp	r3, #3
 800ef26:	d113      	bne.n	800ef50 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ef28:	f06f 0107 	mvn.w	r1, #7
 800ef2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef2e:	f7fd fbbd 	bl	800c6ac <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	3304      	adds	r3, #4
 800ef36:	f04f 31ff 	mov.w	r1, #4294967295
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fd fbb6 	bl	800c6ac <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	3308      	adds	r3, #8
 800ef44:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fd fbaf 	bl	800c6ac <st_dword>
 800ef4e:	e00b      	b.n	800ef68 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800ef50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d101      	bne.n	800ef5c <f_mkfs+0x678>
 800ef58:	4b2b      	ldr	r3, [pc, #172]	; (800f008 <f_mkfs+0x724>)
 800ef5a:	e001      	b.n	800ef60 <f_mkfs+0x67c>
 800ef5c:	f06f 0307 	mvn.w	r3, #7
 800ef60:	4619      	mov	r1, r3
 800ef62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef64:	f7fd fba2 	bl	800c6ac <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800ef68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ef6a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ef6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ef6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef70:	4293      	cmp	r3, r2
 800ef72:	bf28      	it	cs
 800ef74:	4613      	movcs	r3, r2
 800ef76:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ef78:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ef7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef82:	f7fd faff 	bl	800c584 <disk_write>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d001      	beq.n	800ef90 <f_mkfs+0x6ac>
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	e0cf      	b.n	800f130 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800ef90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef92:	461a      	mov	r2, r3
 800ef94:	2100      	movs	r1, #0
 800ef96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef98:	f7fd fbd5 	bl	800c746 <mem_set>
				sect += n; nsect -= n;
 800ef9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ef9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efa0:	4413      	add	r3, r2
 800efa2:	667b      	str	r3, [r7, #100]	; 0x64
 800efa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800efa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800efac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1dc      	bne.n	800ef6c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800efb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efb4:	3301      	adds	r3, #1
 800efb6:	64bb      	str	r3, [r7, #72]	; 0x48
 800efb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d3af      	bcc.n	800ef20 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800efc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efc4:	2b03      	cmp	r3, #3
 800efc6:	d101      	bne.n	800efcc <f_mkfs+0x6e8>
 800efc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efca:	e000      	b.n	800efce <f_mkfs+0x6ea>
 800efcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efce:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800efd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800efd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd4:	4293      	cmp	r3, r2
 800efd6:	bf28      	it	cs
 800efd8:	4613      	movcs	r3, r2
 800efda:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800efdc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800efe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efe2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800efe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efe6:	f7fd facd 	bl	800c584 <disk_write>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00d      	beq.n	800f00c <f_mkfs+0x728>
 800eff0:	2301      	movs	r3, #1
 800eff2:	e09d      	b.n	800f130 <f_mkfs+0x84c>
 800eff4:	080138c8 	.word	0x080138c8
 800eff8:	080138d4 	.word	0x080138d4
 800effc:	080138e8 	.word	0x080138e8
 800f000:	41615252 	.word	0x41615252
 800f004:	61417272 	.word	0x61417272
 800f008:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800f00c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f00e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f010:	4413      	add	r3, r2
 800f012:	667b      	str	r3, [r7, #100]	; 0x64
 800f014:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800f01c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1d6      	bne.n	800efd0 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f022:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f026:	2b03      	cmp	r3, #3
 800f028:	d103      	bne.n	800f032 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f02a:	230c      	movs	r3, #12
 800f02c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f030:	e010      	b.n	800f054 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f038:	d303      	bcc.n	800f042 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f03a:	2306      	movs	r3, #6
 800f03c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f040:	e008      	b.n	800f054 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f042:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f046:	2b02      	cmp	r3, #2
 800f048:	d101      	bne.n	800f04e <f_mkfs+0x76a>
 800f04a:	2304      	movs	r3, #4
 800f04c:	e000      	b.n	800f050 <f_mkfs+0x76c>
 800f04e:	2301      	movs	r3, #1
 800f050:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f054:	7afb      	ldrb	r3, [r7, #11]
 800f056:	f003 0308 	and.w	r3, r3, #8
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d15b      	bne.n	800f116 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f05e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f060:	461a      	mov	r2, r3
 800f062:	2100      	movs	r1, #0
 800f064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f066:	f7fd fb6e 	bl	800c746 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f070:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f074:	4618      	mov	r0, r3
 800f076:	f7fd fafe 	bl	800c676 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f080:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	2200      	movs	r2, #0
 800f086:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	3301      	adds	r3, #1
 800f08c:	2201      	movs	r2, #1
 800f08e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	3302      	adds	r3, #2
 800f094:	2201      	movs	r2, #1
 800f096:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	3303      	adds	r3, #3
 800f09c:	2200      	movs	r2, #0
 800f09e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f0a8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f0aa:	693a      	ldr	r2, [r7, #16]
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ae:	441a      	add	r2, r3
 800f0b0:	4b21      	ldr	r3, [pc, #132]	; (800f138 <f_mkfs+0x854>)
 800f0b2:	fba3 1302 	umull	r1, r3, r3, r2
 800f0b6:	1ad2      	subs	r2, r2, r3
 800f0b8:	0852      	lsrs	r2, r2, #1
 800f0ba:	4413      	add	r3, r2
 800f0bc:	0b5b      	lsrs	r3, r3, #13
 800f0be:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800f0c0:	69bb      	ldr	r3, [r7, #24]
 800f0c2:	3305      	adds	r3, #5
 800f0c4:	22fe      	movs	r2, #254	; 0xfe
 800f0c6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f0c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0ca:	089b      	lsrs	r3, r3, #2
 800f0cc:	b2da      	uxtb	r2, r3
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	3306      	adds	r3, #6
 800f0d2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f0d6:	b2d2      	uxtb	r2, r2
 800f0d8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	3307      	adds	r3, #7
 800f0de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0e0:	b2d2      	uxtb	r2, r2
 800f0e2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	3308      	adds	r3, #8
 800f0e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fd fade 	bl	800c6ac <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	330c      	adds	r3, #12
 800f0f4:	693a      	ldr	r2, [r7, #16]
 800f0f6:	4611      	mov	r1, r2
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fd fad7 	bl	800c6ac <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f0fe:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f102:	2301      	movs	r3, #1
 800f104:	2200      	movs	r2, #0
 800f106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f108:	f7fd fa3c 	bl	800c584 <disk_write>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <f_mkfs+0x832>
 800f112:	2301      	movs	r3, #1
 800f114:	e00c      	b.n	800f130 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800f116:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f11a:	2200      	movs	r2, #0
 800f11c:	2100      	movs	r1, #0
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fd fa50 	bl	800c5c4 <disk_ioctl>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d001      	beq.n	800f12e <f_mkfs+0x84a>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <f_mkfs+0x84c>

	return FR_OK;
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	3774      	adds	r7, #116	; 0x74
 800f134:	46bd      	mov	sp, r7
 800f136:	bd90      	pop	{r4, r7, pc}
 800f138:	0515565b 	.word	0x0515565b

0800f13c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b087      	sub	sp, #28
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	4613      	mov	r3, r2
 800f148:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f14a:	2301      	movs	r3, #1
 800f14c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f152:	4b1f      	ldr	r3, [pc, #124]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f154:	7a5b      	ldrb	r3, [r3, #9]
 800f156:	b2db      	uxtb	r3, r3
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d131      	bne.n	800f1c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f15c:	4b1c      	ldr	r3, [pc, #112]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f15e:	7a5b      	ldrb	r3, [r3, #9]
 800f160:	b2db      	uxtb	r3, r3
 800f162:	461a      	mov	r2, r3
 800f164:	4b1a      	ldr	r3, [pc, #104]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f166:	2100      	movs	r1, #0
 800f168:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f16a:	4b19      	ldr	r3, [pc, #100]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f16c:	7a5b      	ldrb	r3, [r3, #9]
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	4a17      	ldr	r2, [pc, #92]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	4413      	add	r3, r2
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f17a:	4b15      	ldr	r3, [pc, #84]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f17c:	7a5b      	ldrb	r3, [r3, #9]
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	461a      	mov	r2, r3
 800f182:	4b13      	ldr	r3, [pc, #76]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f184:	4413      	add	r3, r2
 800f186:	79fa      	ldrb	r2, [r7, #7]
 800f188:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f18a:	4b11      	ldr	r3, [pc, #68]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f18c:	7a5b      	ldrb	r3, [r3, #9]
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	1c5a      	adds	r2, r3, #1
 800f192:	b2d1      	uxtb	r1, r2
 800f194:	4a0e      	ldr	r2, [pc, #56]	; (800f1d0 <FATFS_LinkDriverEx+0x94>)
 800f196:	7251      	strb	r1, [r2, #9]
 800f198:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f19a:	7dbb      	ldrb	r3, [r7, #22]
 800f19c:	3330      	adds	r3, #48	; 0x30
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	223a      	movs	r2, #58	; 0x3a
 800f1aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	3302      	adds	r3, #2
 800f1b0:	222f      	movs	r2, #47	; 0x2f
 800f1b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	3303      	adds	r3, #3
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	371c      	adds	r7, #28
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	240081fc 	.word	0x240081fc

0800f1d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f1de:	2200      	movs	r2, #0
 800f1e0:	6839      	ldr	r1, [r7, #0]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff ffaa 	bl	800f13c <FATFS_LinkDriverEx>
 800f1e8:	4603      	mov	r3, r0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b084      	sub	sp, #16
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	6039      	str	r1, [r7, #0]
 800f1fc:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800f1fe:	2200      	movs	r2, #0
 800f200:	2101      	movs	r1, #1
 800f202:	2001      	movs	r0, #1
 800f204:	f000 f9ae 	bl	800f564 <osSemaphoreNew>
 800f208:	4602      	mov	r2, r0
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	bf14      	ite	ne
 800f216:	2301      	movne	r3, #1
 800f218:	2300      	moveq	r3, #0
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	60fb      	str	r3, [r7, #12]

    return ret;
 800f21e:	68fb      	ldr	r3, [r7, #12]
}
 800f220:	4618      	mov	r0, r3
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 fab7 	bl	800f7a4 <osSemaphoreDelete>
#endif
    return 1;
 800f236:	2301      	movs	r3, #1
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f248:	2300      	movs	r3, #0
 800f24a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f24c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 fa11 	bl	800f678 <osSemaphoreAcquire>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d101      	bne.n	800f260 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800f25c:	2301      	movs	r3, #1
 800f25e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f260:	68fb      	ldr	r3, [r7, #12]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b082      	sub	sp, #8
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 fa52 	bl	800f71c <osSemaphoreRelease>
#endif
}
 800f278:	bf00      	nop
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <__NVIC_SetPriority>:
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	4603      	mov	r3, r0
 800f288:	6039      	str	r1, [r7, #0]
 800f28a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f28c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f290:	2b00      	cmp	r3, #0
 800f292:	db0a      	blt.n	800f2aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	b2da      	uxtb	r2, r3
 800f298:	490c      	ldr	r1, [pc, #48]	; (800f2cc <__NVIC_SetPriority+0x4c>)
 800f29a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f29e:	0112      	lsls	r2, r2, #4
 800f2a0:	b2d2      	uxtb	r2, r2
 800f2a2:	440b      	add	r3, r1
 800f2a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f2a8:	e00a      	b.n	800f2c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	b2da      	uxtb	r2, r3
 800f2ae:	4908      	ldr	r1, [pc, #32]	; (800f2d0 <__NVIC_SetPriority+0x50>)
 800f2b0:	88fb      	ldrh	r3, [r7, #6]
 800f2b2:	f003 030f 	and.w	r3, r3, #15
 800f2b6:	3b04      	subs	r3, #4
 800f2b8:	0112      	lsls	r2, r2, #4
 800f2ba:	b2d2      	uxtb	r2, r2
 800f2bc:	440b      	add	r3, r1
 800f2be:	761a      	strb	r2, [r3, #24]
}
 800f2c0:	bf00      	nop
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr
 800f2cc:	e000e100 	.word	0xe000e100
 800f2d0:	e000ed00 	.word	0xe000ed00

0800f2d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f2d8:	4b05      	ldr	r3, [pc, #20]	; (800f2f0 <SysTick_Handler+0x1c>)
 800f2da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f2dc:	f002 fc8c 	bl	8011bf8 <xTaskGetSchedulerState>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d001      	beq.n	800f2ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f2e6:	f003 fb6f 	bl	80129c8 <xPortSysTickHandler>
  }
}
 800f2ea:	bf00      	nop
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	e000e010 	.word	0xe000e010

0800f2f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	f06f 0004 	mvn.w	r0, #4
 800f2fe:	f7ff ffbf 	bl	800f280 <__NVIC_SetPriority>
#endif
}
 800f302:	bf00      	nop
 800f304:	bd80      	pop	{r7, pc}
	...

0800f308 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f30e:	f3ef 8305 	mrs	r3, IPSR
 800f312:	603b      	str	r3, [r7, #0]
  return(result);
 800f314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f316:	2b00      	cmp	r3, #0
 800f318:	d003      	beq.n	800f322 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f31a:	f06f 0305 	mvn.w	r3, #5
 800f31e:	607b      	str	r3, [r7, #4]
 800f320:	e00c      	b.n	800f33c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f322:	4b0a      	ldr	r3, [pc, #40]	; (800f34c <osKernelInitialize+0x44>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d105      	bne.n	800f336 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f32a:	4b08      	ldr	r3, [pc, #32]	; (800f34c <osKernelInitialize+0x44>)
 800f32c:	2201      	movs	r2, #1
 800f32e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f330:	2300      	movs	r3, #0
 800f332:	607b      	str	r3, [r7, #4]
 800f334:	e002      	b.n	800f33c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f336:	f04f 33ff 	mov.w	r3, #4294967295
 800f33a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f33c:	687b      	ldr	r3, [r7, #4]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	370c      	adds	r7, #12
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	24008208 	.word	0x24008208

0800f350 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800f356:	f002 fc4f 	bl	8011bf8 <xTaskGetSchedulerState>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d004      	beq.n	800f36a <osKernelGetState+0x1a>
 800f360:	2b02      	cmp	r3, #2
 800f362:	d105      	bne.n	800f370 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800f364:	2302      	movs	r3, #2
 800f366:	607b      	str	r3, [r7, #4]
      break;
 800f368:	e00c      	b.n	800f384 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800f36a:	2303      	movs	r3, #3
 800f36c:	607b      	str	r3, [r7, #4]
      break;
 800f36e:	e009      	b.n	800f384 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800f370:	4b07      	ldr	r3, [pc, #28]	; (800f390 <osKernelGetState+0x40>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d102      	bne.n	800f37e <osKernelGetState+0x2e>
        state = osKernelReady;
 800f378:	2301      	movs	r3, #1
 800f37a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800f37c:	e001      	b.n	800f382 <osKernelGetState+0x32>
        state = osKernelInactive;
 800f37e:	2300      	movs	r3, #0
 800f380:	607b      	str	r3, [r7, #4]
      break;
 800f382:	bf00      	nop
  }

  return (state);
 800f384:	687b      	ldr	r3, [r7, #4]
}
 800f386:	4618      	mov	r0, r3
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	24008208 	.word	0x24008208

0800f394 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f39a:	f3ef 8305 	mrs	r3, IPSR
 800f39e:	603b      	str	r3, [r7, #0]
  return(result);
 800f3a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d003      	beq.n	800f3ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800f3a6:	f06f 0305 	mvn.w	r3, #5
 800f3aa:	607b      	str	r3, [r7, #4]
 800f3ac:	e010      	b.n	800f3d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f3ae:	4b0b      	ldr	r3, [pc, #44]	; (800f3dc <osKernelStart+0x48>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d109      	bne.n	800f3ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f3b6:	f7ff ff9d 	bl	800f2f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f3ba:	4b08      	ldr	r3, [pc, #32]	; (800f3dc <osKernelStart+0x48>)
 800f3bc:	2202      	movs	r2, #2
 800f3be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f3c0:	f001 ffac 	bl	801131c <vTaskStartScheduler>
      stat = osOK;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	607b      	str	r3, [r7, #4]
 800f3c8:	e002      	b.n	800f3d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f3d0:	687b      	ldr	r3, [r7, #4]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3708      	adds	r7, #8
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	24008208 	.word	0x24008208

0800f3e0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3e6:	f3ef 8305 	mrs	r3, IPSR
 800f3ea:	603b      	str	r3, [r7, #0]
  return(result);
 800f3ec:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d003      	beq.n	800f3fa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f3f2:	f002 f8bf 	bl	8011574 <xTaskGetTickCountFromISR>
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	e002      	b.n	800f400 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f3fa:	f002 f8ab 	bl	8011554 <xTaskGetTickCount>
 800f3fe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f400:	687b      	ldr	r3, [r7, #4]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b08e      	sub	sp, #56	; 0x38
 800f40e:	af04      	add	r7, sp, #16
 800f410:	60f8      	str	r0, [r7, #12]
 800f412:	60b9      	str	r1, [r7, #8]
 800f414:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f416:	2300      	movs	r3, #0
 800f418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f41a:	f3ef 8305 	mrs	r3, IPSR
 800f41e:	617b      	str	r3, [r7, #20]
  return(result);
 800f420:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f422:	2b00      	cmp	r3, #0
 800f424:	d17e      	bne.n	800f524 <osThreadNew+0x11a>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d07b      	beq.n	800f524 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f42c:	2380      	movs	r3, #128	; 0x80
 800f42e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f430:	2318      	movs	r3, #24
 800f432:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f434:	2300      	movs	r3, #0
 800f436:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f438:	f04f 33ff 	mov.w	r3, #4294967295
 800f43c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d045      	beq.n	800f4d0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d002      	beq.n	800f452 <osThreadNew+0x48>
        name = attr->name;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	699b      	ldr	r3, [r3, #24]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d002      	beq.n	800f460 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	699b      	ldr	r3, [r3, #24]
 800f45e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d008      	beq.n	800f478 <osThreadNew+0x6e>
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	2b38      	cmp	r3, #56	; 0x38
 800f46a:	d805      	bhi.n	800f478 <osThreadNew+0x6e>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	f003 0301 	and.w	r3, r3, #1
 800f474:	2b00      	cmp	r3, #0
 800f476:	d001      	beq.n	800f47c <osThreadNew+0x72>
        return (NULL);
 800f478:	2300      	movs	r3, #0
 800f47a:	e054      	b.n	800f526 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	695b      	ldr	r3, [r3, #20]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d003      	beq.n	800f48c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	695b      	ldr	r3, [r3, #20]
 800f488:	089b      	lsrs	r3, r3, #2
 800f48a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	689b      	ldr	r3, [r3, #8]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d00e      	beq.n	800f4b2 <osThreadNew+0xa8>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	2bbb      	cmp	r3, #187	; 0xbb
 800f49a:	d90a      	bls.n	800f4b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d006      	beq.n	800f4b2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	695b      	ldr	r3, [r3, #20]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d002      	beq.n	800f4b2 <osThreadNew+0xa8>
        mem = 1;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	61bb      	str	r3, [r7, #24]
 800f4b0:	e010      	b.n	800f4d4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10c      	bne.n	800f4d4 <osThreadNew+0xca>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d108      	bne.n	800f4d4 <osThreadNew+0xca>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d104      	bne.n	800f4d4 <osThreadNew+0xca>
          mem = 0;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	61bb      	str	r3, [r7, #24]
 800f4ce:	e001      	b.n	800f4d4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d110      	bne.n	800f4fc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f4e2:	9202      	str	r2, [sp, #8]
 800f4e4:	9301      	str	r3, [sp, #4]
 800f4e6:	69fb      	ldr	r3, [r7, #28]
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	6a3a      	ldr	r2, [r7, #32]
 800f4ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f001 fba3 	bl	8010c3c <xTaskCreateStatic>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	613b      	str	r3, [r7, #16]
 800f4fa:	e013      	b.n	800f524 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d110      	bne.n	800f524 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f502:	6a3b      	ldr	r3, [r7, #32]
 800f504:	b29a      	uxth	r2, r3
 800f506:	f107 0310 	add.w	r3, r7, #16
 800f50a:	9301      	str	r3, [sp, #4]
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	9300      	str	r3, [sp, #0]
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f001 fbee 	bl	8010cf6 <xTaskCreate>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d001      	beq.n	800f524 <osThreadNew+0x11a>
            hTask = NULL;
 800f520:	2300      	movs	r3, #0
 800f522:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f524:	693b      	ldr	r3, [r7, #16]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3728      	adds	r7, #40	; 0x28
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f52e:	b580      	push	{r7, lr}
 800f530:	b084      	sub	sp, #16
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f536:	f3ef 8305 	mrs	r3, IPSR
 800f53a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f53c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d003      	beq.n	800f54a <osDelay+0x1c>
    stat = osErrorISR;
 800f542:	f06f 0305 	mvn.w	r3, #5
 800f546:	60fb      	str	r3, [r7, #12]
 800f548:	e007      	b.n	800f55a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f54a:	2300      	movs	r3, #0
 800f54c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d002      	beq.n	800f55a <osDelay+0x2c>
      vTaskDelay(ticks);
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f001 fda7 	bl	80110a8 <vTaskDelay>
    }
  }

  return (stat);
 800f55a:	68fb      	ldr	r3, [r7, #12]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af02      	add	r7, sp, #8
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f570:	2300      	movs	r3, #0
 800f572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f574:	f3ef 8305 	mrs	r3, IPSR
 800f578:	613b      	str	r3, [r7, #16]
  return(result);
 800f57a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d175      	bne.n	800f66c <osSemaphoreNew+0x108>
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d072      	beq.n	800f66c <osSemaphoreNew+0x108>
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d86e      	bhi.n	800f66c <osSemaphoreNew+0x108>
    mem = -1;
 800f58e:	f04f 33ff 	mov.w	r3, #4294967295
 800f592:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d015      	beq.n	800f5c6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d006      	beq.n	800f5b0 <osSemaphoreNew+0x4c>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	2b4f      	cmp	r3, #79	; 0x4f
 800f5a8:	d902      	bls.n	800f5b0 <osSemaphoreNew+0x4c>
        mem = 1;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	61bb      	str	r3, [r7, #24]
 800f5ae:	e00c      	b.n	800f5ca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d108      	bne.n	800f5ca <osSemaphoreNew+0x66>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d104      	bne.n	800f5ca <osSemaphoreNew+0x66>
          mem = 0;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	61bb      	str	r3, [r7, #24]
 800f5c4:	e001      	b.n	800f5ca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5d0:	d04c      	beq.n	800f66c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d128      	bne.n	800f62a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d10a      	bne.n	800f5f4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	2203      	movs	r2, #3
 800f5e4:	9200      	str	r2, [sp, #0]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	2001      	movs	r0, #1
 800f5ec:	f000 fb80 	bl	800fcf0 <xQueueGenericCreateStatic>
 800f5f0:	61f8      	str	r0, [r7, #28]
 800f5f2:	e005      	b.n	800f600 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f5f4:	2203      	movs	r2, #3
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	2001      	movs	r0, #1
 800f5fa:	f000 fbf1 	bl	800fde0 <xQueueGenericCreate>
 800f5fe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d022      	beq.n	800f64c <osSemaphoreNew+0xe8>
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01f      	beq.n	800f64c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f60c:	2300      	movs	r3, #0
 800f60e:	2200      	movs	r2, #0
 800f610:	2100      	movs	r1, #0
 800f612:	69f8      	ldr	r0, [r7, #28]
 800f614:	f000 fcac 	bl	800ff70 <xQueueGenericSend>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d016      	beq.n	800f64c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f61e:	69f8      	ldr	r0, [r7, #28]
 800f620:	f001 f938 	bl	8010894 <vQueueDelete>
            hSemaphore = NULL;
 800f624:	2300      	movs	r3, #0
 800f626:	61fb      	str	r3, [r7, #28]
 800f628:	e010      	b.n	800f64c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f62a:	69bb      	ldr	r3, [r7, #24]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d108      	bne.n	800f642 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	689b      	ldr	r3, [r3, #8]
 800f634:	461a      	mov	r2, r3
 800f636:	68b9      	ldr	r1, [r7, #8]
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f000 fc2e 	bl	800fe9a <xQueueCreateCountingSemaphoreStatic>
 800f63e:	61f8      	str	r0, [r7, #28]
 800f640:	e004      	b.n	800f64c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f642:	68b9      	ldr	r1, [r7, #8]
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	f000 fc5f 	bl	800ff08 <xQueueCreateCountingSemaphore>
 800f64a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00c      	beq.n	800f66c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	617b      	str	r3, [r7, #20]
 800f65e:	e001      	b.n	800f664 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f660:	2300      	movs	r3, #0
 800f662:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f664:	6979      	ldr	r1, [r7, #20]
 800f666:	69f8      	ldr	r0, [r7, #28]
 800f668:	f001 fa60 	bl	8010b2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f66c:	69fb      	ldr	r3, [r7, #28]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3720      	adds	r7, #32
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
	...

0800f678 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f686:	2300      	movs	r3, #0
 800f688:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d103      	bne.n	800f698 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f690:	f06f 0303 	mvn.w	r3, #3
 800f694:	617b      	str	r3, [r7, #20]
 800f696:	e039      	b.n	800f70c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f698:	f3ef 8305 	mrs	r3, IPSR
 800f69c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f69e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d022      	beq.n	800f6ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d003      	beq.n	800f6b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f6aa:	f06f 0303 	mvn.w	r3, #3
 800f6ae:	617b      	str	r3, [r7, #20]
 800f6b0:	e02c      	b.n	800f70c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f6b6:	f107 0308 	add.w	r3, r7, #8
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	2100      	movs	r1, #0
 800f6be:	6938      	ldr	r0, [r7, #16]
 800f6c0:	f001 f868 	bl	8010794 <xQueueReceiveFromISR>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d003      	beq.n	800f6d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f6ca:	f06f 0302 	mvn.w	r3, #2
 800f6ce:	617b      	str	r3, [r7, #20]
 800f6d0:	e01c      	b.n	800f70c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d019      	beq.n	800f70c <osSemaphoreAcquire+0x94>
 800f6d8:	4b0f      	ldr	r3, [pc, #60]	; (800f718 <osSemaphoreAcquire+0xa0>)
 800f6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6de:	601a      	str	r2, [r3, #0]
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	e010      	b.n	800f70c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6938      	ldr	r0, [r7, #16]
 800f6ee:	f000 ff45 	bl	801057c <xQueueSemaphoreTake>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d009      	beq.n	800f70c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d003      	beq.n	800f706 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f6fe:	f06f 0301 	mvn.w	r3, #1
 800f702:	617b      	str	r3, [r7, #20]
 800f704:	e002      	b.n	800f70c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f706:	f06f 0302 	mvn.w	r3, #2
 800f70a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f70c:	697b      	ldr	r3, [r7, #20]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3718      	adds	r7, #24
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	e000ed04 	.word	0xe000ed04

0800f71c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f728:	2300      	movs	r3, #0
 800f72a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d103      	bne.n	800f73a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f732:	f06f 0303 	mvn.w	r3, #3
 800f736:	617b      	str	r3, [r7, #20]
 800f738:	e02c      	b.n	800f794 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f73a:	f3ef 8305 	mrs	r3, IPSR
 800f73e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f740:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f742:	2b00      	cmp	r3, #0
 800f744:	d01a      	beq.n	800f77c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f746:	2300      	movs	r3, #0
 800f748:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f74a:	f107 0308 	add.w	r3, r7, #8
 800f74e:	4619      	mov	r1, r3
 800f750:	6938      	ldr	r0, [r7, #16]
 800f752:	f000 fda6 	bl	80102a2 <xQueueGiveFromISR>
 800f756:	4603      	mov	r3, r0
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d003      	beq.n	800f764 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f75c:	f06f 0302 	mvn.w	r3, #2
 800f760:	617b      	str	r3, [r7, #20]
 800f762:	e017      	b.n	800f794 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d014      	beq.n	800f794 <osSemaphoreRelease+0x78>
 800f76a:	4b0d      	ldr	r3, [pc, #52]	; (800f7a0 <osSemaphoreRelease+0x84>)
 800f76c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f770:	601a      	str	r2, [r3, #0]
 800f772:	f3bf 8f4f 	dsb	sy
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	e00b      	b.n	800f794 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f77c:	2300      	movs	r3, #0
 800f77e:	2200      	movs	r2, #0
 800f780:	2100      	movs	r1, #0
 800f782:	6938      	ldr	r0, [r7, #16]
 800f784:	f000 fbf4 	bl	800ff70 <xQueueGenericSend>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d002      	beq.n	800f794 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f78e:	f06f 0302 	mvn.w	r3, #2
 800f792:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f794:	697b      	ldr	r3, [r7, #20]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3718      	adds	r7, #24
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	e000ed04 	.word	0xe000ed04

0800f7a4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7b0:	f3ef 8305 	mrs	r3, IPSR
 800f7b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f7bc:	f06f 0305 	mvn.w	r3, #5
 800f7c0:	617b      	str	r3, [r7, #20]
 800f7c2:	e00e      	b.n	800f7e2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d103      	bne.n	800f7d2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f7ca:	f06f 0303 	mvn.w	r3, #3
 800f7ce:	617b      	str	r3, [r7, #20]
 800f7d0:	e007      	b.n	800f7e2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f7d2:	6938      	ldr	r0, [r7, #16]
 800f7d4:	f001 f9d4 	bl	8010b80 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f7dc:	6938      	ldr	r0, [r7, #16]
 800f7de:	f001 f859 	bl	8010894 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f7e2:	697b      	ldr	r3, [r7, #20]
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3718      	adds	r7, #24
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b08a      	sub	sp, #40	; 0x28
 800f7f0:	af02      	add	r7, sp, #8
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7fc:	f3ef 8305 	mrs	r3, IPSR
 800f800:	613b      	str	r3, [r7, #16]
  return(result);
 800f802:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f804:	2b00      	cmp	r3, #0
 800f806:	d15f      	bne.n	800f8c8 <osMessageQueueNew+0xdc>
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d05c      	beq.n	800f8c8 <osMessageQueueNew+0xdc>
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d059      	beq.n	800f8c8 <osMessageQueueNew+0xdc>
    mem = -1;
 800f814:	f04f 33ff 	mov.w	r3, #4294967295
 800f818:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d029      	beq.n	800f874 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	689b      	ldr	r3, [r3, #8]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d012      	beq.n	800f84e <osMessageQueueNew+0x62>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	2b4f      	cmp	r3, #79	; 0x4f
 800f82e:	d90e      	bls.n	800f84e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00a      	beq.n	800f84e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	695a      	ldr	r2, [r3, #20]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	68b9      	ldr	r1, [r7, #8]
 800f840:	fb01 f303 	mul.w	r3, r1, r3
 800f844:	429a      	cmp	r2, r3
 800f846:	d302      	bcc.n	800f84e <osMessageQueueNew+0x62>
        mem = 1;
 800f848:	2301      	movs	r3, #1
 800f84a:	61bb      	str	r3, [r7, #24]
 800f84c:	e014      	b.n	800f878 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	689b      	ldr	r3, [r3, #8]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d110      	bne.n	800f878 <osMessageQueueNew+0x8c>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10c      	bne.n	800f878 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f862:	2b00      	cmp	r3, #0
 800f864:	d108      	bne.n	800f878 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	695b      	ldr	r3, [r3, #20]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d104      	bne.n	800f878 <osMessageQueueNew+0x8c>
          mem = 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	61bb      	str	r3, [r7, #24]
 800f872:	e001      	b.n	800f878 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f878:	69bb      	ldr	r3, [r7, #24]
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d10b      	bne.n	800f896 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	691a      	ldr	r2, [r3, #16]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	2100      	movs	r1, #0
 800f888:	9100      	str	r1, [sp, #0]
 800f88a:	68b9      	ldr	r1, [r7, #8]
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f000 fa2f 	bl	800fcf0 <xQueueGenericCreateStatic>
 800f892:	61f8      	str	r0, [r7, #28]
 800f894:	e008      	b.n	800f8a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d105      	bne.n	800f8a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f89c:	2200      	movs	r2, #0
 800f89e:	68b9      	ldr	r1, [r7, #8]
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f000 fa9d 	bl	800fde0 <xQueueGenericCreate>
 800f8a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00c      	beq.n	800f8c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d003      	beq.n	800f8bc <osMessageQueueNew+0xd0>
        name = attr->name;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	617b      	str	r3, [r7, #20]
 800f8ba:	e001      	b.n	800f8c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f8c0:	6979      	ldr	r1, [r7, #20]
 800f8c2:	69f8      	ldr	r0, [r7, #28]
 800f8c4:	f001 f932 	bl	8010b2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f8c8:	69fb      	ldr	r3, [r7, #28]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3720      	adds	r7, #32
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
	...

0800f8d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b088      	sub	sp, #32
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	603b      	str	r3, [r7, #0]
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8ec:	f3ef 8305 	mrs	r3, IPSR
 800f8f0:	617b      	str	r3, [r7, #20]
  return(result);
 800f8f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d028      	beq.n	800f94a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d005      	beq.n	800f90a <osMessageQueuePut+0x36>
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d002      	beq.n	800f90a <osMessageQueuePut+0x36>
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d003      	beq.n	800f912 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f90a:	f06f 0303 	mvn.w	r3, #3
 800f90e:	61fb      	str	r3, [r7, #28]
 800f910:	e038      	b.n	800f984 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f912:	2300      	movs	r3, #0
 800f914:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f916:	f107 0210 	add.w	r2, r7, #16
 800f91a:	2300      	movs	r3, #0
 800f91c:	68b9      	ldr	r1, [r7, #8]
 800f91e:	69b8      	ldr	r0, [r7, #24]
 800f920:	f000 fc24 	bl	801016c <xQueueGenericSendFromISR>
 800f924:	4603      	mov	r3, r0
 800f926:	2b01      	cmp	r3, #1
 800f928:	d003      	beq.n	800f932 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f92a:	f06f 0302 	mvn.w	r3, #2
 800f92e:	61fb      	str	r3, [r7, #28]
 800f930:	e028      	b.n	800f984 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d025      	beq.n	800f984 <osMessageQueuePut+0xb0>
 800f938:	4b15      	ldr	r3, [pc, #84]	; (800f990 <osMessageQueuePut+0xbc>)
 800f93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f93e:	601a      	str	r2, [r3, #0]
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	e01c      	b.n	800f984 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d002      	beq.n	800f956 <osMessageQueuePut+0x82>
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d103      	bne.n	800f95e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f956:	f06f 0303 	mvn.w	r3, #3
 800f95a:	61fb      	str	r3, [r7, #28]
 800f95c:	e012      	b.n	800f984 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f95e:	2300      	movs	r3, #0
 800f960:	683a      	ldr	r2, [r7, #0]
 800f962:	68b9      	ldr	r1, [r7, #8]
 800f964:	69b8      	ldr	r0, [r7, #24]
 800f966:	f000 fb03 	bl	800ff70 <xQueueGenericSend>
 800f96a:	4603      	mov	r3, r0
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d009      	beq.n	800f984 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d003      	beq.n	800f97e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f976:	f06f 0301 	mvn.w	r3, #1
 800f97a:	61fb      	str	r3, [r7, #28]
 800f97c:	e002      	b.n	800f984 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f97e:	f06f 0302 	mvn.w	r3, #2
 800f982:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f984:	69fb      	ldr	r3, [r7, #28]
}
 800f986:	4618      	mov	r0, r3
 800f988:	3720      	adds	r7, #32
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	e000ed04 	.word	0xe000ed04

0800f994 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f994:	b580      	push	{r7, lr}
 800f996:	b088      	sub	sp, #32
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
 800f9a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9aa:	f3ef 8305 	mrs	r3, IPSR
 800f9ae:	617b      	str	r3, [r7, #20]
  return(result);
 800f9b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d028      	beq.n	800fa08 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9b6:	69bb      	ldr	r3, [r7, #24]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d005      	beq.n	800f9c8 <osMessageQueueGet+0x34>
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d002      	beq.n	800f9c8 <osMessageQueueGet+0x34>
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d003      	beq.n	800f9d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f9c8:	f06f 0303 	mvn.w	r3, #3
 800f9cc:	61fb      	str	r3, [r7, #28]
 800f9ce:	e037      	b.n	800fa40 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f9d4:	f107 0310 	add.w	r3, r7, #16
 800f9d8:	461a      	mov	r2, r3
 800f9da:	68b9      	ldr	r1, [r7, #8]
 800f9dc:	69b8      	ldr	r0, [r7, #24]
 800f9de:	f000 fed9 	bl	8010794 <xQueueReceiveFromISR>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d003      	beq.n	800f9f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f9e8:	f06f 0302 	mvn.w	r3, #2
 800f9ec:	61fb      	str	r3, [r7, #28]
 800f9ee:	e027      	b.n	800fa40 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d024      	beq.n	800fa40 <osMessageQueueGet+0xac>
 800f9f6:	4b15      	ldr	r3, [pc, #84]	; (800fa4c <osMessageQueueGet+0xb8>)
 800f9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9fc:	601a      	str	r2, [r3, #0]
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	e01b      	b.n	800fa40 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d002      	beq.n	800fa14 <osMessageQueueGet+0x80>
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d103      	bne.n	800fa1c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fa14:	f06f 0303 	mvn.w	r3, #3
 800fa18:	61fb      	str	r3, [r7, #28]
 800fa1a:	e011      	b.n	800fa40 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa1c:	683a      	ldr	r2, [r7, #0]
 800fa1e:	68b9      	ldr	r1, [r7, #8]
 800fa20:	69b8      	ldr	r0, [r7, #24]
 800fa22:	f000 fccb 	bl	80103bc <xQueueReceive>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d009      	beq.n	800fa40 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d003      	beq.n	800fa3a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fa32:	f06f 0301 	mvn.w	r3, #1
 800fa36:	61fb      	str	r3, [r7, #28]
 800fa38:	e002      	b.n	800fa40 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fa3a:	f06f 0302 	mvn.w	r3, #2
 800fa3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fa40:	69fb      	ldr	r3, [r7, #28]
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3720      	adds	r7, #32
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	e000ed04 	.word	0xe000ed04

0800fa50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fa50:	b480      	push	{r7}
 800fa52:	b085      	sub	sp, #20
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	4a07      	ldr	r2, [pc, #28]	; (800fa7c <vApplicationGetIdleTaskMemory+0x2c>)
 800fa60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	4a06      	ldr	r2, [pc, #24]	; (800fa80 <vApplicationGetIdleTaskMemory+0x30>)
 800fa66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2280      	movs	r2, #128	; 0x80
 800fa6c:	601a      	str	r2, [r3, #0]
}
 800fa6e:	bf00      	nop
 800fa70:	3714      	adds	r7, #20
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr
 800fa7a:	bf00      	nop
 800fa7c:	2400820c 	.word	0x2400820c
 800fa80:	240082c8 	.word	0x240082c8

0800fa84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fa84:	b480      	push	{r7}
 800fa86:	b085      	sub	sp, #20
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4a07      	ldr	r2, [pc, #28]	; (800fab0 <vApplicationGetTimerTaskMemory+0x2c>)
 800fa94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	4a06      	ldr	r2, [pc, #24]	; (800fab4 <vApplicationGetTimerTaskMemory+0x30>)
 800fa9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800faa2:	601a      	str	r2, [r3, #0]
}
 800faa4:	bf00      	nop
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr
 800fab0:	240084c8 	.word	0x240084c8
 800fab4:	24008584 	.word	0x24008584

0800fab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f103 0208 	add.w	r2, r3, #8
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f04f 32ff 	mov.w	r2, #4294967295
 800fad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f103 0208 	add.w	r2, r3, #8
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f103 0208 	add.w	r2, r3, #8
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fb06:	bf00      	nop
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb12:	b480      	push	{r7}
 800fb14:	b085      	sub	sp, #20
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
 800fb1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	689a      	ldr	r2, [r3, #8]
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	689b      	ldr	r3, [r3, #8]
 800fb34:	683a      	ldr	r2, [r7, #0]
 800fb36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	683a      	ldr	r2, [r7, #0]
 800fb3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	1c5a      	adds	r2, r3, #1
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	601a      	str	r2, [r3, #0]
}
 800fb4e:	bf00      	nop
 800fb50:	3714      	adds	r7, #20
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr

0800fb5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb5a:	b480      	push	{r7}
 800fb5c:	b085      	sub	sp, #20
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb70:	d103      	bne.n	800fb7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	691b      	ldr	r3, [r3, #16]
 800fb76:	60fb      	str	r3, [r7, #12]
 800fb78:	e00c      	b.n	800fb94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	60fb      	str	r3, [r7, #12]
 800fb80:	e002      	b.n	800fb88 <vListInsert+0x2e>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	60fb      	str	r3, [r7, #12]
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d2f6      	bcs.n	800fb82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	685a      	ldr	r2, [r3, #4]
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	683a      	ldr	r2, [r7, #0]
 800fba2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	683a      	ldr	r2, [r7, #0]
 800fbae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	1c5a      	adds	r2, r3, #1
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	601a      	str	r2, [r3, #0]
}
 800fbc0:	bf00      	nop
 800fbc2:	3714      	adds	r7, #20
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	691b      	ldr	r3, [r3, #16]
 800fbd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	6892      	ldr	r2, [r2, #8]
 800fbe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	689b      	ldr	r3, [r3, #8]
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	6852      	ldr	r2, [r2, #4]
 800fbec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d103      	bne.n	800fc00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	689a      	ldr	r2, [r3, #8]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	1e5a      	subs	r2, r3, #1
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3714      	adds	r7, #20
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d10a      	bne.n	800fc4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc38:	f383 8811 	msr	BASEPRI, r3
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fc46:	bf00      	nop
 800fc48:	e7fe      	b.n	800fc48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fc4a:	f002 fe2b 	bl	80128a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc56:	68f9      	ldr	r1, [r7, #12]
 800fc58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc5a:	fb01 f303 	mul.w	r3, r1, r3
 800fc5e:	441a      	add	r2, r3
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2200      	movs	r2, #0
 800fc68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc7a:	3b01      	subs	r3, #1
 800fc7c:	68f9      	ldr	r1, [r7, #12]
 800fc7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc80:	fb01 f303 	mul.w	r3, r1, r3
 800fc84:	441a      	add	r2, r3
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	22ff      	movs	r2, #255	; 0xff
 800fc8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	22ff      	movs	r2, #255	; 0xff
 800fc96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d114      	bne.n	800fcca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d01a      	beq.n	800fcde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	3310      	adds	r3, #16
 800fcac:	4618      	mov	r0, r3
 800fcae:	f001 fde1 	bl	8011874 <xTaskRemoveFromEventList>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d012      	beq.n	800fcde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fcb8:	4b0c      	ldr	r3, [pc, #48]	; (800fcec <xQueueGenericReset+0xcc>)
 800fcba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcbe:	601a      	str	r2, [r3, #0]
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	f3bf 8f6f 	isb	sy
 800fcc8:	e009      	b.n	800fcde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3310      	adds	r3, #16
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7ff fef2 	bl	800fab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	3324      	adds	r3, #36	; 0x24
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff feed 	bl	800fab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fcde:	f002 fe11 	bl	8012904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fce2:	2301      	movs	r3, #1
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3710      	adds	r7, #16
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	e000ed04 	.word	0xe000ed04

0800fcf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b08e      	sub	sp, #56	; 0x38
 800fcf4:	af02      	add	r7, sp, #8
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	607a      	str	r2, [r7, #4]
 800fcfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d10a      	bne.n	800fd1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd08:	f383 8811 	msr	BASEPRI, r3
 800fd0c:	f3bf 8f6f 	isb	sy
 800fd10:	f3bf 8f4f 	dsb	sy
 800fd14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd16:	bf00      	nop
 800fd18:	e7fe      	b.n	800fd18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d10a      	bne.n	800fd36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd24:	f383 8811 	msr	BASEPRI, r3
 800fd28:	f3bf 8f6f 	isb	sy
 800fd2c:	f3bf 8f4f 	dsb	sy
 800fd30:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd32:	bf00      	nop
 800fd34:	e7fe      	b.n	800fd34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d002      	beq.n	800fd42 <xQueueGenericCreateStatic+0x52>
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <xQueueGenericCreateStatic+0x56>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e000      	b.n	800fd48 <xQueueGenericCreateStatic+0x58>
 800fd46:	2300      	movs	r3, #0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10a      	bne.n	800fd62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd50:	f383 8811 	msr	BASEPRI, r3
 800fd54:	f3bf 8f6f 	isb	sy
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	623b      	str	r3, [r7, #32]
}
 800fd5e:	bf00      	nop
 800fd60:	e7fe      	b.n	800fd60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d102      	bne.n	800fd6e <xQueueGenericCreateStatic+0x7e>
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d101      	bne.n	800fd72 <xQueueGenericCreateStatic+0x82>
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e000      	b.n	800fd74 <xQueueGenericCreateStatic+0x84>
 800fd72:	2300      	movs	r3, #0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d10a      	bne.n	800fd8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7c:	f383 8811 	msr	BASEPRI, r3
 800fd80:	f3bf 8f6f 	isb	sy
 800fd84:	f3bf 8f4f 	dsb	sy
 800fd88:	61fb      	str	r3, [r7, #28]
}
 800fd8a:	bf00      	nop
 800fd8c:	e7fe      	b.n	800fd8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fd8e:	2350      	movs	r3, #80	; 0x50
 800fd90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	2b50      	cmp	r3, #80	; 0x50
 800fd96:	d00a      	beq.n	800fdae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9c:	f383 8811 	msr	BASEPRI, r3
 800fda0:	f3bf 8f6f 	isb	sy
 800fda4:	f3bf 8f4f 	dsb	sy
 800fda8:	61bb      	str	r3, [r7, #24]
}
 800fdaa:	bf00      	nop
 800fdac:	e7fe      	b.n	800fdac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fdae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00d      	beq.n	800fdd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fdc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	4613      	mov	r3, r2
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	68b9      	ldr	r1, [r7, #8]
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f000 f83f 	bl	800fe54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3730      	adds	r7, #48	; 0x30
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b08a      	sub	sp, #40	; 0x28
 800fde4:	af02      	add	r7, sp, #8
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	4613      	mov	r3, r2
 800fdec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d10a      	bne.n	800fe0a <xQueueGenericCreate+0x2a>
	__asm volatile
 800fdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf8:	f383 8811 	msr	BASEPRI, r3
 800fdfc:	f3bf 8f6f 	isb	sy
 800fe00:	f3bf 8f4f 	dsb	sy
 800fe04:	613b      	str	r3, [r7, #16]
}
 800fe06:	bf00      	nop
 800fe08:	e7fe      	b.n	800fe08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	68ba      	ldr	r2, [r7, #8]
 800fe0e:	fb02 f303 	mul.w	r3, r2, r3
 800fe12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	3350      	adds	r3, #80	; 0x50
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f002 fe65 	bl	8012ae8 <pvPortMalloc>
 800fe1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d011      	beq.n	800fe4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	3350      	adds	r3, #80	; 0x50
 800fe2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	2200      	movs	r2, #0
 800fe34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe38:	79fa      	ldrb	r2, [r7, #7]
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	697a      	ldr	r2, [r7, #20]
 800fe42:	68b9      	ldr	r1, [r7, #8]
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f000 f805 	bl	800fe54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe4a:	69bb      	ldr	r3, [r7, #24]
	}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3720      	adds	r7, #32
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b084      	sub	sp, #16
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
 800fe60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d103      	bne.n	800fe70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	69ba      	ldr	r2, [r7, #24]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	e002      	b.n	800fe76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fe82:	2101      	movs	r1, #1
 800fe84:	69b8      	ldr	r0, [r7, #24]
 800fe86:	f7ff fecb 	bl	800fc20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	78fa      	ldrb	r2, [r7, #3]
 800fe8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fe92:	bf00      	nop
 800fe94:	3710      	adds	r7, #16
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b08a      	sub	sp, #40	; 0x28
 800fe9e:	af02      	add	r7, sp, #8
 800fea0:	60f8      	str	r0, [r7, #12]
 800fea2:	60b9      	str	r1, [r7, #8]
 800fea4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d10a      	bne.n	800fec2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800feac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb0:	f383 8811 	msr	BASEPRI, r3
 800feb4:	f3bf 8f6f 	isb	sy
 800feb8:	f3bf 8f4f 	dsb	sy
 800febc:	61bb      	str	r3, [r7, #24]
}
 800febe:	bf00      	nop
 800fec0:	e7fe      	b.n	800fec0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fec2:	68ba      	ldr	r2, [r7, #8]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d90a      	bls.n	800fee0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	617b      	str	r3, [r7, #20]
}
 800fedc:	bf00      	nop
 800fede:	e7fe      	b.n	800fede <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fee0:	2302      	movs	r3, #2
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2200      	movs	r2, #0
 800fee8:	2100      	movs	r1, #0
 800feea:	68f8      	ldr	r0, [r7, #12]
 800feec:	f7ff ff00 	bl	800fcf0 <xQueueGenericCreateStatic>
 800fef0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d002      	beq.n	800fefe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fefe:	69fb      	ldr	r3, [r7, #28]
	}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3720      	adds	r7, #32
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b086      	sub	sp, #24
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10a      	bne.n	800ff2e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ff18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1c:	f383 8811 	msr	BASEPRI, r3
 800ff20:	f3bf 8f6f 	isb	sy
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	613b      	str	r3, [r7, #16]
}
 800ff2a:	bf00      	nop
 800ff2c:	e7fe      	b.n	800ff2c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ff2e:	683a      	ldr	r2, [r7, #0]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d90a      	bls.n	800ff4c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ff36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	60fb      	str	r3, [r7, #12]
}
 800ff48:	bf00      	nop
 800ff4a:	e7fe      	b.n	800ff4a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ff4c:	2202      	movs	r2, #2
 800ff4e:	2100      	movs	r1, #0
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7ff ff45 	bl	800fde0 <xQueueGenericCreate>
 800ff56:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d002      	beq.n	800ff64 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	683a      	ldr	r2, [r7, #0]
 800ff62:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ff64:	697b      	ldr	r3, [r7, #20]
	}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3718      	adds	r7, #24
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
	...

0800ff70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08e      	sub	sp, #56	; 0x38
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
 800ff7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ff86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10a      	bne.n	800ffa2 <xQueueGenericSend+0x32>
	__asm volatile
 800ff8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff90:	f383 8811 	msr	BASEPRI, r3
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ff9e:	bf00      	nop
 800ffa0:	e7fe      	b.n	800ffa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d103      	bne.n	800ffb0 <xQueueGenericSend+0x40>
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d101      	bne.n	800ffb4 <xQueueGenericSend+0x44>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e000      	b.n	800ffb6 <xQueueGenericSend+0x46>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d10a      	bne.n	800ffd0 <xQueueGenericSend+0x60>
	__asm volatile
 800ffba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ffcc:	bf00      	nop
 800ffce:	e7fe      	b.n	800ffce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	2b02      	cmp	r3, #2
 800ffd4:	d103      	bne.n	800ffde <xQueueGenericSend+0x6e>
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d101      	bne.n	800ffe2 <xQueueGenericSend+0x72>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e000      	b.n	800ffe4 <xQueueGenericSend+0x74>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d10a      	bne.n	800fffe <xQueueGenericSend+0x8e>
	__asm volatile
 800ffe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffec:	f383 8811 	msr	BASEPRI, r3
 800fff0:	f3bf 8f6f 	isb	sy
 800fff4:	f3bf 8f4f 	dsb	sy
 800fff8:	623b      	str	r3, [r7, #32]
}
 800fffa:	bf00      	nop
 800fffc:	e7fe      	b.n	800fffc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fffe:	f001 fdfb 	bl	8011bf8 <xTaskGetSchedulerState>
 8010002:	4603      	mov	r3, r0
 8010004:	2b00      	cmp	r3, #0
 8010006:	d102      	bne.n	801000e <xQueueGenericSend+0x9e>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d101      	bne.n	8010012 <xQueueGenericSend+0xa2>
 801000e:	2301      	movs	r3, #1
 8010010:	e000      	b.n	8010014 <xQueueGenericSend+0xa4>
 8010012:	2300      	movs	r3, #0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10a      	bne.n	801002e <xQueueGenericSend+0xbe>
	__asm volatile
 8010018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001c:	f383 8811 	msr	BASEPRI, r3
 8010020:	f3bf 8f6f 	isb	sy
 8010024:	f3bf 8f4f 	dsb	sy
 8010028:	61fb      	str	r3, [r7, #28]
}
 801002a:	bf00      	nop
 801002c:	e7fe      	b.n	801002c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801002e:	f002 fc39 	bl	80128a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801003a:	429a      	cmp	r2, r3
 801003c:	d302      	bcc.n	8010044 <xQueueGenericSend+0xd4>
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	2b02      	cmp	r3, #2
 8010042:	d129      	bne.n	8010098 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010044:	683a      	ldr	r2, [r7, #0]
 8010046:	68b9      	ldr	r1, [r7, #8]
 8010048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801004a:	f000 fc5e 	bl	801090a <prvCopyDataToQueue>
 801004e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010054:	2b00      	cmp	r3, #0
 8010056:	d010      	beq.n	801007a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	3324      	adds	r3, #36	; 0x24
 801005c:	4618      	mov	r0, r3
 801005e:	f001 fc09 	bl	8011874 <xTaskRemoveFromEventList>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d013      	beq.n	8010090 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010068:	4b3f      	ldr	r3, [pc, #252]	; (8010168 <xQueueGenericSend+0x1f8>)
 801006a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	e00a      	b.n	8010090 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801007a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007c:	2b00      	cmp	r3, #0
 801007e:	d007      	beq.n	8010090 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010080:	4b39      	ldr	r3, [pc, #228]	; (8010168 <xQueueGenericSend+0x1f8>)
 8010082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010086:	601a      	str	r2, [r3, #0]
 8010088:	f3bf 8f4f 	dsb	sy
 801008c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010090:	f002 fc38 	bl	8012904 <vPortExitCritical>
				return pdPASS;
 8010094:	2301      	movs	r3, #1
 8010096:	e063      	b.n	8010160 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d103      	bne.n	80100a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801009e:	f002 fc31 	bl	8012904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80100a2:	2300      	movs	r3, #0
 80100a4:	e05c      	b.n	8010160 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d106      	bne.n	80100ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80100ac:	f107 0314 	add.w	r3, r7, #20
 80100b0:	4618      	mov	r0, r3
 80100b2:	f001 fc43 	bl	801193c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80100b6:	2301      	movs	r3, #1
 80100b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80100ba:	f002 fc23 	bl	8012904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80100be:	f001 f99d 	bl	80113fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100c2:	f002 fbef 	bl	80128a4 <vPortEnterCritical>
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100cc:	b25b      	sxtb	r3, r3
 80100ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d2:	d103      	bne.n	80100dc <xQueueGenericSend+0x16c>
 80100d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d6:	2200      	movs	r2, #0
 80100d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100e2:	b25b      	sxtb	r3, r3
 80100e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e8:	d103      	bne.n	80100f2 <xQueueGenericSend+0x182>
 80100ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ec:	2200      	movs	r2, #0
 80100ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100f2:	f002 fc07 	bl	8012904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100f6:	1d3a      	adds	r2, r7, #4
 80100f8:	f107 0314 	add.w	r3, r7, #20
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f001 fc32 	bl	8011968 <xTaskCheckForTimeOut>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d124      	bne.n	8010154 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801010a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801010c:	f000 fcf5 	bl	8010afa <prvIsQueueFull>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d018      	beq.n	8010148 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010118:	3310      	adds	r3, #16
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	4611      	mov	r1, r2
 801011e:	4618      	mov	r0, r3
 8010120:	f001 fb58 	bl	80117d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010126:	f000 fc80 	bl	8010a2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801012a:	f001 f975 	bl	8011418 <xTaskResumeAll>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	f47f af7c 	bne.w	801002e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010136:	4b0c      	ldr	r3, [pc, #48]	; (8010168 <xQueueGenericSend+0x1f8>)
 8010138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801013c:	601a      	str	r2, [r3, #0]
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	e772      	b.n	801002e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801014a:	f000 fc6e 	bl	8010a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801014e:	f001 f963 	bl	8011418 <xTaskResumeAll>
 8010152:	e76c      	b.n	801002e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010156:	f000 fc68 	bl	8010a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801015a:	f001 f95d 	bl	8011418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801015e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010160:	4618      	mov	r0, r3
 8010162:	3738      	adds	r7, #56	; 0x38
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	e000ed04 	.word	0xe000ed04

0801016c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b090      	sub	sp, #64	; 0x40
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
 8010178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801017e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10a      	bne.n	801019a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010188:	f383 8811 	msr	BASEPRI, r3
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f3bf 8f4f 	dsb	sy
 8010194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010196:	bf00      	nop
 8010198:	e7fe      	b.n	8010198 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d103      	bne.n	80101a8 <xQueueGenericSendFromISR+0x3c>
 80101a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <xQueueGenericSendFromISR+0x40>
 80101a8:	2301      	movs	r3, #1
 80101aa:	e000      	b.n	80101ae <xQueueGenericSendFromISR+0x42>
 80101ac:	2300      	movs	r3, #0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d10a      	bne.n	80101c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b6:	f383 8811 	msr	BASEPRI, r3
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	f3bf 8f4f 	dsb	sy
 80101c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80101c4:	bf00      	nop
 80101c6:	e7fe      	b.n	80101c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	2b02      	cmp	r3, #2
 80101cc:	d103      	bne.n	80101d6 <xQueueGenericSendFromISR+0x6a>
 80101ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d101      	bne.n	80101da <xQueueGenericSendFromISR+0x6e>
 80101d6:	2301      	movs	r3, #1
 80101d8:	e000      	b.n	80101dc <xQueueGenericSendFromISR+0x70>
 80101da:	2300      	movs	r3, #0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d10a      	bne.n	80101f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80101e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e4:	f383 8811 	msr	BASEPRI, r3
 80101e8:	f3bf 8f6f 	isb	sy
 80101ec:	f3bf 8f4f 	dsb	sy
 80101f0:	623b      	str	r3, [r7, #32]
}
 80101f2:	bf00      	nop
 80101f4:	e7fe      	b.n	80101f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101f6:	f002 fc37 	bl	8012a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80101fa:	f3ef 8211 	mrs	r2, BASEPRI
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	61fa      	str	r2, [r7, #28]
 8010210:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010212:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010214:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801021e:	429a      	cmp	r2, r3
 8010220:	d302      	bcc.n	8010228 <xQueueGenericSendFromISR+0xbc>
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	2b02      	cmp	r3, #2
 8010226:	d12f      	bne.n	8010288 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801022e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010236:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	68b9      	ldr	r1, [r7, #8]
 801023c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801023e:	f000 fb64 	bl	801090a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010242:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024a:	d112      	bne.n	8010272 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801024c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010250:	2b00      	cmp	r3, #0
 8010252:	d016      	beq.n	8010282 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010256:	3324      	adds	r3, #36	; 0x24
 8010258:	4618      	mov	r0, r3
 801025a:	f001 fb0b 	bl	8011874 <xTaskRemoveFromEventList>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00e      	beq.n	8010282 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00b      	beq.n	8010282 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2201      	movs	r2, #1
 801026e:	601a      	str	r2, [r3, #0]
 8010270:	e007      	b.n	8010282 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010276:	3301      	adds	r3, #1
 8010278:	b2db      	uxtb	r3, r3
 801027a:	b25a      	sxtb	r2, r3
 801027c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010282:	2301      	movs	r3, #1
 8010284:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010286:	e001      	b.n	801028c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010288:	2300      	movs	r3, #0
 801028a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801028c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010296:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801029a:	4618      	mov	r0, r3
 801029c:	3740      	adds	r7, #64	; 0x40
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b08e      	sub	sp, #56	; 0x38
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
 80102aa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80102b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d10a      	bne.n	80102cc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80102b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	623b      	str	r3, [r7, #32]
}
 80102c8:	bf00      	nop
 80102ca:	e7fe      	b.n	80102ca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80102cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d00a      	beq.n	80102ea <xQueueGiveFromISR+0x48>
	__asm volatile
 80102d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d8:	f383 8811 	msr	BASEPRI, r3
 80102dc:	f3bf 8f6f 	isb	sy
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	61fb      	str	r3, [r7, #28]
}
 80102e6:	bf00      	nop
 80102e8:	e7fe      	b.n	80102e8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d103      	bne.n	80102fa <xQueueGiveFromISR+0x58>
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d101      	bne.n	80102fe <xQueueGiveFromISR+0x5c>
 80102fa:	2301      	movs	r3, #1
 80102fc:	e000      	b.n	8010300 <xQueueGiveFromISR+0x5e>
 80102fe:	2300      	movs	r3, #0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d10a      	bne.n	801031a <xQueueGiveFromISR+0x78>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	61bb      	str	r3, [r7, #24]
}
 8010316:	bf00      	nop
 8010318:	e7fe      	b.n	8010318 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801031a:	f002 fba5 	bl	8012a68 <vPortValidateInterruptPriority>
	__asm volatile
 801031e:	f3ef 8211 	mrs	r2, BASEPRI
 8010322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010326:	f383 8811 	msr	BASEPRI, r3
 801032a:	f3bf 8f6f 	isb	sy
 801032e:	f3bf 8f4f 	dsb	sy
 8010332:	617a      	str	r2, [r7, #20]
 8010334:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010336:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010338:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801033e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010346:	429a      	cmp	r2, r3
 8010348:	d22b      	bcs.n	80103a2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010356:	1c5a      	adds	r2, r3, #1
 8010358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801035c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010364:	d112      	bne.n	801038c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801036a:	2b00      	cmp	r3, #0
 801036c:	d016      	beq.n	801039c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801036e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010370:	3324      	adds	r3, #36	; 0x24
 8010372:	4618      	mov	r0, r3
 8010374:	f001 fa7e 	bl	8011874 <xTaskRemoveFromEventList>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00e      	beq.n	801039c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00b      	beq.n	801039c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	2201      	movs	r2, #1
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	e007      	b.n	801039c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801038c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010390:	3301      	adds	r3, #1
 8010392:	b2db      	uxtb	r3, r3
 8010394:	b25a      	sxtb	r2, r3
 8010396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801039c:	2301      	movs	r3, #1
 801039e:	637b      	str	r3, [r7, #52]	; 0x34
 80103a0:	e001      	b.n	80103a6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80103a2:	2300      	movs	r3, #0
 80103a4:	637b      	str	r3, [r7, #52]	; 0x34
 80103a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f383 8811 	msr	BASEPRI, r3
}
 80103b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3738      	adds	r7, #56	; 0x38
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b08c      	sub	sp, #48	; 0x30
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80103c8:	2300      	movs	r3, #0
 80103ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80103d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d10a      	bne.n	80103ec <xQueueReceive+0x30>
	__asm volatile
 80103d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103da:	f383 8811 	msr	BASEPRI, r3
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	f3bf 8f4f 	dsb	sy
 80103e6:	623b      	str	r3, [r7, #32]
}
 80103e8:	bf00      	nop
 80103ea:	e7fe      	b.n	80103ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d103      	bne.n	80103fa <xQueueReceive+0x3e>
 80103f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d101      	bne.n	80103fe <xQueueReceive+0x42>
 80103fa:	2301      	movs	r3, #1
 80103fc:	e000      	b.n	8010400 <xQueueReceive+0x44>
 80103fe:	2300      	movs	r3, #0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d10a      	bne.n	801041a <xQueueReceive+0x5e>
	__asm volatile
 8010404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	61fb      	str	r3, [r7, #28]
}
 8010416:	bf00      	nop
 8010418:	e7fe      	b.n	8010418 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801041a:	f001 fbed 	bl	8011bf8 <xTaskGetSchedulerState>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d102      	bne.n	801042a <xQueueReceive+0x6e>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d101      	bne.n	801042e <xQueueReceive+0x72>
 801042a:	2301      	movs	r3, #1
 801042c:	e000      	b.n	8010430 <xQueueReceive+0x74>
 801042e:	2300      	movs	r3, #0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d10a      	bne.n	801044a <xQueueReceive+0x8e>
	__asm volatile
 8010434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010438:	f383 8811 	msr	BASEPRI, r3
 801043c:	f3bf 8f6f 	isb	sy
 8010440:	f3bf 8f4f 	dsb	sy
 8010444:	61bb      	str	r3, [r7, #24]
}
 8010446:	bf00      	nop
 8010448:	e7fe      	b.n	8010448 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801044a:	f002 fa2b 	bl	80128a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801044e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010452:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010456:	2b00      	cmp	r3, #0
 8010458:	d01f      	beq.n	801049a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801045a:	68b9      	ldr	r1, [r7, #8]
 801045c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801045e:	f000 fabe 	bl	80109de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010464:	1e5a      	subs	r2, r3, #1
 8010466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010468:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801046a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046c:	691b      	ldr	r3, [r3, #16]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d00f      	beq.n	8010492 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010474:	3310      	adds	r3, #16
 8010476:	4618      	mov	r0, r3
 8010478:	f001 f9fc 	bl	8011874 <xTaskRemoveFromEventList>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d007      	beq.n	8010492 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010482:	4b3d      	ldr	r3, [pc, #244]	; (8010578 <xQueueReceive+0x1bc>)
 8010484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010492:	f002 fa37 	bl	8012904 <vPortExitCritical>
				return pdPASS;
 8010496:	2301      	movs	r3, #1
 8010498:	e069      	b.n	801056e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d103      	bne.n	80104a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80104a0:	f002 fa30 	bl	8012904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80104a4:	2300      	movs	r3, #0
 80104a6:	e062      	b.n	801056e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d106      	bne.n	80104bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104ae:	f107 0310 	add.w	r3, r7, #16
 80104b2:	4618      	mov	r0, r3
 80104b4:	f001 fa42 	bl	801193c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80104b8:	2301      	movs	r3, #1
 80104ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80104bc:	f002 fa22 	bl	8012904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80104c0:	f000 ff9c 	bl	80113fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104c4:	f002 f9ee 	bl	80128a4 <vPortEnterCritical>
 80104c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104ce:	b25b      	sxtb	r3, r3
 80104d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d4:	d103      	bne.n	80104de <xQueueReceive+0x122>
 80104d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d8:	2200      	movs	r2, #0
 80104da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104e4:	b25b      	sxtb	r3, r3
 80104e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ea:	d103      	bne.n	80104f4 <xQueueReceive+0x138>
 80104ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ee:	2200      	movs	r2, #0
 80104f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104f4:	f002 fa06 	bl	8012904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80104f8:	1d3a      	adds	r2, r7, #4
 80104fa:	f107 0310 	add.w	r3, r7, #16
 80104fe:	4611      	mov	r1, r2
 8010500:	4618      	mov	r0, r3
 8010502:	f001 fa31 	bl	8011968 <xTaskCheckForTimeOut>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d123      	bne.n	8010554 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801050c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801050e:	f000 fade 	bl	8010ace <prvIsQueueEmpty>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d017      	beq.n	8010548 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051a:	3324      	adds	r3, #36	; 0x24
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	4611      	mov	r1, r2
 8010520:	4618      	mov	r0, r3
 8010522:	f001 f957 	bl	80117d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010528:	f000 fa7f 	bl	8010a2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801052c:	f000 ff74 	bl	8011418 <xTaskResumeAll>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d189      	bne.n	801044a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010536:	4b10      	ldr	r3, [pc, #64]	; (8010578 <xQueueReceive+0x1bc>)
 8010538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801053c:	601a      	str	r2, [r3, #0]
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	e780      	b.n	801044a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801054a:	f000 fa6e 	bl	8010a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801054e:	f000 ff63 	bl	8011418 <xTaskResumeAll>
 8010552:	e77a      	b.n	801044a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010556:	f000 fa68 	bl	8010a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801055a:	f000 ff5d 	bl	8011418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801055e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010560:	f000 fab5 	bl	8010ace <prvIsQueueEmpty>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	f43f af6f 	beq.w	801044a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801056c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801056e:	4618      	mov	r0, r3
 8010570:	3730      	adds	r7, #48	; 0x30
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	e000ed04 	.word	0xe000ed04

0801057c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b08e      	sub	sp, #56	; 0x38
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010586:	2300      	movs	r3, #0
 8010588:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801058e:	2300      	movs	r3, #0
 8010590:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010594:	2b00      	cmp	r3, #0
 8010596:	d10a      	bne.n	80105ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059c:	f383 8811 	msr	BASEPRI, r3
 80105a0:	f3bf 8f6f 	isb	sy
 80105a4:	f3bf 8f4f 	dsb	sy
 80105a8:	623b      	str	r3, [r7, #32]
}
 80105aa:	bf00      	nop
 80105ac:	e7fe      	b.n	80105ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80105ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00a      	beq.n	80105cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80105b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ba:	f383 8811 	msr	BASEPRI, r3
 80105be:	f3bf 8f6f 	isb	sy
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	61fb      	str	r3, [r7, #28]
}
 80105c8:	bf00      	nop
 80105ca:	e7fe      	b.n	80105ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105cc:	f001 fb14 	bl	8011bf8 <xTaskGetSchedulerState>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d102      	bne.n	80105dc <xQueueSemaphoreTake+0x60>
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d101      	bne.n	80105e0 <xQueueSemaphoreTake+0x64>
 80105dc:	2301      	movs	r3, #1
 80105de:	e000      	b.n	80105e2 <xQueueSemaphoreTake+0x66>
 80105e0:	2300      	movs	r3, #0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d10a      	bne.n	80105fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80105e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ea:	f383 8811 	msr	BASEPRI, r3
 80105ee:	f3bf 8f6f 	isb	sy
 80105f2:	f3bf 8f4f 	dsb	sy
 80105f6:	61bb      	str	r3, [r7, #24]
}
 80105f8:	bf00      	nop
 80105fa:	e7fe      	b.n	80105fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105fc:	f002 f952 	bl	80128a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010604:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010608:	2b00      	cmp	r3, #0
 801060a:	d024      	beq.n	8010656 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801060c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060e:	1e5a      	subs	r2, r3, #1
 8010610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010612:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d104      	bne.n	8010626 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801061c:	f001 fc62 	bl	8011ee4 <pvTaskIncrementMutexHeldCount>
 8010620:	4602      	mov	r2, r0
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010624:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010628:	691b      	ldr	r3, [r3, #16]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00f      	beq.n	801064e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010630:	3310      	adds	r3, #16
 8010632:	4618      	mov	r0, r3
 8010634:	f001 f91e 	bl	8011874 <xTaskRemoveFromEventList>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d007      	beq.n	801064e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801063e:	4b54      	ldr	r3, [pc, #336]	; (8010790 <xQueueSemaphoreTake+0x214>)
 8010640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010644:	601a      	str	r2, [r3, #0]
 8010646:	f3bf 8f4f 	dsb	sy
 801064a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801064e:	f002 f959 	bl	8012904 <vPortExitCritical>
				return pdPASS;
 8010652:	2301      	movs	r3, #1
 8010654:	e097      	b.n	8010786 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d111      	bne.n	8010680 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00a      	beq.n	8010678 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010666:	f383 8811 	msr	BASEPRI, r3
 801066a:	f3bf 8f6f 	isb	sy
 801066e:	f3bf 8f4f 	dsb	sy
 8010672:	617b      	str	r3, [r7, #20]
}
 8010674:	bf00      	nop
 8010676:	e7fe      	b.n	8010676 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010678:	f002 f944 	bl	8012904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801067c:	2300      	movs	r3, #0
 801067e:	e082      	b.n	8010786 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010682:	2b00      	cmp	r3, #0
 8010684:	d106      	bne.n	8010694 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010686:	f107 030c 	add.w	r3, r7, #12
 801068a:	4618      	mov	r0, r3
 801068c:	f001 f956 	bl	801193c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010690:	2301      	movs	r3, #1
 8010692:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010694:	f002 f936 	bl	8012904 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010698:	f000 feb0 	bl	80113fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801069c:	f002 f902 	bl	80128a4 <vPortEnterCritical>
 80106a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106a6:	b25b      	sxtb	r3, r3
 80106a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ac:	d103      	bne.n	80106b6 <xQueueSemaphoreTake+0x13a>
 80106ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b0:	2200      	movs	r2, #0
 80106b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106bc:	b25b      	sxtb	r3, r3
 80106be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c2:	d103      	bne.n	80106cc <xQueueSemaphoreTake+0x150>
 80106c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c6:	2200      	movs	r2, #0
 80106c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106cc:	f002 f91a 	bl	8012904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106d0:	463a      	mov	r2, r7
 80106d2:	f107 030c 	add.w	r3, r7, #12
 80106d6:	4611      	mov	r1, r2
 80106d8:	4618      	mov	r0, r3
 80106da:	f001 f945 	bl	8011968 <xTaskCheckForTimeOut>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d132      	bne.n	801074a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106e6:	f000 f9f2 	bl	8010ace <prvIsQueueEmpty>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d026      	beq.n	801073e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d109      	bne.n	801070c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80106f8:	f002 f8d4 	bl	80128a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	4618      	mov	r0, r3
 8010702:	f001 fa97 	bl	8011c34 <xTaskPriorityInherit>
 8010706:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010708:	f002 f8fc 	bl	8012904 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070e:	3324      	adds	r3, #36	; 0x24
 8010710:	683a      	ldr	r2, [r7, #0]
 8010712:	4611      	mov	r1, r2
 8010714:	4618      	mov	r0, r3
 8010716:	f001 f85d 	bl	80117d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801071a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801071c:	f000 f985 	bl	8010a2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010720:	f000 fe7a 	bl	8011418 <xTaskResumeAll>
 8010724:	4603      	mov	r3, r0
 8010726:	2b00      	cmp	r3, #0
 8010728:	f47f af68 	bne.w	80105fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801072c:	4b18      	ldr	r3, [pc, #96]	; (8010790 <xQueueSemaphoreTake+0x214>)
 801072e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010732:	601a      	str	r2, [r3, #0]
 8010734:	f3bf 8f4f 	dsb	sy
 8010738:	f3bf 8f6f 	isb	sy
 801073c:	e75e      	b.n	80105fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801073e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010740:	f000 f973 	bl	8010a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010744:	f000 fe68 	bl	8011418 <xTaskResumeAll>
 8010748:	e758      	b.n	80105fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801074a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801074c:	f000 f96d 	bl	8010a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010750:	f000 fe62 	bl	8011418 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010756:	f000 f9ba 	bl	8010ace <prvIsQueueEmpty>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	f43f af4d 	beq.w	80105fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00d      	beq.n	8010784 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010768:	f002 f89c 	bl	80128a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801076c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801076e:	f000 f8b4 	bl	80108da <prvGetDisinheritPriorityAfterTimeout>
 8010772:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801077a:	4618      	mov	r0, r3
 801077c:	f001 fb30 	bl	8011de0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010780:	f002 f8c0 	bl	8012904 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010786:	4618      	mov	r0, r3
 8010788:	3738      	adds	r7, #56	; 0x38
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	e000ed04 	.word	0xe000ed04

08010794 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b08e      	sub	sp, #56	; 0x38
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d10a      	bne.n	80107c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80107aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ae:	f383 8811 	msr	BASEPRI, r3
 80107b2:	f3bf 8f6f 	isb	sy
 80107b6:	f3bf 8f4f 	dsb	sy
 80107ba:	623b      	str	r3, [r7, #32]
}
 80107bc:	bf00      	nop
 80107be:	e7fe      	b.n	80107be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d103      	bne.n	80107ce <xQueueReceiveFromISR+0x3a>
 80107c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d101      	bne.n	80107d2 <xQueueReceiveFromISR+0x3e>
 80107ce:	2301      	movs	r3, #1
 80107d0:	e000      	b.n	80107d4 <xQueueReceiveFromISR+0x40>
 80107d2:	2300      	movs	r3, #0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d10a      	bne.n	80107ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80107d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107dc:	f383 8811 	msr	BASEPRI, r3
 80107e0:	f3bf 8f6f 	isb	sy
 80107e4:	f3bf 8f4f 	dsb	sy
 80107e8:	61fb      	str	r3, [r7, #28]
}
 80107ea:	bf00      	nop
 80107ec:	e7fe      	b.n	80107ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107ee:	f002 f93b 	bl	8012a68 <vPortValidateInterruptPriority>
	__asm volatile
 80107f2:	f3ef 8211 	mrs	r2, BASEPRI
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	61ba      	str	r2, [r7, #24]
 8010808:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801080a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801080c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010812:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010816:	2b00      	cmp	r3, #0
 8010818:	d02f      	beq.n	801087a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010824:	68b9      	ldr	r1, [r7, #8]
 8010826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010828:	f000 f8d9 	bl	80109de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082e:	1e5a      	subs	r2, r3, #1
 8010830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010832:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801083c:	d112      	bne.n	8010864 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010840:	691b      	ldr	r3, [r3, #16]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d016      	beq.n	8010874 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010848:	3310      	adds	r3, #16
 801084a:	4618      	mov	r0, r3
 801084c:	f001 f812 	bl	8011874 <xTaskRemoveFromEventList>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00e      	beq.n	8010874 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00b      	beq.n	8010874 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2201      	movs	r2, #1
 8010860:	601a      	str	r2, [r3, #0]
 8010862:	e007      	b.n	8010874 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010868:	3301      	adds	r3, #1
 801086a:	b2db      	uxtb	r3, r3
 801086c:	b25a      	sxtb	r2, r3
 801086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010874:	2301      	movs	r3, #1
 8010876:	637b      	str	r3, [r7, #52]	; 0x34
 8010878:	e001      	b.n	801087e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801087a:	2300      	movs	r3, #0
 801087c:	637b      	str	r3, [r7, #52]	; 0x34
 801087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010880:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	f383 8811 	msr	BASEPRI, r3
}
 8010888:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801088a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801088c:	4618      	mov	r0, r3
 801088e:	3738      	adds	r7, #56	; 0x38
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10a      	bne.n	80108bc <vQueueDelete+0x28>
	__asm volatile
 80108a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108aa:	f383 8811 	msr	BASEPRI, r3
 80108ae:	f3bf 8f6f 	isb	sy
 80108b2:	f3bf 8f4f 	dsb	sy
 80108b6:	60bb      	str	r3, [r7, #8]
}
 80108b8:	bf00      	nop
 80108ba:	e7fe      	b.n	80108ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f000 f95f 	bl	8010b80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d102      	bne.n	80108d2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80108cc:	68f8      	ldr	r0, [r7, #12]
 80108ce:	f002 f9d7 	bl	8012c80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80108d2:	bf00      	nop
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80108da:	b480      	push	{r7}
 80108dc:	b085      	sub	sp, #20
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d006      	beq.n	80108f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	e001      	b.n	80108fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80108f8:	2300      	movs	r3, #0
 80108fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80108fc:	68fb      	ldr	r3, [r7, #12]
	}
 80108fe:	4618      	mov	r0, r3
 8010900:	3714      	adds	r7, #20
 8010902:	46bd      	mov	sp, r7
 8010904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010908:	4770      	bx	lr

0801090a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801090a:	b580      	push	{r7, lr}
 801090c:	b086      	sub	sp, #24
 801090e:	af00      	add	r7, sp, #0
 8010910:	60f8      	str	r0, [r7, #12]
 8010912:	60b9      	str	r1, [r7, #8]
 8010914:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010916:	2300      	movs	r3, #0
 8010918:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801091e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010924:	2b00      	cmp	r3, #0
 8010926:	d10d      	bne.n	8010944 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d14d      	bne.n	80109cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	4618      	mov	r0, r3
 8010936:	f001 f9e5 	bl	8011d04 <xTaskPriorityDisinherit>
 801093a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2200      	movs	r2, #0
 8010940:	609a      	str	r2, [r3, #8]
 8010942:	e043      	b.n	80109cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d119      	bne.n	801097e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	6858      	ldr	r0, [r3, #4]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010952:	461a      	mov	r2, r3
 8010954:	68b9      	ldr	r1, [r7, #8]
 8010956:	f002 fadd 	bl	8012f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	685a      	ldr	r2, [r3, #4]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010962:	441a      	add	r2, r3
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	685a      	ldr	r2, [r3, #4]
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	429a      	cmp	r2, r3
 8010972:	d32b      	bcc.n	80109cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	605a      	str	r2, [r3, #4]
 801097c:	e026      	b.n	80109cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	68d8      	ldr	r0, [r3, #12]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010986:	461a      	mov	r2, r3
 8010988:	68b9      	ldr	r1, [r7, #8]
 801098a:	f002 fac3 	bl	8012f14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	68da      	ldr	r2, [r3, #12]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010996:	425b      	negs	r3, r3
 8010998:	441a      	add	r2, r3
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	68da      	ldr	r2, [r3, #12]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d207      	bcs.n	80109ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	689a      	ldr	r2, [r3, #8]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b2:	425b      	negs	r3, r3
 80109b4:	441a      	add	r2, r3
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2b02      	cmp	r3, #2
 80109be:	d105      	bne.n	80109cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d002      	beq.n	80109cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	3b01      	subs	r3, #1
 80109ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	1c5a      	adds	r2, r3, #1
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80109d4:	697b      	ldr	r3, [r7, #20]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3718      	adds	r7, #24
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80109de:	b580      	push	{r7, lr}
 80109e0:	b082      	sub	sp, #8
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
 80109e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d018      	beq.n	8010a22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	68da      	ldr	r2, [r3, #12]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f8:	441a      	add	r2, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	68da      	ldr	r2, [r3, #12]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	689b      	ldr	r3, [r3, #8]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d303      	bcc.n	8010a12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68d9      	ldr	r1, [r3, #12]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	6838      	ldr	r0, [r7, #0]
 8010a1e:	f002 fa79 	bl	8012f14 <memcpy>
	}
}
 8010a22:	bf00      	nop
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b084      	sub	sp, #16
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010a32:	f001 ff37 	bl	80128a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a3e:	e011      	b.n	8010a64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d012      	beq.n	8010a6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	3324      	adds	r3, #36	; 0x24
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 ff11 	bl	8011874 <xTaskRemoveFromEventList>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d001      	beq.n	8010a5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010a58:	f000 ffe8 	bl	8011a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010a5c:	7bfb      	ldrb	r3, [r7, #15]
 8010a5e:	3b01      	subs	r3, #1
 8010a60:	b2db      	uxtb	r3, r3
 8010a62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	dce9      	bgt.n	8010a40 <prvUnlockQueue+0x16>
 8010a6c:	e000      	b.n	8010a70 <prvUnlockQueue+0x46>
					break;
 8010a6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	22ff      	movs	r2, #255	; 0xff
 8010a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010a78:	f001 ff44 	bl	8012904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a7c:	f001 ff12 	bl	80128a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a88:	e011      	b.n	8010aae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	691b      	ldr	r3, [r3, #16]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d012      	beq.n	8010ab8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	3310      	adds	r3, #16
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 feec 	bl	8011874 <xTaskRemoveFromEventList>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d001      	beq.n	8010aa6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010aa2:	f000 ffc3 	bl	8011a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010aa6:	7bbb      	ldrb	r3, [r7, #14]
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	dce9      	bgt.n	8010a8a <prvUnlockQueue+0x60>
 8010ab6:	e000      	b.n	8010aba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010ab8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	22ff      	movs	r2, #255	; 0xff
 8010abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010ac2:	f001 ff1f 	bl	8012904 <vPortExitCritical>
}
 8010ac6:	bf00      	nop
 8010ac8:	3710      	adds	r7, #16
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}

08010ace <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b084      	sub	sp, #16
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ad6:	f001 fee5 	bl	80128a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d102      	bne.n	8010ae8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	60fb      	str	r3, [r7, #12]
 8010ae6:	e001      	b.n	8010aec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010aec:	f001 ff0a 	bl	8012904 <vPortExitCritical>

	return xReturn;
 8010af0:	68fb      	ldr	r3, [r7, #12]
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3710      	adds	r7, #16
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b084      	sub	sp, #16
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b02:	f001 fecf 	bl	80128a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d102      	bne.n	8010b18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010b12:	2301      	movs	r3, #1
 8010b14:	60fb      	str	r3, [r7, #12]
 8010b16:	e001      	b.n	8010b1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b1c:	f001 fef2 	bl	8012904 <vPortExitCritical>

	return xReturn;
 8010b20:	68fb      	ldr	r3, [r7, #12]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
	...

08010b2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b36:	2300      	movs	r3, #0
 8010b38:	60fb      	str	r3, [r7, #12]
 8010b3a:	e014      	b.n	8010b66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010b3c:	4a0f      	ldr	r2, [pc, #60]	; (8010b7c <vQueueAddToRegistry+0x50>)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10b      	bne.n	8010b60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010b48:	490c      	ldr	r1, [pc, #48]	; (8010b7c <vQueueAddToRegistry+0x50>)
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	683a      	ldr	r2, [r7, #0]
 8010b4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010b52:	4a0a      	ldr	r2, [pc, #40]	; (8010b7c <vQueueAddToRegistry+0x50>)
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	00db      	lsls	r3, r3, #3
 8010b58:	4413      	add	r3, r2
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010b5e:	e006      	b.n	8010b6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	3301      	adds	r3, #1
 8010b64:	60fb      	str	r3, [r7, #12]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2b07      	cmp	r3, #7
 8010b6a:	d9e7      	bls.n	8010b3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b6c:	bf00      	nop
 8010b6e:	bf00      	nop
 8010b70:	3714      	adds	r7, #20
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop
 8010b7c:	24027b00 	.word	0x24027b00

08010b80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010b80:	b480      	push	{r7}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b88:	2300      	movs	r3, #0
 8010b8a:	60fb      	str	r3, [r7, #12]
 8010b8c:	e016      	b.n	8010bbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010b8e:	4a10      	ldr	r2, [pc, #64]	; (8010bd0 <vQueueUnregisterQueue+0x50>)
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	00db      	lsls	r3, r3, #3
 8010b94:	4413      	add	r3, r2
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d10b      	bne.n	8010bb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010b9e:	4a0c      	ldr	r2, [pc, #48]	; (8010bd0 <vQueueUnregisterQueue+0x50>)
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010ba8:	4a09      	ldr	r2, [pc, #36]	; (8010bd0 <vQueueUnregisterQueue+0x50>)
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	00db      	lsls	r3, r3, #3
 8010bae:	4413      	add	r3, r2
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	605a      	str	r2, [r3, #4]
				break;
 8010bb4:	e006      	b.n	8010bc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	60fb      	str	r3, [r7, #12]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2b07      	cmp	r3, #7
 8010bc0:	d9e5      	bls.n	8010b8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010bc2:	bf00      	nop
 8010bc4:	bf00      	nop
 8010bc6:	3714      	adds	r7, #20
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bce:	4770      	bx	lr
 8010bd0:	24027b00 	.word	0x24027b00

08010bd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b086      	sub	sp, #24
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010be4:	f001 fe5e 	bl	80128a4 <vPortEnterCritical>
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bee:	b25b      	sxtb	r3, r3
 8010bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf4:	d103      	bne.n	8010bfe <vQueueWaitForMessageRestricted+0x2a>
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c04:	b25b      	sxtb	r3, r3
 8010c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0a:	d103      	bne.n	8010c14 <vQueueWaitForMessageRestricted+0x40>
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c14:	f001 fe76 	bl	8012904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d106      	bne.n	8010c2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	3324      	adds	r3, #36	; 0x24
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	68b9      	ldr	r1, [r7, #8]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f000 fdf7 	bl	801181c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010c2e:	6978      	ldr	r0, [r7, #20]
 8010c30:	f7ff fefb 	bl	8010a2a <prvUnlockQueue>
	}
 8010c34:	bf00      	nop
 8010c36:	3718      	adds	r7, #24
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b08e      	sub	sp, #56	; 0x38
 8010c40:	af04      	add	r7, sp, #16
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]
 8010c48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10a      	bne.n	8010c66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	623b      	str	r3, [r7, #32]
}
 8010c62:	bf00      	nop
 8010c64:	e7fe      	b.n	8010c64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10a      	bne.n	8010c82 <xTaskCreateStatic+0x46>
	__asm volatile
 8010c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c70:	f383 8811 	msr	BASEPRI, r3
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	61fb      	str	r3, [r7, #28]
}
 8010c7e:	bf00      	nop
 8010c80:	e7fe      	b.n	8010c80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c82:	23bc      	movs	r3, #188	; 0xbc
 8010c84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	2bbc      	cmp	r3, #188	; 0xbc
 8010c8a:	d00a      	beq.n	8010ca2 <xTaskCreateStatic+0x66>
	__asm volatile
 8010c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c90:	f383 8811 	msr	BASEPRI, r3
 8010c94:	f3bf 8f6f 	isb	sy
 8010c98:	f3bf 8f4f 	dsb	sy
 8010c9c:	61bb      	str	r3, [r7, #24]
}
 8010c9e:	bf00      	nop
 8010ca0:	e7fe      	b.n	8010ca0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010ca2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d01e      	beq.n	8010ce8 <xTaskCreateStatic+0xac>
 8010caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d01b      	beq.n	8010ce8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	2202      	movs	r2, #2
 8010cbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	9303      	str	r3, [sp, #12]
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	9302      	str	r3, [sp, #8]
 8010cca:	f107 0314 	add.w	r3, r7, #20
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	68b9      	ldr	r1, [r7, #8]
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	f000 f850 	bl	8010d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ce2:	f000 f8f3 	bl	8010ecc <prvAddNewTaskToReadyList>
 8010ce6:	e001      	b.n	8010cec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010cec:	697b      	ldr	r3, [r7, #20]
	}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3728      	adds	r7, #40	; 0x28
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010cf6:	b580      	push	{r7, lr}
 8010cf8:	b08c      	sub	sp, #48	; 0x30
 8010cfa:	af04      	add	r7, sp, #16
 8010cfc:	60f8      	str	r0, [r7, #12]
 8010cfe:	60b9      	str	r1, [r7, #8]
 8010d00:	603b      	str	r3, [r7, #0]
 8010d02:	4613      	mov	r3, r2
 8010d04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d06:	88fb      	ldrh	r3, [r7, #6]
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f001 feec 	bl	8012ae8 <pvPortMalloc>
 8010d10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00e      	beq.n	8010d36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d18:	20bc      	movs	r0, #188	; 0xbc
 8010d1a:	f001 fee5 	bl	8012ae8 <pvPortMalloc>
 8010d1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d20:	69fb      	ldr	r3, [r7, #28]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d003      	beq.n	8010d2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	697a      	ldr	r2, [r7, #20]
 8010d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8010d2c:	e005      	b.n	8010d3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d2e:	6978      	ldr	r0, [r7, #20]
 8010d30:	f001 ffa6 	bl	8012c80 <vPortFree>
 8010d34:	e001      	b.n	8010d3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d36:	2300      	movs	r3, #0
 8010d38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d017      	beq.n	8010d70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d48:	88fa      	ldrh	r2, [r7, #6]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	9303      	str	r3, [sp, #12]
 8010d4e:	69fb      	ldr	r3, [r7, #28]
 8010d50:	9302      	str	r3, [sp, #8]
 8010d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d58:	9300      	str	r3, [sp, #0]
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f000 f80e 	bl	8010d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d64:	69f8      	ldr	r0, [r7, #28]
 8010d66:	f000 f8b1 	bl	8010ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	61bb      	str	r3, [r7, #24]
 8010d6e:	e002      	b.n	8010d76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d70:	f04f 33ff 	mov.w	r3, #4294967295
 8010d74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d76:	69bb      	ldr	r3, [r7, #24]
	}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3720      	adds	r7, #32
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b088      	sub	sp, #32
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	461a      	mov	r2, r3
 8010d98:	21a5      	movs	r1, #165	; 0xa5
 8010d9a:	f002 f8c9 	bl	8012f30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010da2:	6879      	ldr	r1, [r7, #4]
 8010da4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010da8:	440b      	add	r3, r1
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	4413      	add	r3, r2
 8010dae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	f023 0307 	bic.w	r3, r3, #7
 8010db6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	f003 0307 	and.w	r3, r3, #7
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00a      	beq.n	8010dd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	617b      	str	r3, [r7, #20]
}
 8010dd4:	bf00      	nop
 8010dd6:	e7fe      	b.n	8010dd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d01f      	beq.n	8010e1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010dde:	2300      	movs	r3, #0
 8010de0:	61fb      	str	r3, [r7, #28]
 8010de2:	e012      	b.n	8010e0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010de4:	68ba      	ldr	r2, [r7, #8]
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	4413      	add	r3, r2
 8010dea:	7819      	ldrb	r1, [r3, #0]
 8010dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	4413      	add	r3, r2
 8010df2:	3334      	adds	r3, #52	; 0x34
 8010df4:	460a      	mov	r2, r1
 8010df6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010df8:	68ba      	ldr	r2, [r7, #8]
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d006      	beq.n	8010e12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	3301      	adds	r3, #1
 8010e08:	61fb      	str	r3, [r7, #28]
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	2b0f      	cmp	r3, #15
 8010e0e:	d9e9      	bls.n	8010de4 <prvInitialiseNewTask+0x64>
 8010e10:	e000      	b.n	8010e14 <prvInitialiseNewTask+0x94>
			{
				break;
 8010e12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e16:	2200      	movs	r2, #0
 8010e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e1c:	e003      	b.n	8010e26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	2b37      	cmp	r3, #55	; 0x37
 8010e2a:	d901      	bls.n	8010e30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e2c:	2337      	movs	r3, #55	; 0x37
 8010e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3e:	2200      	movs	r2, #0
 8010e40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e44:	3304      	adds	r3, #4
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7fe fe56 	bl	800faf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4e:	3318      	adds	r3, #24
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7fe fe51 	bl	800faf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7e:	3354      	adds	r3, #84	; 0x54
 8010e80:	2260      	movs	r2, #96	; 0x60
 8010e82:	2100      	movs	r1, #0
 8010e84:	4618      	mov	r0, r3
 8010e86:	f002 f853 	bl	8012f30 <memset>
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8c:	4a0c      	ldr	r2, [pc, #48]	; (8010ec0 <prvInitialiseNewTask+0x140>)
 8010e8e:	659a      	str	r2, [r3, #88]	; 0x58
 8010e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e92:	4a0c      	ldr	r2, [pc, #48]	; (8010ec4 <prvInitialiseNewTask+0x144>)
 8010e94:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e98:	4a0b      	ldr	r2, [pc, #44]	; (8010ec8 <prvInitialiseNewTask+0x148>)
 8010e9a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	68f9      	ldr	r1, [r7, #12]
 8010ea0:	69b8      	ldr	r0, [r7, #24]
 8010ea2:	f001 fbd5 	bl	8012650 <pxPortInitialiseStack>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eaa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d002      	beq.n	8010eb8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010eb8:	bf00      	nop
 8010eba:	3720      	adds	r7, #32
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	08013a68 	.word	0x08013a68
 8010ec4:	08013a88 	.word	0x08013a88
 8010ec8:	08013a48 	.word	0x08013a48

08010ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ed4:	f001 fce6 	bl	80128a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ed8:	4b2d      	ldr	r3, [pc, #180]	; (8010f90 <prvAddNewTaskToReadyList+0xc4>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	3301      	adds	r3, #1
 8010ede:	4a2c      	ldr	r2, [pc, #176]	; (8010f90 <prvAddNewTaskToReadyList+0xc4>)
 8010ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ee2:	4b2c      	ldr	r3, [pc, #176]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d109      	bne.n	8010efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010eea:	4a2a      	ldr	r2, [pc, #168]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ef0:	4b27      	ldr	r3, [pc, #156]	; (8010f90 <prvAddNewTaskToReadyList+0xc4>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d110      	bne.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ef8:	f000 fdbc 	bl	8011a74 <prvInitialiseTaskLists>
 8010efc:	e00d      	b.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010efe:	4b26      	ldr	r3, [pc, #152]	; (8010f98 <prvAddNewTaskToReadyList+0xcc>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d109      	bne.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f06:	4b23      	ldr	r3, [pc, #140]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d802      	bhi.n	8010f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f14:	4a1f      	ldr	r2, [pc, #124]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f1a:	4b20      	ldr	r3, [pc, #128]	; (8010f9c <prvAddNewTaskToReadyList+0xd0>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	4a1e      	ldr	r2, [pc, #120]	; (8010f9c <prvAddNewTaskToReadyList+0xd0>)
 8010f22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f24:	4b1d      	ldr	r3, [pc, #116]	; (8010f9c <prvAddNewTaskToReadyList+0xd0>)
 8010f26:	681a      	ldr	r2, [r3, #0]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f30:	4b1b      	ldr	r3, [pc, #108]	; (8010fa0 <prvAddNewTaskToReadyList+0xd4>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d903      	bls.n	8010f40 <prvAddNewTaskToReadyList+0x74>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f3c:	4a18      	ldr	r2, [pc, #96]	; (8010fa0 <prvAddNewTaskToReadyList+0xd4>)
 8010f3e:	6013      	str	r3, [r2, #0]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f44:	4613      	mov	r3, r2
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	4413      	add	r3, r2
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	4a15      	ldr	r2, [pc, #84]	; (8010fa4 <prvAddNewTaskToReadyList+0xd8>)
 8010f4e:	441a      	add	r2, r3
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	3304      	adds	r3, #4
 8010f54:	4619      	mov	r1, r3
 8010f56:	4610      	mov	r0, r2
 8010f58:	f7fe fddb 	bl	800fb12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f5c:	f001 fcd2 	bl	8012904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f60:	4b0d      	ldr	r3, [pc, #52]	; (8010f98 <prvAddNewTaskToReadyList+0xcc>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00e      	beq.n	8010f86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f68:	4b0a      	ldr	r3, [pc, #40]	; (8010f94 <prvAddNewTaskToReadyList+0xc8>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d207      	bcs.n	8010f86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f76:	4b0c      	ldr	r3, [pc, #48]	; (8010fa8 <prvAddNewTaskToReadyList+0xdc>)
 8010f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f7c:	601a      	str	r2, [r3, #0]
 8010f7e:	f3bf 8f4f 	dsb	sy
 8010f82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f86:	bf00      	nop
 8010f88:	3708      	adds	r7, #8
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	24008e58 	.word	0x24008e58
 8010f94:	24008984 	.word	0x24008984
 8010f98:	24008e64 	.word	0x24008e64
 8010f9c:	24008e74 	.word	0x24008e74
 8010fa0:	24008e60 	.word	0x24008e60
 8010fa4:	24008988 	.word	0x24008988
 8010fa8:	e000ed04 	.word	0xe000ed04

08010fac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b08a      	sub	sp, #40	; 0x28
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d10a      	bne.n	8010fd6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8010fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc4:	f383 8811 	msr	BASEPRI, r3
 8010fc8:	f3bf 8f6f 	isb	sy
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	617b      	str	r3, [r7, #20]
}
 8010fd2:	bf00      	nop
 8010fd4:	e7fe      	b.n	8010fd4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d10a      	bne.n	8010ff2 <vTaskDelayUntil+0x46>
	__asm volatile
 8010fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe0:	f383 8811 	msr	BASEPRI, r3
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	f3bf 8f4f 	dsb	sy
 8010fec:	613b      	str	r3, [r7, #16]
}
 8010fee:	bf00      	nop
 8010ff0:	e7fe      	b.n	8010ff0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8010ff2:	4b2a      	ldr	r3, [pc, #168]	; (801109c <vTaskDelayUntil+0xf0>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00a      	beq.n	8011010 <vTaskDelayUntil+0x64>
	__asm volatile
 8010ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	60fb      	str	r3, [r7, #12]
}
 801100c:	bf00      	nop
 801100e:	e7fe      	b.n	801100e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8011010:	f000 f9f4 	bl	80113fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011014:	4b22      	ldr	r3, [pc, #136]	; (80110a0 <vTaskDelayUntil+0xf4>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	683a      	ldr	r2, [r7, #0]
 8011020:	4413      	add	r3, r2
 8011022:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	6a3a      	ldr	r2, [r7, #32]
 801102a:	429a      	cmp	r2, r3
 801102c:	d20b      	bcs.n	8011046 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	69fa      	ldr	r2, [r7, #28]
 8011034:	429a      	cmp	r2, r3
 8011036:	d211      	bcs.n	801105c <vTaskDelayUntil+0xb0>
 8011038:	69fa      	ldr	r2, [r7, #28]
 801103a:	6a3b      	ldr	r3, [r7, #32]
 801103c:	429a      	cmp	r2, r3
 801103e:	d90d      	bls.n	801105c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011040:	2301      	movs	r3, #1
 8011042:	627b      	str	r3, [r7, #36]	; 0x24
 8011044:	e00a      	b.n	801105c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	69fa      	ldr	r2, [r7, #28]
 801104c:	429a      	cmp	r2, r3
 801104e:	d303      	bcc.n	8011058 <vTaskDelayUntil+0xac>
 8011050:	69fa      	ldr	r2, [r7, #28]
 8011052:	6a3b      	ldr	r3, [r7, #32]
 8011054:	429a      	cmp	r2, r3
 8011056:	d901      	bls.n	801105c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011058:	2301      	movs	r3, #1
 801105a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	69fa      	ldr	r2, [r7, #28]
 8011060:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011064:	2b00      	cmp	r3, #0
 8011066:	d006      	beq.n	8011076 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011068:	69fa      	ldr	r2, [r7, #28]
 801106a:	6a3b      	ldr	r3, [r7, #32]
 801106c:	1ad3      	subs	r3, r2, r3
 801106e:	2100      	movs	r1, #0
 8011070:	4618      	mov	r0, r3
 8011072:	f000 ff4b 	bl	8011f0c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8011076:	f000 f9cf 	bl	8011418 <xTaskResumeAll>
 801107a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801107c:	69bb      	ldr	r3, [r7, #24]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d107      	bne.n	8011092 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8011082:	4b08      	ldr	r3, [pc, #32]	; (80110a4 <vTaskDelayUntil+0xf8>)
 8011084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011088:	601a      	str	r2, [r3, #0]
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011092:	bf00      	nop
 8011094:	3728      	adds	r7, #40	; 0x28
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	24008e80 	.word	0x24008e80
 80110a0:	24008e5c 	.word	0x24008e5c
 80110a4:	e000ed04 	.word	0xe000ed04

080110a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80110b0:	2300      	movs	r3, #0
 80110b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d017      	beq.n	80110ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80110ba:	4b13      	ldr	r3, [pc, #76]	; (8011108 <vTaskDelay+0x60>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d00a      	beq.n	80110d8 <vTaskDelay+0x30>
	__asm volatile
 80110c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c6:	f383 8811 	msr	BASEPRI, r3
 80110ca:	f3bf 8f6f 	isb	sy
 80110ce:	f3bf 8f4f 	dsb	sy
 80110d2:	60bb      	str	r3, [r7, #8]
}
 80110d4:	bf00      	nop
 80110d6:	e7fe      	b.n	80110d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80110d8:	f000 f990 	bl	80113fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80110dc:	2100      	movs	r1, #0
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 ff14 	bl	8011f0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80110e4:	f000 f998 	bl	8011418 <xTaskResumeAll>
 80110e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d107      	bne.n	8011100 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80110f0:	4b06      	ldr	r3, [pc, #24]	; (801110c <vTaskDelay+0x64>)
 80110f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110f6:	601a      	str	r2, [r3, #0]
 80110f8:	f3bf 8f4f 	dsb	sy
 80110fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011100:	bf00      	nop
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	24008e80 	.word	0x24008e80
 801110c:	e000ed04 	.word	0xe000ed04

08011110 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011118:	f001 fbc4 	bl	80128a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d102      	bne.n	8011128 <vTaskSuspend+0x18>
 8011122:	4b30      	ldr	r3, [pc, #192]	; (80111e4 <vTaskSuspend+0xd4>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	e000      	b.n	801112a <vTaskSuspend+0x1a>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	3304      	adds	r3, #4
 8011130:	4618      	mov	r0, r3
 8011132:	f7fe fd4b 	bl	800fbcc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801113a:	2b00      	cmp	r3, #0
 801113c:	d004      	beq.n	8011148 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	3318      	adds	r3, #24
 8011142:	4618      	mov	r0, r3
 8011144:	f7fe fd42 	bl	800fbcc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	3304      	adds	r3, #4
 801114c:	4619      	mov	r1, r3
 801114e:	4826      	ldr	r0, [pc, #152]	; (80111e8 <vTaskSuspend+0xd8>)
 8011150:	f7fe fcdf 	bl	800fb12 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801115a:	b2db      	uxtb	r3, r3
 801115c:	2b01      	cmp	r3, #1
 801115e:	d103      	bne.n	8011168 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2200      	movs	r2, #0
 8011164:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8011168:	f001 fbcc 	bl	8012904 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801116c:	4b1f      	ldr	r3, [pc, #124]	; (80111ec <vTaskSuspend+0xdc>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d005      	beq.n	8011180 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8011174:	f001 fb96 	bl	80128a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8011178:	f000 fd1e 	bl	8011bb8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801117c:	f001 fbc2 	bl	8012904 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8011180:	4b18      	ldr	r3, [pc, #96]	; (80111e4 <vTaskSuspend+0xd4>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	429a      	cmp	r2, r3
 8011188:	d127      	bne.n	80111da <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801118a:	4b18      	ldr	r3, [pc, #96]	; (80111ec <vTaskSuspend+0xdc>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d017      	beq.n	80111c2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8011192:	4b17      	ldr	r3, [pc, #92]	; (80111f0 <vTaskSuspend+0xe0>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d00a      	beq.n	80111b0 <vTaskSuspend+0xa0>
	__asm volatile
 801119a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801119e:	f383 8811 	msr	BASEPRI, r3
 80111a2:	f3bf 8f6f 	isb	sy
 80111a6:	f3bf 8f4f 	dsb	sy
 80111aa:	60bb      	str	r3, [r7, #8]
}
 80111ac:	bf00      	nop
 80111ae:	e7fe      	b.n	80111ae <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80111b0:	4b10      	ldr	r3, [pc, #64]	; (80111f4 <vTaskSuspend+0xe4>)
 80111b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111b6:	601a      	str	r2, [r3, #0]
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111c0:	e00b      	b.n	80111da <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80111c2:	4b09      	ldr	r3, [pc, #36]	; (80111e8 <vTaskSuspend+0xd8>)
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	4b0c      	ldr	r3, [pc, #48]	; (80111f8 <vTaskSuspend+0xe8>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d103      	bne.n	80111d6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80111ce:	4b05      	ldr	r3, [pc, #20]	; (80111e4 <vTaskSuspend+0xd4>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	601a      	str	r2, [r3, #0]
	}
 80111d4:	e001      	b.n	80111da <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80111d6:	f000 fa99 	bl	801170c <vTaskSwitchContext>
	}
 80111da:	bf00      	nop
 80111dc:	3710      	adds	r7, #16
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	24008984 	.word	0x24008984
 80111e8:	24008e44 	.word	0x24008e44
 80111ec:	24008e64 	.word	0x24008e64
 80111f0:	24008e80 	.word	0x24008e80
 80111f4:	e000ed04 	.word	0xe000ed04
 80111f8:	24008e58 	.word	0x24008e58

080111fc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80111fc:	b480      	push	{r7}
 80111fe:	b087      	sub	sp, #28
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8011204:	2300      	movs	r3, #0
 8011206:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10a      	bne.n	8011228 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8011212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011216:	f383 8811 	msr	BASEPRI, r3
 801121a:	f3bf 8f6f 	isb	sy
 801121e:	f3bf 8f4f 	dsb	sy
 8011222:	60fb      	str	r3, [r7, #12]
}
 8011224:	bf00      	nop
 8011226:	e7fe      	b.n	8011226 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	695b      	ldr	r3, [r3, #20]
 801122c:	4a0a      	ldr	r2, [pc, #40]	; (8011258 <prvTaskIsTaskSuspended+0x5c>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d10a      	bne.n	8011248 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011236:	4a09      	ldr	r2, [pc, #36]	; (801125c <prvTaskIsTaskSuspended+0x60>)
 8011238:	4293      	cmp	r3, r2
 801123a:	d005      	beq.n	8011248 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801123c:	693b      	ldr	r3, [r7, #16]
 801123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011240:	2b00      	cmp	r3, #0
 8011242:	d101      	bne.n	8011248 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8011244:	2301      	movs	r3, #1
 8011246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011248:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801124a:	4618      	mov	r0, r3
 801124c:	371c      	adds	r7, #28
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	24008e44 	.word	0x24008e44
 801125c:	24008e18 	.word	0x24008e18

08011260 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d10a      	bne.n	8011288 <vTaskResume+0x28>
	__asm volatile
 8011272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	60bb      	str	r3, [r7, #8]
}
 8011284:	bf00      	nop
 8011286:	e7fe      	b.n	8011286 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8011288:	4b20      	ldr	r3, [pc, #128]	; (801130c <vTaskResume+0xac>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	68fa      	ldr	r2, [r7, #12]
 801128e:	429a      	cmp	r2, r3
 8011290:	d038      	beq.n	8011304 <vTaskResume+0xa4>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d035      	beq.n	8011304 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8011298:	f001 fb04 	bl	80128a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801129c:	68f8      	ldr	r0, [r7, #12]
 801129e:	f7ff ffad 	bl	80111fc <prvTaskIsTaskSuspended>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d02b      	beq.n	8011300 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	3304      	adds	r3, #4
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fe fc8d 	bl	800fbcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b6:	4b16      	ldr	r3, [pc, #88]	; (8011310 <vTaskResume+0xb0>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d903      	bls.n	80112c6 <vTaskResume+0x66>
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c2:	4a13      	ldr	r2, [pc, #76]	; (8011310 <vTaskResume+0xb0>)
 80112c4:	6013      	str	r3, [r2, #0]
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112ca:	4613      	mov	r3, r2
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	4413      	add	r3, r2
 80112d0:	009b      	lsls	r3, r3, #2
 80112d2:	4a10      	ldr	r2, [pc, #64]	; (8011314 <vTaskResume+0xb4>)
 80112d4:	441a      	add	r2, r3
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	3304      	adds	r3, #4
 80112da:	4619      	mov	r1, r3
 80112dc:	4610      	mov	r0, r2
 80112de:	f7fe fc18 	bl	800fb12 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112e6:	4b09      	ldr	r3, [pc, #36]	; (801130c <vTaskResume+0xac>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d307      	bcc.n	8011300 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80112f0:	4b09      	ldr	r3, [pc, #36]	; (8011318 <vTaskResume+0xb8>)
 80112f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112f6:	601a      	str	r2, [r3, #0]
 80112f8:	f3bf 8f4f 	dsb	sy
 80112fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8011300:	f001 fb00 	bl	8012904 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011304:	bf00      	nop
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	24008984 	.word	0x24008984
 8011310:	24008e60 	.word	0x24008e60
 8011314:	24008988 	.word	0x24008988
 8011318:	e000ed04 	.word	0xe000ed04

0801131c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b08a      	sub	sp, #40	; 0x28
 8011320:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011322:	2300      	movs	r3, #0
 8011324:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011326:	2300      	movs	r3, #0
 8011328:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801132a:	463a      	mov	r2, r7
 801132c:	1d39      	adds	r1, r7, #4
 801132e:	f107 0308 	add.w	r3, r7, #8
 8011332:	4618      	mov	r0, r3
 8011334:	f7fe fb8c 	bl	800fa50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011338:	6839      	ldr	r1, [r7, #0]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	68ba      	ldr	r2, [r7, #8]
 801133e:	9202      	str	r2, [sp, #8]
 8011340:	9301      	str	r3, [sp, #4]
 8011342:	2300      	movs	r3, #0
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	2300      	movs	r3, #0
 8011348:	460a      	mov	r2, r1
 801134a:	4924      	ldr	r1, [pc, #144]	; (80113dc <vTaskStartScheduler+0xc0>)
 801134c:	4824      	ldr	r0, [pc, #144]	; (80113e0 <vTaskStartScheduler+0xc4>)
 801134e:	f7ff fc75 	bl	8010c3c <xTaskCreateStatic>
 8011352:	4603      	mov	r3, r0
 8011354:	4a23      	ldr	r2, [pc, #140]	; (80113e4 <vTaskStartScheduler+0xc8>)
 8011356:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011358:	4b22      	ldr	r3, [pc, #136]	; (80113e4 <vTaskStartScheduler+0xc8>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011360:	2301      	movs	r3, #1
 8011362:	617b      	str	r3, [r7, #20]
 8011364:	e001      	b.n	801136a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011366:	2300      	movs	r3, #0
 8011368:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	2b01      	cmp	r3, #1
 801136e:	d102      	bne.n	8011376 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011370:	f000 fe20 	bl	8011fb4 <xTimerCreateTimerTask>
 8011374:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	2b01      	cmp	r3, #1
 801137a:	d11b      	bne.n	80113b4 <vTaskStartScheduler+0x98>
	__asm volatile
 801137c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011380:	f383 8811 	msr	BASEPRI, r3
 8011384:	f3bf 8f6f 	isb	sy
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	613b      	str	r3, [r7, #16]
}
 801138e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011390:	4b15      	ldr	r3, [pc, #84]	; (80113e8 <vTaskStartScheduler+0xcc>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	3354      	adds	r3, #84	; 0x54
 8011396:	4a15      	ldr	r2, [pc, #84]	; (80113ec <vTaskStartScheduler+0xd0>)
 8011398:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801139a:	4b15      	ldr	r3, [pc, #84]	; (80113f0 <vTaskStartScheduler+0xd4>)
 801139c:	f04f 32ff 	mov.w	r2, #4294967295
 80113a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80113a2:	4b14      	ldr	r3, [pc, #80]	; (80113f4 <vTaskStartScheduler+0xd8>)
 80113a4:	2201      	movs	r2, #1
 80113a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80113a8:	4b13      	ldr	r3, [pc, #76]	; (80113f8 <vTaskStartScheduler+0xdc>)
 80113aa:	2200      	movs	r2, #0
 80113ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80113ae:	f001 f9d7 	bl	8012760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80113b2:	e00e      	b.n	80113d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ba:	d10a      	bne.n	80113d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80113bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c0:	f383 8811 	msr	BASEPRI, r3
 80113c4:	f3bf 8f6f 	isb	sy
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	60fb      	str	r3, [r7, #12]
}
 80113ce:	bf00      	nop
 80113d0:	e7fe      	b.n	80113d0 <vTaskStartScheduler+0xb4>
}
 80113d2:	bf00      	nop
 80113d4:	3718      	adds	r7, #24
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	080138fc 	.word	0x080138fc
 80113e0:	08011a45 	.word	0x08011a45
 80113e4:	24008e7c 	.word	0x24008e7c
 80113e8:	24008984 	.word	0x24008984
 80113ec:	24008040 	.word	0x24008040
 80113f0:	24008e78 	.word	0x24008e78
 80113f4:	24008e64 	.word	0x24008e64
 80113f8:	24008e5c 	.word	0x24008e5c

080113fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80113fc:	b480      	push	{r7}
 80113fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011400:	4b04      	ldr	r3, [pc, #16]	; (8011414 <vTaskSuspendAll+0x18>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3301      	adds	r3, #1
 8011406:	4a03      	ldr	r2, [pc, #12]	; (8011414 <vTaskSuspendAll+0x18>)
 8011408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801140a:	bf00      	nop
 801140c:	46bd      	mov	sp, r7
 801140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011412:	4770      	bx	lr
 8011414:	24008e80 	.word	0x24008e80

08011418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801141e:	2300      	movs	r3, #0
 8011420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011422:	2300      	movs	r3, #0
 8011424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011426:	4b42      	ldr	r3, [pc, #264]	; (8011530 <xTaskResumeAll+0x118>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10a      	bne.n	8011444 <xTaskResumeAll+0x2c>
	__asm volatile
 801142e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011432:	f383 8811 	msr	BASEPRI, r3
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	f3bf 8f4f 	dsb	sy
 801143e:	603b      	str	r3, [r7, #0]
}
 8011440:	bf00      	nop
 8011442:	e7fe      	b.n	8011442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011444:	f001 fa2e 	bl	80128a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011448:	4b39      	ldr	r3, [pc, #228]	; (8011530 <xTaskResumeAll+0x118>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	3b01      	subs	r3, #1
 801144e:	4a38      	ldr	r2, [pc, #224]	; (8011530 <xTaskResumeAll+0x118>)
 8011450:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011452:	4b37      	ldr	r3, [pc, #220]	; (8011530 <xTaskResumeAll+0x118>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d162      	bne.n	8011520 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801145a:	4b36      	ldr	r3, [pc, #216]	; (8011534 <xTaskResumeAll+0x11c>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d05e      	beq.n	8011520 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011462:	e02f      	b.n	80114c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011464:	4b34      	ldr	r3, [pc, #208]	; (8011538 <xTaskResumeAll+0x120>)
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	68db      	ldr	r3, [r3, #12]
 801146a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	3318      	adds	r3, #24
 8011470:	4618      	mov	r0, r3
 8011472:	f7fe fbab 	bl	800fbcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	3304      	adds	r3, #4
 801147a:	4618      	mov	r0, r3
 801147c:	f7fe fba6 	bl	800fbcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011484:	4b2d      	ldr	r3, [pc, #180]	; (801153c <xTaskResumeAll+0x124>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	429a      	cmp	r2, r3
 801148a:	d903      	bls.n	8011494 <xTaskResumeAll+0x7c>
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011490:	4a2a      	ldr	r2, [pc, #168]	; (801153c <xTaskResumeAll+0x124>)
 8011492:	6013      	str	r3, [r2, #0]
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011498:	4613      	mov	r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	4413      	add	r3, r2
 801149e:	009b      	lsls	r3, r3, #2
 80114a0:	4a27      	ldr	r2, [pc, #156]	; (8011540 <xTaskResumeAll+0x128>)
 80114a2:	441a      	add	r2, r3
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	3304      	adds	r3, #4
 80114a8:	4619      	mov	r1, r3
 80114aa:	4610      	mov	r0, r2
 80114ac:	f7fe fb31 	bl	800fb12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114b4:	4b23      	ldr	r3, [pc, #140]	; (8011544 <xTaskResumeAll+0x12c>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d302      	bcc.n	80114c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80114be:	4b22      	ldr	r3, [pc, #136]	; (8011548 <xTaskResumeAll+0x130>)
 80114c0:	2201      	movs	r2, #1
 80114c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114c4:	4b1c      	ldr	r3, [pc, #112]	; (8011538 <xTaskResumeAll+0x120>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d1cb      	bne.n	8011464 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d001      	beq.n	80114d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80114d2:	f000 fb71 	bl	8011bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80114d6:	4b1d      	ldr	r3, [pc, #116]	; (801154c <xTaskResumeAll+0x134>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d010      	beq.n	8011504 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80114e2:	f000 f859 	bl	8011598 <xTaskIncrementTick>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d002      	beq.n	80114f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80114ec:	4b16      	ldr	r3, [pc, #88]	; (8011548 <xTaskResumeAll+0x130>)
 80114ee:	2201      	movs	r2, #1
 80114f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	3b01      	subs	r3, #1
 80114f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d1f1      	bne.n	80114e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80114fe:	4b13      	ldr	r3, [pc, #76]	; (801154c <xTaskResumeAll+0x134>)
 8011500:	2200      	movs	r2, #0
 8011502:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011504:	4b10      	ldr	r3, [pc, #64]	; (8011548 <xTaskResumeAll+0x130>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d009      	beq.n	8011520 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801150c:	2301      	movs	r3, #1
 801150e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011510:	4b0f      	ldr	r3, [pc, #60]	; (8011550 <xTaskResumeAll+0x138>)
 8011512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011516:	601a      	str	r2, [r3, #0]
 8011518:	f3bf 8f4f 	dsb	sy
 801151c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011520:	f001 f9f0 	bl	8012904 <vPortExitCritical>

	return xAlreadyYielded;
 8011524:	68bb      	ldr	r3, [r7, #8]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	24008e80 	.word	0x24008e80
 8011534:	24008e58 	.word	0x24008e58
 8011538:	24008e18 	.word	0x24008e18
 801153c:	24008e60 	.word	0x24008e60
 8011540:	24008988 	.word	0x24008988
 8011544:	24008984 	.word	0x24008984
 8011548:	24008e6c 	.word	0x24008e6c
 801154c:	24008e68 	.word	0x24008e68
 8011550:	e000ed04 	.word	0xe000ed04

08011554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801155a:	4b05      	ldr	r3, [pc, #20]	; (8011570 <xTaskGetTickCount+0x1c>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011560:	687b      	ldr	r3, [r7, #4]
}
 8011562:	4618      	mov	r0, r3
 8011564:	370c      	adds	r7, #12
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop
 8011570:	24008e5c 	.word	0x24008e5c

08011574 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801157a:	f001 fa75 	bl	8012a68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801157e:	2300      	movs	r3, #0
 8011580:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011582:	4b04      	ldr	r3, [pc, #16]	; (8011594 <xTaskGetTickCountFromISR+0x20>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011588:	683b      	ldr	r3, [r7, #0]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	24008e5c 	.word	0x24008e5c

08011598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b086      	sub	sp, #24
 801159c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801159e:	2300      	movs	r3, #0
 80115a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115a2:	4b4f      	ldr	r3, [pc, #316]	; (80116e0 <xTaskIncrementTick+0x148>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f040 808f 	bne.w	80116ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80115ac:	4b4d      	ldr	r3, [pc, #308]	; (80116e4 <xTaskIncrementTick+0x14c>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	3301      	adds	r3, #1
 80115b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80115b4:	4a4b      	ldr	r2, [pc, #300]	; (80116e4 <xTaskIncrementTick+0x14c>)
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d120      	bne.n	8011602 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80115c0:	4b49      	ldr	r3, [pc, #292]	; (80116e8 <xTaskIncrementTick+0x150>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d00a      	beq.n	80115e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80115ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ce:	f383 8811 	msr	BASEPRI, r3
 80115d2:	f3bf 8f6f 	isb	sy
 80115d6:	f3bf 8f4f 	dsb	sy
 80115da:	603b      	str	r3, [r7, #0]
}
 80115dc:	bf00      	nop
 80115de:	e7fe      	b.n	80115de <xTaskIncrementTick+0x46>
 80115e0:	4b41      	ldr	r3, [pc, #260]	; (80116e8 <xTaskIncrementTick+0x150>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	60fb      	str	r3, [r7, #12]
 80115e6:	4b41      	ldr	r3, [pc, #260]	; (80116ec <xTaskIncrementTick+0x154>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	4a3f      	ldr	r2, [pc, #252]	; (80116e8 <xTaskIncrementTick+0x150>)
 80115ec:	6013      	str	r3, [r2, #0]
 80115ee:	4a3f      	ldr	r2, [pc, #252]	; (80116ec <xTaskIncrementTick+0x154>)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	6013      	str	r3, [r2, #0]
 80115f4:	4b3e      	ldr	r3, [pc, #248]	; (80116f0 <xTaskIncrementTick+0x158>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	3301      	adds	r3, #1
 80115fa:	4a3d      	ldr	r2, [pc, #244]	; (80116f0 <xTaskIncrementTick+0x158>)
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	f000 fadb 	bl	8011bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011602:	4b3c      	ldr	r3, [pc, #240]	; (80116f4 <xTaskIncrementTick+0x15c>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	693a      	ldr	r2, [r7, #16]
 8011608:	429a      	cmp	r2, r3
 801160a:	d349      	bcc.n	80116a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801160c:	4b36      	ldr	r3, [pc, #216]	; (80116e8 <xTaskIncrementTick+0x150>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d104      	bne.n	8011620 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011616:	4b37      	ldr	r3, [pc, #220]	; (80116f4 <xTaskIncrementTick+0x15c>)
 8011618:	f04f 32ff 	mov.w	r2, #4294967295
 801161c:	601a      	str	r2, [r3, #0]
					break;
 801161e:	e03f      	b.n	80116a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011620:	4b31      	ldr	r3, [pc, #196]	; (80116e8 <xTaskIncrementTick+0x150>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	68db      	ldr	r3, [r3, #12]
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011630:	693a      	ldr	r2, [r7, #16]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	429a      	cmp	r2, r3
 8011636:	d203      	bcs.n	8011640 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011638:	4a2e      	ldr	r2, [pc, #184]	; (80116f4 <xTaskIncrementTick+0x15c>)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801163e:	e02f      	b.n	80116a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	3304      	adds	r3, #4
 8011644:	4618      	mov	r0, r3
 8011646:	f7fe fac1 	bl	800fbcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801164e:	2b00      	cmp	r3, #0
 8011650:	d004      	beq.n	801165c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	3318      	adds	r3, #24
 8011656:	4618      	mov	r0, r3
 8011658:	f7fe fab8 	bl	800fbcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011660:	4b25      	ldr	r3, [pc, #148]	; (80116f8 <xTaskIncrementTick+0x160>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	429a      	cmp	r2, r3
 8011666:	d903      	bls.n	8011670 <xTaskIncrementTick+0xd8>
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801166c:	4a22      	ldr	r2, [pc, #136]	; (80116f8 <xTaskIncrementTick+0x160>)
 801166e:	6013      	str	r3, [r2, #0]
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011674:	4613      	mov	r3, r2
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	4a1f      	ldr	r2, [pc, #124]	; (80116fc <xTaskIncrementTick+0x164>)
 801167e:	441a      	add	r2, r3
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	3304      	adds	r3, #4
 8011684:	4619      	mov	r1, r3
 8011686:	4610      	mov	r0, r2
 8011688:	f7fe fa43 	bl	800fb12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011690:	4b1b      	ldr	r3, [pc, #108]	; (8011700 <xTaskIncrementTick+0x168>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011696:	429a      	cmp	r2, r3
 8011698:	d3b8      	bcc.n	801160c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801169a:	2301      	movs	r3, #1
 801169c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801169e:	e7b5      	b.n	801160c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80116a0:	4b17      	ldr	r3, [pc, #92]	; (8011700 <xTaskIncrementTick+0x168>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116a6:	4915      	ldr	r1, [pc, #84]	; (80116fc <xTaskIncrementTick+0x164>)
 80116a8:	4613      	mov	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4413      	add	r3, r2
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	440b      	add	r3, r1
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d901      	bls.n	80116bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80116b8:	2301      	movs	r3, #1
 80116ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80116bc:	4b11      	ldr	r3, [pc, #68]	; (8011704 <xTaskIncrementTick+0x16c>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d007      	beq.n	80116d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80116c4:	2301      	movs	r3, #1
 80116c6:	617b      	str	r3, [r7, #20]
 80116c8:	e004      	b.n	80116d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80116ca:	4b0f      	ldr	r3, [pc, #60]	; (8011708 <xTaskIncrementTick+0x170>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	3301      	adds	r3, #1
 80116d0:	4a0d      	ldr	r2, [pc, #52]	; (8011708 <xTaskIncrementTick+0x170>)
 80116d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80116d4:	697b      	ldr	r3, [r7, #20]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3718      	adds	r7, #24
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	24008e80 	.word	0x24008e80
 80116e4:	24008e5c 	.word	0x24008e5c
 80116e8:	24008e10 	.word	0x24008e10
 80116ec:	24008e14 	.word	0x24008e14
 80116f0:	24008e70 	.word	0x24008e70
 80116f4:	24008e78 	.word	0x24008e78
 80116f8:	24008e60 	.word	0x24008e60
 80116fc:	24008988 	.word	0x24008988
 8011700:	24008984 	.word	0x24008984
 8011704:	24008e6c 	.word	0x24008e6c
 8011708:	24008e68 	.word	0x24008e68

0801170c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801170c:	b480      	push	{r7}
 801170e:	b085      	sub	sp, #20
 8011710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011712:	4b2a      	ldr	r3, [pc, #168]	; (80117bc <vTaskSwitchContext+0xb0>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801171a:	4b29      	ldr	r3, [pc, #164]	; (80117c0 <vTaskSwitchContext+0xb4>)
 801171c:	2201      	movs	r2, #1
 801171e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011720:	e046      	b.n	80117b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011722:	4b27      	ldr	r3, [pc, #156]	; (80117c0 <vTaskSwitchContext+0xb4>)
 8011724:	2200      	movs	r2, #0
 8011726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011728:	4b26      	ldr	r3, [pc, #152]	; (80117c4 <vTaskSwitchContext+0xb8>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	60fb      	str	r3, [r7, #12]
 801172e:	e010      	b.n	8011752 <vTaskSwitchContext+0x46>
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d10a      	bne.n	801174c <vTaskSwitchContext+0x40>
	__asm volatile
 8011736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801173a:	f383 8811 	msr	BASEPRI, r3
 801173e:	f3bf 8f6f 	isb	sy
 8011742:	f3bf 8f4f 	dsb	sy
 8011746:	607b      	str	r3, [r7, #4]
}
 8011748:	bf00      	nop
 801174a:	e7fe      	b.n	801174a <vTaskSwitchContext+0x3e>
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	3b01      	subs	r3, #1
 8011750:	60fb      	str	r3, [r7, #12]
 8011752:	491d      	ldr	r1, [pc, #116]	; (80117c8 <vTaskSwitchContext+0xbc>)
 8011754:	68fa      	ldr	r2, [r7, #12]
 8011756:	4613      	mov	r3, r2
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	4413      	add	r3, r2
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	440b      	add	r3, r1
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d0e4      	beq.n	8011730 <vTaskSwitchContext+0x24>
 8011766:	68fa      	ldr	r2, [r7, #12]
 8011768:	4613      	mov	r3, r2
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	4413      	add	r3, r2
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	4a15      	ldr	r2, [pc, #84]	; (80117c8 <vTaskSwitchContext+0xbc>)
 8011772:	4413      	add	r3, r2
 8011774:	60bb      	str	r3, [r7, #8]
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	605a      	str	r2, [r3, #4]
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	685a      	ldr	r2, [r3, #4]
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	3308      	adds	r3, #8
 8011788:	429a      	cmp	r2, r3
 801178a:	d104      	bne.n	8011796 <vTaskSwitchContext+0x8a>
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	685a      	ldr	r2, [r3, #4]
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	605a      	str	r2, [r3, #4]
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	4a0b      	ldr	r2, [pc, #44]	; (80117cc <vTaskSwitchContext+0xc0>)
 801179e:	6013      	str	r3, [r2, #0]
 80117a0:	4a08      	ldr	r2, [pc, #32]	; (80117c4 <vTaskSwitchContext+0xb8>)
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80117a6:	4b09      	ldr	r3, [pc, #36]	; (80117cc <vTaskSwitchContext+0xc0>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3354      	adds	r3, #84	; 0x54
 80117ac:	4a08      	ldr	r2, [pc, #32]	; (80117d0 <vTaskSwitchContext+0xc4>)
 80117ae:	6013      	str	r3, [r2, #0]
}
 80117b0:	bf00      	nop
 80117b2:	3714      	adds	r7, #20
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr
 80117bc:	24008e80 	.word	0x24008e80
 80117c0:	24008e6c 	.word	0x24008e6c
 80117c4:	24008e60 	.word	0x24008e60
 80117c8:	24008988 	.word	0x24008988
 80117cc:	24008984 	.word	0x24008984
 80117d0:	24008040 	.word	0x24008040

080117d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b084      	sub	sp, #16
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d10a      	bne.n	80117fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80117e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e8:	f383 8811 	msr	BASEPRI, r3
 80117ec:	f3bf 8f6f 	isb	sy
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	60fb      	str	r3, [r7, #12]
}
 80117f6:	bf00      	nop
 80117f8:	e7fe      	b.n	80117f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80117fa:	4b07      	ldr	r3, [pc, #28]	; (8011818 <vTaskPlaceOnEventList+0x44>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	3318      	adds	r3, #24
 8011800:	4619      	mov	r1, r3
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7fe f9a9 	bl	800fb5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011808:	2101      	movs	r1, #1
 801180a:	6838      	ldr	r0, [r7, #0]
 801180c:	f000 fb7e 	bl	8011f0c <prvAddCurrentTaskToDelayedList>
}
 8011810:	bf00      	nop
 8011812:	3710      	adds	r7, #16
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	24008984 	.word	0x24008984

0801181c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801181c:	b580      	push	{r7, lr}
 801181e:	b086      	sub	sp, #24
 8011820:	af00      	add	r7, sp, #0
 8011822:	60f8      	str	r0, [r7, #12]
 8011824:	60b9      	str	r1, [r7, #8]
 8011826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d10a      	bne.n	8011844 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801182e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011832:	f383 8811 	msr	BASEPRI, r3
 8011836:	f3bf 8f6f 	isb	sy
 801183a:	f3bf 8f4f 	dsb	sy
 801183e:	617b      	str	r3, [r7, #20]
}
 8011840:	bf00      	nop
 8011842:	e7fe      	b.n	8011842 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011844:	4b0a      	ldr	r3, [pc, #40]	; (8011870 <vTaskPlaceOnEventListRestricted+0x54>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	3318      	adds	r3, #24
 801184a:	4619      	mov	r1, r3
 801184c:	68f8      	ldr	r0, [r7, #12]
 801184e:	f7fe f960 	bl	800fb12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d002      	beq.n	801185e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011858:	f04f 33ff 	mov.w	r3, #4294967295
 801185c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801185e:	6879      	ldr	r1, [r7, #4]
 8011860:	68b8      	ldr	r0, [r7, #8]
 8011862:	f000 fb53 	bl	8011f0c <prvAddCurrentTaskToDelayedList>
	}
 8011866:	bf00      	nop
 8011868:	3718      	adds	r7, #24
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	24008984 	.word	0x24008984

08011874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b086      	sub	sp, #24
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	68db      	ldr	r3, [r3, #12]
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d10a      	bne.n	80118a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801188a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801188e:	f383 8811 	msr	BASEPRI, r3
 8011892:	f3bf 8f6f 	isb	sy
 8011896:	f3bf 8f4f 	dsb	sy
 801189a:	60fb      	str	r3, [r7, #12]
}
 801189c:	bf00      	nop
 801189e:	e7fe      	b.n	801189e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	3318      	adds	r3, #24
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7fe f991 	bl	800fbcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118aa:	4b1e      	ldr	r3, [pc, #120]	; (8011924 <xTaskRemoveFromEventList+0xb0>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d11d      	bne.n	80118ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	3304      	adds	r3, #4
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fe f988 	bl	800fbcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c0:	4b19      	ldr	r3, [pc, #100]	; (8011928 <xTaskRemoveFromEventList+0xb4>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d903      	bls.n	80118d0 <xTaskRemoveFromEventList+0x5c>
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118cc:	4a16      	ldr	r2, [pc, #88]	; (8011928 <xTaskRemoveFromEventList+0xb4>)
 80118ce:	6013      	str	r3, [r2, #0]
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d4:	4613      	mov	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	4413      	add	r3, r2
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	4a13      	ldr	r2, [pc, #76]	; (801192c <xTaskRemoveFromEventList+0xb8>)
 80118de:	441a      	add	r2, r3
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	3304      	adds	r3, #4
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fe f913 	bl	800fb12 <vListInsertEnd>
 80118ec:	e005      	b.n	80118fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	3318      	adds	r3, #24
 80118f2:	4619      	mov	r1, r3
 80118f4:	480e      	ldr	r0, [pc, #56]	; (8011930 <xTaskRemoveFromEventList+0xbc>)
 80118f6:	f7fe f90c 	bl	800fb12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fe:	4b0d      	ldr	r3, [pc, #52]	; (8011934 <xTaskRemoveFromEventList+0xc0>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011904:	429a      	cmp	r2, r3
 8011906:	d905      	bls.n	8011914 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011908:	2301      	movs	r3, #1
 801190a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801190c:	4b0a      	ldr	r3, [pc, #40]	; (8011938 <xTaskRemoveFromEventList+0xc4>)
 801190e:	2201      	movs	r2, #1
 8011910:	601a      	str	r2, [r3, #0]
 8011912:	e001      	b.n	8011918 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011914:	2300      	movs	r3, #0
 8011916:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011918:	697b      	ldr	r3, [r7, #20]
}
 801191a:	4618      	mov	r0, r3
 801191c:	3718      	adds	r7, #24
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	24008e80 	.word	0x24008e80
 8011928:	24008e60 	.word	0x24008e60
 801192c:	24008988 	.word	0x24008988
 8011930:	24008e18 	.word	0x24008e18
 8011934:	24008984 	.word	0x24008984
 8011938:	24008e6c 	.word	0x24008e6c

0801193c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011944:	4b06      	ldr	r3, [pc, #24]	; (8011960 <vTaskInternalSetTimeOutState+0x24>)
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801194c:	4b05      	ldr	r3, [pc, #20]	; (8011964 <vTaskInternalSetTimeOutState+0x28>)
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	605a      	str	r2, [r3, #4]
}
 8011954:	bf00      	nop
 8011956:	370c      	adds	r7, #12
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr
 8011960:	24008e70 	.word	0x24008e70
 8011964:	24008e5c 	.word	0x24008e5c

08011968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b088      	sub	sp, #32
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d10a      	bne.n	801198e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197c:	f383 8811 	msr	BASEPRI, r3
 8011980:	f3bf 8f6f 	isb	sy
 8011984:	f3bf 8f4f 	dsb	sy
 8011988:	613b      	str	r3, [r7, #16]
}
 801198a:	bf00      	nop
 801198c:	e7fe      	b.n	801198c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d10a      	bne.n	80119aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011998:	f383 8811 	msr	BASEPRI, r3
 801199c:	f3bf 8f6f 	isb	sy
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	60fb      	str	r3, [r7, #12]
}
 80119a6:	bf00      	nop
 80119a8:	e7fe      	b.n	80119a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80119aa:	f000 ff7b 	bl	80128a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80119ae:	4b1d      	ldr	r3, [pc, #116]	; (8011a24 <xTaskCheckForTimeOut+0xbc>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	69ba      	ldr	r2, [r7, #24]
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c6:	d102      	bne.n	80119ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80119c8:	2300      	movs	r3, #0
 80119ca:	61fb      	str	r3, [r7, #28]
 80119cc:	e023      	b.n	8011a16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	4b15      	ldr	r3, [pc, #84]	; (8011a28 <xTaskCheckForTimeOut+0xc0>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d007      	beq.n	80119ea <xTaskCheckForTimeOut+0x82>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	69ba      	ldr	r2, [r7, #24]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d302      	bcc.n	80119ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80119e4:	2301      	movs	r3, #1
 80119e6:	61fb      	str	r3, [r7, #28]
 80119e8:	e015      	b.n	8011a16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	697a      	ldr	r2, [r7, #20]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d20b      	bcs.n	8011a0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	1ad2      	subs	r2, r2, r3
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7ff ff9b 	bl	801193c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011a06:	2300      	movs	r3, #0
 8011a08:	61fb      	str	r3, [r7, #28]
 8011a0a:	e004      	b.n	8011a16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011a12:	2301      	movs	r3, #1
 8011a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011a16:	f000 ff75 	bl	8012904 <vPortExitCritical>

	return xReturn;
 8011a1a:	69fb      	ldr	r3, [r7, #28]
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3720      	adds	r7, #32
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	24008e5c 	.word	0x24008e5c
 8011a28:	24008e70 	.word	0x24008e70

08011a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011a30:	4b03      	ldr	r3, [pc, #12]	; (8011a40 <vTaskMissedYield+0x14>)
 8011a32:	2201      	movs	r2, #1
 8011a34:	601a      	str	r2, [r3, #0]
}
 8011a36:	bf00      	nop
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr
 8011a40:	24008e6c 	.word	0x24008e6c

08011a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011a4c:	f000 f852 	bl	8011af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011a50:	4b06      	ldr	r3, [pc, #24]	; (8011a6c <prvIdleTask+0x28>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d9f9      	bls.n	8011a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011a58:	4b05      	ldr	r3, [pc, #20]	; (8011a70 <prvIdleTask+0x2c>)
 8011a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a5e:	601a      	str	r2, [r3, #0]
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011a68:	e7f0      	b.n	8011a4c <prvIdleTask+0x8>
 8011a6a:	bf00      	nop
 8011a6c:	24008988 	.word	0x24008988
 8011a70:	e000ed04 	.word	0xe000ed04

08011a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	607b      	str	r3, [r7, #4]
 8011a7e:	e00c      	b.n	8011a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	4613      	mov	r3, r2
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	4413      	add	r3, r2
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	4a12      	ldr	r2, [pc, #72]	; (8011ad4 <prvInitialiseTaskLists+0x60>)
 8011a8c:	4413      	add	r3, r2
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fe f812 	bl	800fab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	3301      	adds	r3, #1
 8011a98:	607b      	str	r3, [r7, #4]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2b37      	cmp	r3, #55	; 0x37
 8011a9e:	d9ef      	bls.n	8011a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011aa0:	480d      	ldr	r0, [pc, #52]	; (8011ad8 <prvInitialiseTaskLists+0x64>)
 8011aa2:	f7fe f809 	bl	800fab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011aa6:	480d      	ldr	r0, [pc, #52]	; (8011adc <prvInitialiseTaskLists+0x68>)
 8011aa8:	f7fe f806 	bl	800fab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011aac:	480c      	ldr	r0, [pc, #48]	; (8011ae0 <prvInitialiseTaskLists+0x6c>)
 8011aae:	f7fe f803 	bl	800fab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011ab2:	480c      	ldr	r0, [pc, #48]	; (8011ae4 <prvInitialiseTaskLists+0x70>)
 8011ab4:	f7fe f800 	bl	800fab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011ab8:	480b      	ldr	r0, [pc, #44]	; (8011ae8 <prvInitialiseTaskLists+0x74>)
 8011aba:	f7fd fffd 	bl	800fab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011abe:	4b0b      	ldr	r3, [pc, #44]	; (8011aec <prvInitialiseTaskLists+0x78>)
 8011ac0:	4a05      	ldr	r2, [pc, #20]	; (8011ad8 <prvInitialiseTaskLists+0x64>)
 8011ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011ac4:	4b0a      	ldr	r3, [pc, #40]	; (8011af0 <prvInitialiseTaskLists+0x7c>)
 8011ac6:	4a05      	ldr	r2, [pc, #20]	; (8011adc <prvInitialiseTaskLists+0x68>)
 8011ac8:	601a      	str	r2, [r3, #0]
}
 8011aca:	bf00      	nop
 8011acc:	3708      	adds	r7, #8
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	24008988 	.word	0x24008988
 8011ad8:	24008de8 	.word	0x24008de8
 8011adc:	24008dfc 	.word	0x24008dfc
 8011ae0:	24008e18 	.word	0x24008e18
 8011ae4:	24008e2c 	.word	0x24008e2c
 8011ae8:	24008e44 	.word	0x24008e44
 8011aec:	24008e10 	.word	0x24008e10
 8011af0:	24008e14 	.word	0x24008e14

08011af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011afa:	e019      	b.n	8011b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011afc:	f000 fed2 	bl	80128a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b00:	4b10      	ldr	r3, [pc, #64]	; (8011b44 <prvCheckTasksWaitingTermination+0x50>)
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	3304      	adds	r3, #4
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fe f85d 	bl	800fbcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011b12:	4b0d      	ldr	r3, [pc, #52]	; (8011b48 <prvCheckTasksWaitingTermination+0x54>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	3b01      	subs	r3, #1
 8011b18:	4a0b      	ldr	r2, [pc, #44]	; (8011b48 <prvCheckTasksWaitingTermination+0x54>)
 8011b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011b1c:	4b0b      	ldr	r3, [pc, #44]	; (8011b4c <prvCheckTasksWaitingTermination+0x58>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	3b01      	subs	r3, #1
 8011b22:	4a0a      	ldr	r2, [pc, #40]	; (8011b4c <prvCheckTasksWaitingTermination+0x58>)
 8011b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011b26:	f000 feed 	bl	8012904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f000 f810 	bl	8011b50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011b30:	4b06      	ldr	r3, [pc, #24]	; (8011b4c <prvCheckTasksWaitingTermination+0x58>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d1e1      	bne.n	8011afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011b38:	bf00      	nop
 8011b3a:	bf00      	nop
 8011b3c:	3708      	adds	r7, #8
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	24008e2c 	.word	0x24008e2c
 8011b48:	24008e58 	.word	0x24008e58
 8011b4c:	24008e40 	.word	0x24008e40

08011b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	3354      	adds	r3, #84	; 0x54
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f001 fa57 	bl	8013010 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d108      	bne.n	8011b7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b70:	4618      	mov	r0, r3
 8011b72:	f001 f885 	bl	8012c80 <vPortFree>
				vPortFree( pxTCB );
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f001 f882 	bl	8012c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011b7c:	e018      	b.n	8011bb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d103      	bne.n	8011b90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f001 f879 	bl	8012c80 <vPortFree>
	}
 8011b8e:	e00f      	b.n	8011bb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011b96:	2b02      	cmp	r3, #2
 8011b98:	d00a      	beq.n	8011bb0 <prvDeleteTCB+0x60>
	__asm volatile
 8011b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9e:	f383 8811 	msr	BASEPRI, r3
 8011ba2:	f3bf 8f6f 	isb	sy
 8011ba6:	f3bf 8f4f 	dsb	sy
 8011baa:	60fb      	str	r3, [r7, #12]
}
 8011bac:	bf00      	nop
 8011bae:	e7fe      	b.n	8011bae <prvDeleteTCB+0x5e>
	}
 8011bb0:	bf00      	nop
 8011bb2:	3710      	adds	r7, #16
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bbe:	4b0c      	ldr	r3, [pc, #48]	; (8011bf0 <prvResetNextTaskUnblockTime+0x38>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d104      	bne.n	8011bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011bc8:	4b0a      	ldr	r3, [pc, #40]	; (8011bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8011bca:	f04f 32ff 	mov.w	r2, #4294967295
 8011bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011bd0:	e008      	b.n	8011be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bd2:	4b07      	ldr	r3, [pc, #28]	; (8011bf0 <prvResetNextTaskUnblockTime+0x38>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	4a04      	ldr	r2, [pc, #16]	; (8011bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8011be2:	6013      	str	r3, [r2, #0]
}
 8011be4:	bf00      	nop
 8011be6:	370c      	adds	r7, #12
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr
 8011bf0:	24008e10 	.word	0x24008e10
 8011bf4:	24008e78 	.word	0x24008e78

08011bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b083      	sub	sp, #12
 8011bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011bfe:	4b0b      	ldr	r3, [pc, #44]	; (8011c2c <xTaskGetSchedulerState+0x34>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d102      	bne.n	8011c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011c06:	2301      	movs	r3, #1
 8011c08:	607b      	str	r3, [r7, #4]
 8011c0a:	e008      	b.n	8011c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c0c:	4b08      	ldr	r3, [pc, #32]	; (8011c30 <xTaskGetSchedulerState+0x38>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d102      	bne.n	8011c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011c14:	2302      	movs	r3, #2
 8011c16:	607b      	str	r3, [r7, #4]
 8011c18:	e001      	b.n	8011c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011c1e:	687b      	ldr	r3, [r7, #4]
	}
 8011c20:	4618      	mov	r0, r3
 8011c22:	370c      	adds	r7, #12
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr
 8011c2c:	24008e64 	.word	0x24008e64
 8011c30:	24008e80 	.word	0x24008e80

08011c34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011c40:	2300      	movs	r3, #0
 8011c42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d051      	beq.n	8011cee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c4e:	4b2a      	ldr	r3, [pc, #168]	; (8011cf8 <xTaskPriorityInherit+0xc4>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d241      	bcs.n	8011cdc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	699b      	ldr	r3, [r3, #24]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	db06      	blt.n	8011c6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c60:	4b25      	ldr	r3, [pc, #148]	; (8011cf8 <xTaskPriorityInherit+0xc4>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	6959      	ldr	r1, [r3, #20]
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c76:	4613      	mov	r3, r2
 8011c78:	009b      	lsls	r3, r3, #2
 8011c7a:	4413      	add	r3, r2
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	4a1f      	ldr	r2, [pc, #124]	; (8011cfc <xTaskPriorityInherit+0xc8>)
 8011c80:	4413      	add	r3, r2
 8011c82:	4299      	cmp	r1, r3
 8011c84:	d122      	bne.n	8011ccc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	3304      	adds	r3, #4
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7fd ff9e 	bl	800fbcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011c90:	4b19      	ldr	r3, [pc, #100]	; (8011cf8 <xTaskPriorityInherit+0xc4>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c9e:	4b18      	ldr	r3, [pc, #96]	; (8011d00 <xTaskPriorityInherit+0xcc>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d903      	bls.n	8011cae <xTaskPriorityInherit+0x7a>
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011caa:	4a15      	ldr	r2, [pc, #84]	; (8011d00 <xTaskPriorityInherit+0xcc>)
 8011cac:	6013      	str	r3, [r2, #0]
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	009b      	lsls	r3, r3, #2
 8011cb6:	4413      	add	r3, r2
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	4a10      	ldr	r2, [pc, #64]	; (8011cfc <xTaskPriorityInherit+0xc8>)
 8011cbc:	441a      	add	r2, r3
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	3304      	adds	r3, #4
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	4610      	mov	r0, r2
 8011cc6:	f7fd ff24 	bl	800fb12 <vListInsertEnd>
 8011cca:	e004      	b.n	8011cd6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ccc:	4b0a      	ldr	r3, [pc, #40]	; (8011cf8 <xTaskPriorityInherit+0xc4>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	60fb      	str	r3, [r7, #12]
 8011cda:	e008      	b.n	8011cee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ce0:	4b05      	ldr	r3, [pc, #20]	; (8011cf8 <xTaskPriorityInherit+0xc4>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d201      	bcs.n	8011cee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011cea:	2301      	movs	r3, #1
 8011cec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011cee:	68fb      	ldr	r3, [r7, #12]
	}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	24008984 	.word	0x24008984
 8011cfc:	24008988 	.word	0x24008988
 8011d00:	24008e60 	.word	0x24008e60

08011d04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b086      	sub	sp, #24
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011d10:	2300      	movs	r3, #0
 8011d12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d056      	beq.n	8011dc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011d1a:	4b2e      	ldr	r3, [pc, #184]	; (8011dd4 <xTaskPriorityDisinherit+0xd0>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	693a      	ldr	r2, [r7, #16]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d00a      	beq.n	8011d3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d28:	f383 8811 	msr	BASEPRI, r3
 8011d2c:	f3bf 8f6f 	isb	sy
 8011d30:	f3bf 8f4f 	dsb	sy
 8011d34:	60fb      	str	r3, [r7, #12]
}
 8011d36:	bf00      	nop
 8011d38:	e7fe      	b.n	8011d38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d10a      	bne.n	8011d58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d46:	f383 8811 	msr	BASEPRI, r3
 8011d4a:	f3bf 8f6f 	isb	sy
 8011d4e:	f3bf 8f4f 	dsb	sy
 8011d52:	60bb      	str	r3, [r7, #8]
}
 8011d54:	bf00      	nop
 8011d56:	e7fe      	b.n	8011d56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d5c:	1e5a      	subs	r2, r3, #1
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d02c      	beq.n	8011dc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d128      	bne.n	8011dc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	3304      	adds	r3, #4
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fd ff26 	bl	800fbcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d98:	4b0f      	ldr	r3, [pc, #60]	; (8011dd8 <xTaskPriorityDisinherit+0xd4>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d903      	bls.n	8011da8 <xTaskPriorityDisinherit+0xa4>
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da4:	4a0c      	ldr	r2, [pc, #48]	; (8011dd8 <xTaskPriorityDisinherit+0xd4>)
 8011da6:	6013      	str	r3, [r2, #0]
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dac:	4613      	mov	r3, r2
 8011dae:	009b      	lsls	r3, r3, #2
 8011db0:	4413      	add	r3, r2
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4a09      	ldr	r2, [pc, #36]	; (8011ddc <xTaskPriorityDisinherit+0xd8>)
 8011db6:	441a      	add	r2, r3
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	3304      	adds	r3, #4
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	f7fd fea7 	bl	800fb12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011dc8:	697b      	ldr	r3, [r7, #20]
	}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3718      	adds	r7, #24
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	24008984 	.word	0x24008984
 8011dd8:	24008e60 	.word	0x24008e60
 8011ddc:	24008988 	.word	0x24008988

08011de0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b088      	sub	sp, #32
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011dee:	2301      	movs	r3, #1
 8011df0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d06a      	beq.n	8011ece <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d10a      	bne.n	8011e16 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	60fb      	str	r3, [r7, #12]
}
 8011e12:	bf00      	nop
 8011e14:	e7fe      	b.n	8011e14 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e1a:	683a      	ldr	r2, [r7, #0]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d902      	bls.n	8011e26 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	61fb      	str	r3, [r7, #28]
 8011e24:	e002      	b.n	8011e2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e2a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e30:	69fa      	ldr	r2, [r7, #28]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d04b      	beq.n	8011ece <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011e36:	69bb      	ldr	r3, [r7, #24]
 8011e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e3a:	697a      	ldr	r2, [r7, #20]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d146      	bne.n	8011ece <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011e40:	4b25      	ldr	r3, [pc, #148]	; (8011ed8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	69ba      	ldr	r2, [r7, #24]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d10a      	bne.n	8011e60 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	60bb      	str	r3, [r7, #8]
}
 8011e5c:	bf00      	nop
 8011e5e:	e7fe      	b.n	8011e5e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011e66:	69bb      	ldr	r3, [r7, #24]
 8011e68:	69fa      	ldr	r2, [r7, #28]
 8011e6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e6c:	69bb      	ldr	r3, [r7, #24]
 8011e6e:	699b      	ldr	r3, [r3, #24]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	db04      	blt.n	8011e7e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e74:	69fb      	ldr	r3, [r7, #28]
 8011e76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e7a:	69bb      	ldr	r3, [r7, #24]
 8011e7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011e7e:	69bb      	ldr	r3, [r7, #24]
 8011e80:	6959      	ldr	r1, [r3, #20]
 8011e82:	693a      	ldr	r2, [r7, #16]
 8011e84:	4613      	mov	r3, r2
 8011e86:	009b      	lsls	r3, r3, #2
 8011e88:	4413      	add	r3, r2
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	4a13      	ldr	r2, [pc, #76]	; (8011edc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011e8e:	4413      	add	r3, r2
 8011e90:	4299      	cmp	r1, r3
 8011e92:	d11c      	bne.n	8011ece <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e94:	69bb      	ldr	r3, [r7, #24]
 8011e96:	3304      	adds	r3, #4
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fd fe97 	bl	800fbcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ea2:	4b0f      	ldr	r3, [pc, #60]	; (8011ee0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d903      	bls.n	8011eb2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011eaa:	69bb      	ldr	r3, [r7, #24]
 8011eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eae:	4a0c      	ldr	r2, [pc, #48]	; (8011ee0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011eb0:	6013      	str	r3, [r2, #0]
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	4413      	add	r3, r2
 8011ebc:	009b      	lsls	r3, r3, #2
 8011ebe:	4a07      	ldr	r2, [pc, #28]	; (8011edc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011ec0:	441a      	add	r2, r3
 8011ec2:	69bb      	ldr	r3, [r7, #24]
 8011ec4:	3304      	adds	r3, #4
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	4610      	mov	r0, r2
 8011eca:	f7fd fe22 	bl	800fb12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ece:	bf00      	nop
 8011ed0:	3720      	adds	r7, #32
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}
 8011ed6:	bf00      	nop
 8011ed8:	24008984 	.word	0x24008984
 8011edc:	24008988 	.word	0x24008988
 8011ee0:	24008e60 	.word	0x24008e60

08011ee4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011ee4:	b480      	push	{r7}
 8011ee6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011ee8:	4b07      	ldr	r3, [pc, #28]	; (8011f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d004      	beq.n	8011efa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011ef0:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ef6:	3201      	adds	r2, #1
 8011ef8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011efa:	4b03      	ldr	r3, [pc, #12]	; (8011f08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011efc:	681b      	ldr	r3, [r3, #0]
	}
 8011efe:	4618      	mov	r0, r3
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr
 8011f08:	24008984 	.word	0x24008984

08011f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f16:	4b21      	ldr	r3, [pc, #132]	; (8011f9c <prvAddCurrentTaskToDelayedList+0x90>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f1c:	4b20      	ldr	r3, [pc, #128]	; (8011fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	3304      	adds	r3, #4
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fd fe52 	bl	800fbcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f2e:	d10a      	bne.n	8011f46 <prvAddCurrentTaskToDelayedList+0x3a>
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d007      	beq.n	8011f46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f36:	4b1a      	ldr	r3, [pc, #104]	; (8011fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	3304      	adds	r3, #4
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	4819      	ldr	r0, [pc, #100]	; (8011fa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8011f40:	f7fd fde7 	bl	800fb12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f44:	e026      	b.n	8011f94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f46:	68fa      	ldr	r2, [r7, #12]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	4413      	add	r3, r2
 8011f4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f4e:	4b14      	ldr	r3, [pc, #80]	; (8011fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	68ba      	ldr	r2, [r7, #8]
 8011f54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f56:	68ba      	ldr	r2, [r7, #8]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d209      	bcs.n	8011f72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f5e:	4b12      	ldr	r3, [pc, #72]	; (8011fa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	4b0f      	ldr	r3, [pc, #60]	; (8011fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	3304      	adds	r3, #4
 8011f68:	4619      	mov	r1, r3
 8011f6a:	4610      	mov	r0, r2
 8011f6c:	f7fd fdf5 	bl	800fb5a <vListInsert>
}
 8011f70:	e010      	b.n	8011f94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f72:	4b0e      	ldr	r3, [pc, #56]	; (8011fac <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	4b0a      	ldr	r3, [pc, #40]	; (8011fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	4610      	mov	r0, r2
 8011f80:	f7fd fdeb 	bl	800fb5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f84:	4b0a      	ldr	r3, [pc, #40]	; (8011fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d202      	bcs.n	8011f94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011f8e:	4a08      	ldr	r2, [pc, #32]	; (8011fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	6013      	str	r3, [r2, #0]
}
 8011f94:	bf00      	nop
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	24008e5c 	.word	0x24008e5c
 8011fa0:	24008984 	.word	0x24008984
 8011fa4:	24008e44 	.word	0x24008e44
 8011fa8:	24008e14 	.word	0x24008e14
 8011fac:	24008e10 	.word	0x24008e10
 8011fb0:	24008e78 	.word	0x24008e78

08011fb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b08a      	sub	sp, #40	; 0x28
 8011fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011fbe:	f000 fb07 	bl	80125d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011fc2:	4b1c      	ldr	r3, [pc, #112]	; (8012034 <xTimerCreateTimerTask+0x80>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d021      	beq.n	801200e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011fd2:	1d3a      	adds	r2, r7, #4
 8011fd4:	f107 0108 	add.w	r1, r7, #8
 8011fd8:	f107 030c 	add.w	r3, r7, #12
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fd fd51 	bl	800fa84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011fe2:	6879      	ldr	r1, [r7, #4]
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	9202      	str	r2, [sp, #8]
 8011fea:	9301      	str	r3, [sp, #4]
 8011fec:	2302      	movs	r3, #2
 8011fee:	9300      	str	r3, [sp, #0]
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	460a      	mov	r2, r1
 8011ff4:	4910      	ldr	r1, [pc, #64]	; (8012038 <xTimerCreateTimerTask+0x84>)
 8011ff6:	4811      	ldr	r0, [pc, #68]	; (801203c <xTimerCreateTimerTask+0x88>)
 8011ff8:	f7fe fe20 	bl	8010c3c <xTaskCreateStatic>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	4a10      	ldr	r2, [pc, #64]	; (8012040 <xTimerCreateTimerTask+0x8c>)
 8012000:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012002:	4b0f      	ldr	r3, [pc, #60]	; (8012040 <xTimerCreateTimerTask+0x8c>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d001      	beq.n	801200e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801200a:	2301      	movs	r3, #1
 801200c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d10a      	bne.n	801202a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	613b      	str	r3, [r7, #16]
}
 8012026:	bf00      	nop
 8012028:	e7fe      	b.n	8012028 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801202a:	697b      	ldr	r3, [r7, #20]
}
 801202c:	4618      	mov	r0, r3
 801202e:	3718      	adds	r7, #24
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}
 8012034:	24008eb4 	.word	0x24008eb4
 8012038:	08013904 	.word	0x08013904
 801203c:	08012179 	.word	0x08012179
 8012040:	24008eb8 	.word	0x24008eb8

08012044 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b08a      	sub	sp, #40	; 0x28
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	607a      	str	r2, [r7, #4]
 8012050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012052:	2300      	movs	r3, #0
 8012054:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d10a      	bne.n	8012072 <xTimerGenericCommand+0x2e>
	__asm volatile
 801205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012060:	f383 8811 	msr	BASEPRI, r3
 8012064:	f3bf 8f6f 	isb	sy
 8012068:	f3bf 8f4f 	dsb	sy
 801206c:	623b      	str	r3, [r7, #32]
}
 801206e:	bf00      	nop
 8012070:	e7fe      	b.n	8012070 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012072:	4b1a      	ldr	r3, [pc, #104]	; (80120dc <xTimerGenericCommand+0x98>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d02a      	beq.n	80120d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	2b05      	cmp	r3, #5
 801208a:	dc18      	bgt.n	80120be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801208c:	f7ff fdb4 	bl	8011bf8 <xTaskGetSchedulerState>
 8012090:	4603      	mov	r3, r0
 8012092:	2b02      	cmp	r3, #2
 8012094:	d109      	bne.n	80120aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012096:	4b11      	ldr	r3, [pc, #68]	; (80120dc <xTimerGenericCommand+0x98>)
 8012098:	6818      	ldr	r0, [r3, #0]
 801209a:	f107 0110 	add.w	r1, r7, #16
 801209e:	2300      	movs	r3, #0
 80120a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120a2:	f7fd ff65 	bl	800ff70 <xQueueGenericSend>
 80120a6:	6278      	str	r0, [r7, #36]	; 0x24
 80120a8:	e012      	b.n	80120d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80120aa:	4b0c      	ldr	r3, [pc, #48]	; (80120dc <xTimerGenericCommand+0x98>)
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	f107 0110 	add.w	r1, r7, #16
 80120b2:	2300      	movs	r3, #0
 80120b4:	2200      	movs	r2, #0
 80120b6:	f7fd ff5b 	bl	800ff70 <xQueueGenericSend>
 80120ba:	6278      	str	r0, [r7, #36]	; 0x24
 80120bc:	e008      	b.n	80120d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80120be:	4b07      	ldr	r3, [pc, #28]	; (80120dc <xTimerGenericCommand+0x98>)
 80120c0:	6818      	ldr	r0, [r3, #0]
 80120c2:	f107 0110 	add.w	r1, r7, #16
 80120c6:	2300      	movs	r3, #0
 80120c8:	683a      	ldr	r2, [r7, #0]
 80120ca:	f7fe f84f 	bl	801016c <xQueueGenericSendFromISR>
 80120ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3728      	adds	r7, #40	; 0x28
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop
 80120dc:	24008eb4 	.word	0x24008eb4

080120e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b088      	sub	sp, #32
 80120e4:	af02      	add	r7, sp, #8
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120ea:	4b22      	ldr	r3, [pc, #136]	; (8012174 <prvProcessExpiredTimer+0x94>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	68db      	ldr	r3, [r3, #12]
 80120f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	3304      	adds	r3, #4
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7fd fd67 	bl	800fbcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012104:	f003 0304 	and.w	r3, r3, #4
 8012108:	2b00      	cmp	r3, #0
 801210a:	d022      	beq.n	8012152 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	699a      	ldr	r2, [r3, #24]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	18d1      	adds	r1, r2, r3
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	683a      	ldr	r2, [r7, #0]
 8012118:	6978      	ldr	r0, [r7, #20]
 801211a:	f000 f8d1 	bl	80122c0 <prvInsertTimerInActiveList>
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	d01f      	beq.n	8012164 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012124:	2300      	movs	r3, #0
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	2300      	movs	r3, #0
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	2100      	movs	r1, #0
 801212e:	6978      	ldr	r0, [r7, #20]
 8012130:	f7ff ff88 	bl	8012044 <xTimerGenericCommand>
 8012134:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d113      	bne.n	8012164 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801213c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012140:	f383 8811 	msr	BASEPRI, r3
 8012144:	f3bf 8f6f 	isb	sy
 8012148:	f3bf 8f4f 	dsb	sy
 801214c:	60fb      	str	r3, [r7, #12]
}
 801214e:	bf00      	nop
 8012150:	e7fe      	b.n	8012150 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012158:	f023 0301 	bic.w	r3, r3, #1
 801215c:	b2da      	uxtb	r2, r3
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	6a1b      	ldr	r3, [r3, #32]
 8012168:	6978      	ldr	r0, [r7, #20]
 801216a:	4798      	blx	r3
}
 801216c:	bf00      	nop
 801216e:	3718      	adds	r7, #24
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	24008eac 	.word	0x24008eac

08012178 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b084      	sub	sp, #16
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012180:	f107 0308 	add.w	r3, r7, #8
 8012184:	4618      	mov	r0, r3
 8012186:	f000 f857 	bl	8012238 <prvGetNextExpireTime>
 801218a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	4619      	mov	r1, r3
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f000 f803 	bl	801219c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012196:	f000 f8d5 	bl	8012344 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801219a:	e7f1      	b.n	8012180 <prvTimerTask+0x8>

0801219c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80121a6:	f7ff f929 	bl	80113fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80121aa:	f107 0308 	add.w	r3, r7, #8
 80121ae:	4618      	mov	r0, r3
 80121b0:	f000 f866 	bl	8012280 <prvSampleTimeNow>
 80121b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d130      	bne.n	801221e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d10a      	bne.n	80121d8 <prvProcessTimerOrBlockTask+0x3c>
 80121c2:	687a      	ldr	r2, [r7, #4]
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d806      	bhi.n	80121d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80121ca:	f7ff f925 	bl	8011418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80121ce:	68f9      	ldr	r1, [r7, #12]
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7ff ff85 	bl	80120e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80121d6:	e024      	b.n	8012222 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d008      	beq.n	80121f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80121de:	4b13      	ldr	r3, [pc, #76]	; (801222c <prvProcessTimerOrBlockTask+0x90>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d101      	bne.n	80121ec <prvProcessTimerOrBlockTask+0x50>
 80121e8:	2301      	movs	r3, #1
 80121ea:	e000      	b.n	80121ee <prvProcessTimerOrBlockTask+0x52>
 80121ec:	2300      	movs	r3, #0
 80121ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80121f0:	4b0f      	ldr	r3, [pc, #60]	; (8012230 <prvProcessTimerOrBlockTask+0x94>)
 80121f2:	6818      	ldr	r0, [r3, #0]
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	1ad3      	subs	r3, r2, r3
 80121fa:	683a      	ldr	r2, [r7, #0]
 80121fc:	4619      	mov	r1, r3
 80121fe:	f7fe fce9 	bl	8010bd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012202:	f7ff f909 	bl	8011418 <xTaskResumeAll>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d10a      	bne.n	8012222 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801220c:	4b09      	ldr	r3, [pc, #36]	; (8012234 <prvProcessTimerOrBlockTask+0x98>)
 801220e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	f3bf 8f4f 	dsb	sy
 8012218:	f3bf 8f6f 	isb	sy
}
 801221c:	e001      	b.n	8012222 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801221e:	f7ff f8fb 	bl	8011418 <xTaskResumeAll>
}
 8012222:	bf00      	nop
 8012224:	3710      	adds	r7, #16
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
 801222a:	bf00      	nop
 801222c:	24008eb0 	.word	0x24008eb0
 8012230:	24008eb4 	.word	0x24008eb4
 8012234:	e000ed04 	.word	0xe000ed04

08012238 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012238:	b480      	push	{r7}
 801223a:	b085      	sub	sp, #20
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012240:	4b0e      	ldr	r3, [pc, #56]	; (801227c <prvGetNextExpireTime+0x44>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d101      	bne.n	801224e <prvGetNextExpireTime+0x16>
 801224a:	2201      	movs	r2, #1
 801224c:	e000      	b.n	8012250 <prvGetNextExpireTime+0x18>
 801224e:	2200      	movs	r2, #0
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d105      	bne.n	8012268 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801225c:	4b07      	ldr	r3, [pc, #28]	; (801227c <prvGetNextExpireTime+0x44>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	60fb      	str	r3, [r7, #12]
 8012266:	e001      	b.n	801226c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012268:	2300      	movs	r3, #0
 801226a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801226c:	68fb      	ldr	r3, [r7, #12]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3714      	adds	r7, #20
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop
 801227c:	24008eac 	.word	0x24008eac

08012280 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012288:	f7ff f964 	bl	8011554 <xTaskGetTickCount>
 801228c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801228e:	4b0b      	ldr	r3, [pc, #44]	; (80122bc <prvSampleTimeNow+0x3c>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	68fa      	ldr	r2, [r7, #12]
 8012294:	429a      	cmp	r2, r3
 8012296:	d205      	bcs.n	80122a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012298:	f000 f936 	bl	8012508 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2201      	movs	r2, #1
 80122a0:	601a      	str	r2, [r3, #0]
 80122a2:	e002      	b.n	80122aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80122aa:	4a04      	ldr	r2, [pc, #16]	; (80122bc <prvSampleTimeNow+0x3c>)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80122b0:	68fb      	ldr	r3, [r7, #12]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3710      	adds	r7, #16
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	24008ebc 	.word	0x24008ebc

080122c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b086      	sub	sp, #24
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	60f8      	str	r0, [r7, #12]
 80122c8:	60b9      	str	r1, [r7, #8]
 80122ca:	607a      	str	r2, [r7, #4]
 80122cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80122ce:	2300      	movs	r3, #0
 80122d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	68ba      	ldr	r2, [r7, #8]
 80122d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80122de:	68ba      	ldr	r2, [r7, #8]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d812      	bhi.n	801230c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	1ad2      	subs	r2, r2, r3
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	699b      	ldr	r3, [r3, #24]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d302      	bcc.n	80122fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80122f4:	2301      	movs	r3, #1
 80122f6:	617b      	str	r3, [r7, #20]
 80122f8:	e01b      	b.n	8012332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80122fa:	4b10      	ldr	r3, [pc, #64]	; (801233c <prvInsertTimerInActiveList+0x7c>)
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	3304      	adds	r3, #4
 8012302:	4619      	mov	r1, r3
 8012304:	4610      	mov	r0, r2
 8012306:	f7fd fc28 	bl	800fb5a <vListInsert>
 801230a:	e012      	b.n	8012332 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801230c:	687a      	ldr	r2, [r7, #4]
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	429a      	cmp	r2, r3
 8012312:	d206      	bcs.n	8012322 <prvInsertTimerInActiveList+0x62>
 8012314:	68ba      	ldr	r2, [r7, #8]
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	429a      	cmp	r2, r3
 801231a:	d302      	bcc.n	8012322 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801231c:	2301      	movs	r3, #1
 801231e:	617b      	str	r3, [r7, #20]
 8012320:	e007      	b.n	8012332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012322:	4b07      	ldr	r3, [pc, #28]	; (8012340 <prvInsertTimerInActiveList+0x80>)
 8012324:	681a      	ldr	r2, [r3, #0]
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	3304      	adds	r3, #4
 801232a:	4619      	mov	r1, r3
 801232c:	4610      	mov	r0, r2
 801232e:	f7fd fc14 	bl	800fb5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012332:	697b      	ldr	r3, [r7, #20]
}
 8012334:	4618      	mov	r0, r3
 8012336:	3718      	adds	r7, #24
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	24008eb0 	.word	0x24008eb0
 8012340:	24008eac 	.word	0x24008eac

08012344 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b08e      	sub	sp, #56	; 0x38
 8012348:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801234a:	e0ca      	b.n	80124e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2b00      	cmp	r3, #0
 8012350:	da18      	bge.n	8012384 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012352:	1d3b      	adds	r3, r7, #4
 8012354:	3304      	adds	r3, #4
 8012356:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235a:	2b00      	cmp	r3, #0
 801235c:	d10a      	bne.n	8012374 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012362:	f383 8811 	msr	BASEPRI, r3
 8012366:	f3bf 8f6f 	isb	sy
 801236a:	f3bf 8f4f 	dsb	sy
 801236e:	61fb      	str	r3, [r7, #28]
}
 8012370:	bf00      	nop
 8012372:	e7fe      	b.n	8012372 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801237a:	6850      	ldr	r0, [r2, #4]
 801237c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801237e:	6892      	ldr	r2, [r2, #8]
 8012380:	4611      	mov	r1, r2
 8012382:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2b00      	cmp	r3, #0
 8012388:	f2c0 80aa 	blt.w	80124e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012392:	695b      	ldr	r3, [r3, #20]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d004      	beq.n	80123a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239a:	3304      	adds	r3, #4
 801239c:	4618      	mov	r0, r3
 801239e:	f7fd fc15 	bl	800fbcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80123a2:	463b      	mov	r3, r7
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ff ff6b 	bl	8012280 <prvSampleTimeNow>
 80123aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b09      	cmp	r3, #9
 80123b0:	f200 8097 	bhi.w	80124e2 <prvProcessReceivedCommands+0x19e>
 80123b4:	a201      	add	r2, pc, #4	; (adr r2, 80123bc <prvProcessReceivedCommands+0x78>)
 80123b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ba:	bf00      	nop
 80123bc:	080123e5 	.word	0x080123e5
 80123c0:	080123e5 	.word	0x080123e5
 80123c4:	080123e5 	.word	0x080123e5
 80123c8:	08012459 	.word	0x08012459
 80123cc:	0801246d 	.word	0x0801246d
 80123d0:	080124b7 	.word	0x080124b7
 80123d4:	080123e5 	.word	0x080123e5
 80123d8:	080123e5 	.word	0x080123e5
 80123dc:	08012459 	.word	0x08012459
 80123e0:	0801246d 	.word	0x0801246d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80123e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123ea:	f043 0301 	orr.w	r3, r3, #1
 80123ee:	b2da      	uxtb	r2, r3
 80123f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80123f6:	68ba      	ldr	r2, [r7, #8]
 80123f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fa:	699b      	ldr	r3, [r3, #24]
 80123fc:	18d1      	adds	r1, r2, r3
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012404:	f7ff ff5c 	bl	80122c0 <prvInsertTimerInActiveList>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d069      	beq.n	80124e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012410:	6a1b      	ldr	r3, [r3, #32]
 8012412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012414:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801241c:	f003 0304 	and.w	r3, r3, #4
 8012420:	2b00      	cmp	r3, #0
 8012422:	d05e      	beq.n	80124e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012428:	699b      	ldr	r3, [r3, #24]
 801242a:	441a      	add	r2, r3
 801242c:	2300      	movs	r3, #0
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	2300      	movs	r3, #0
 8012432:	2100      	movs	r1, #0
 8012434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012436:	f7ff fe05 	bl	8012044 <xTimerGenericCommand>
 801243a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801243c:	6a3b      	ldr	r3, [r7, #32]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d14f      	bne.n	80124e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012446:	f383 8811 	msr	BASEPRI, r3
 801244a:	f3bf 8f6f 	isb	sy
 801244e:	f3bf 8f4f 	dsb	sy
 8012452:	61bb      	str	r3, [r7, #24]
}
 8012454:	bf00      	nop
 8012456:	e7fe      	b.n	8012456 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801245e:	f023 0301 	bic.w	r3, r3, #1
 8012462:	b2da      	uxtb	r2, r3
 8012464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801246a:	e03a      	b.n	80124e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012472:	f043 0301 	orr.w	r3, r3, #1
 8012476:	b2da      	uxtb	r2, r3
 8012478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801247e:	68ba      	ldr	r2, [r7, #8]
 8012480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012482:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012486:	699b      	ldr	r3, [r3, #24]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d10a      	bne.n	80124a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012490:	f383 8811 	msr	BASEPRI, r3
 8012494:	f3bf 8f6f 	isb	sy
 8012498:	f3bf 8f4f 	dsb	sy
 801249c:	617b      	str	r3, [r7, #20]
}
 801249e:	bf00      	nop
 80124a0:	e7fe      	b.n	80124a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80124a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a4:	699a      	ldr	r2, [r3, #24]
 80124a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a8:	18d1      	adds	r1, r2, r3
 80124aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124b0:	f7ff ff06 	bl	80122c0 <prvInsertTimerInActiveList>
					break;
 80124b4:	e015      	b.n	80124e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80124b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124bc:	f003 0302 	and.w	r3, r3, #2
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d103      	bne.n	80124cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80124c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124c6:	f000 fbdb 	bl	8012c80 <vPortFree>
 80124ca:	e00a      	b.n	80124e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124d2:	f023 0301 	bic.w	r3, r3, #1
 80124d6:	b2da      	uxtb	r2, r3
 80124d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80124de:	e000      	b.n	80124e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80124e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80124e2:	4b08      	ldr	r3, [pc, #32]	; (8012504 <prvProcessReceivedCommands+0x1c0>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	1d39      	adds	r1, r7, #4
 80124e8:	2200      	movs	r2, #0
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fd ff66 	bl	80103bc <xQueueReceive>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	f47f af2a 	bne.w	801234c <prvProcessReceivedCommands+0x8>
	}
}
 80124f8:	bf00      	nop
 80124fa:	bf00      	nop
 80124fc:	3730      	adds	r7, #48	; 0x30
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}
 8012502:	bf00      	nop
 8012504:	24008eb4 	.word	0x24008eb4

08012508 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b088      	sub	sp, #32
 801250c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801250e:	e048      	b.n	80125a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012510:	4b2d      	ldr	r3, [pc, #180]	; (80125c8 <prvSwitchTimerLists+0xc0>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	68db      	ldr	r3, [r3, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801251a:	4b2b      	ldr	r3, [pc, #172]	; (80125c8 <prvSwitchTimerLists+0xc0>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	3304      	adds	r3, #4
 8012528:	4618      	mov	r0, r3
 801252a:	f7fd fb4f 	bl	800fbcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	6a1b      	ldr	r3, [r3, #32]
 8012532:	68f8      	ldr	r0, [r7, #12]
 8012534:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801253c:	f003 0304 	and.w	r3, r3, #4
 8012540:	2b00      	cmp	r3, #0
 8012542:	d02e      	beq.n	80125a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	699b      	ldr	r3, [r3, #24]
 8012548:	693a      	ldr	r2, [r7, #16]
 801254a:	4413      	add	r3, r2
 801254c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801254e:	68ba      	ldr	r2, [r7, #8]
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	429a      	cmp	r2, r3
 8012554:	d90e      	bls.n	8012574 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012562:	4b19      	ldr	r3, [pc, #100]	; (80125c8 <prvSwitchTimerLists+0xc0>)
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	3304      	adds	r3, #4
 801256a:	4619      	mov	r1, r3
 801256c:	4610      	mov	r0, r2
 801256e:	f7fd faf4 	bl	800fb5a <vListInsert>
 8012572:	e016      	b.n	80125a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012574:	2300      	movs	r3, #0
 8012576:	9300      	str	r3, [sp, #0]
 8012578:	2300      	movs	r3, #0
 801257a:	693a      	ldr	r2, [r7, #16]
 801257c:	2100      	movs	r1, #0
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f7ff fd60 	bl	8012044 <xTimerGenericCommand>
 8012584:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d10a      	bne.n	80125a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012590:	f383 8811 	msr	BASEPRI, r3
 8012594:	f3bf 8f6f 	isb	sy
 8012598:	f3bf 8f4f 	dsb	sy
 801259c:	603b      	str	r3, [r7, #0]
}
 801259e:	bf00      	nop
 80125a0:	e7fe      	b.n	80125a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125a2:	4b09      	ldr	r3, [pc, #36]	; (80125c8 <prvSwitchTimerLists+0xc0>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1b1      	bne.n	8012510 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80125ac:	4b06      	ldr	r3, [pc, #24]	; (80125c8 <prvSwitchTimerLists+0xc0>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80125b2:	4b06      	ldr	r3, [pc, #24]	; (80125cc <prvSwitchTimerLists+0xc4>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4a04      	ldr	r2, [pc, #16]	; (80125c8 <prvSwitchTimerLists+0xc0>)
 80125b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80125ba:	4a04      	ldr	r2, [pc, #16]	; (80125cc <prvSwitchTimerLists+0xc4>)
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	6013      	str	r3, [r2, #0]
}
 80125c0:	bf00      	nop
 80125c2:	3718      	adds	r7, #24
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	24008eac 	.word	0x24008eac
 80125cc:	24008eb0 	.word	0x24008eb0

080125d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80125d6:	f000 f965 	bl	80128a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80125da:	4b15      	ldr	r3, [pc, #84]	; (8012630 <prvCheckForValidListAndQueue+0x60>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d120      	bne.n	8012624 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80125e2:	4814      	ldr	r0, [pc, #80]	; (8012634 <prvCheckForValidListAndQueue+0x64>)
 80125e4:	f7fd fa68 	bl	800fab8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80125e8:	4813      	ldr	r0, [pc, #76]	; (8012638 <prvCheckForValidListAndQueue+0x68>)
 80125ea:	f7fd fa65 	bl	800fab8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80125ee:	4b13      	ldr	r3, [pc, #76]	; (801263c <prvCheckForValidListAndQueue+0x6c>)
 80125f0:	4a10      	ldr	r2, [pc, #64]	; (8012634 <prvCheckForValidListAndQueue+0x64>)
 80125f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80125f4:	4b12      	ldr	r3, [pc, #72]	; (8012640 <prvCheckForValidListAndQueue+0x70>)
 80125f6:	4a10      	ldr	r2, [pc, #64]	; (8012638 <prvCheckForValidListAndQueue+0x68>)
 80125f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80125fa:	2300      	movs	r3, #0
 80125fc:	9300      	str	r3, [sp, #0]
 80125fe:	4b11      	ldr	r3, [pc, #68]	; (8012644 <prvCheckForValidListAndQueue+0x74>)
 8012600:	4a11      	ldr	r2, [pc, #68]	; (8012648 <prvCheckForValidListAndQueue+0x78>)
 8012602:	2110      	movs	r1, #16
 8012604:	200a      	movs	r0, #10
 8012606:	f7fd fb73 	bl	800fcf0 <xQueueGenericCreateStatic>
 801260a:	4603      	mov	r3, r0
 801260c:	4a08      	ldr	r2, [pc, #32]	; (8012630 <prvCheckForValidListAndQueue+0x60>)
 801260e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012610:	4b07      	ldr	r3, [pc, #28]	; (8012630 <prvCheckForValidListAndQueue+0x60>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d005      	beq.n	8012624 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012618:	4b05      	ldr	r3, [pc, #20]	; (8012630 <prvCheckForValidListAndQueue+0x60>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	490b      	ldr	r1, [pc, #44]	; (801264c <prvCheckForValidListAndQueue+0x7c>)
 801261e:	4618      	mov	r0, r3
 8012620:	f7fe fa84 	bl	8010b2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012624:	f000 f96e 	bl	8012904 <vPortExitCritical>
}
 8012628:	bf00      	nop
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	24008eb4 	.word	0x24008eb4
 8012634:	24008e84 	.word	0x24008e84
 8012638:	24008e98 	.word	0x24008e98
 801263c:	24008eac 	.word	0x24008eac
 8012640:	24008eb0 	.word	0x24008eb0
 8012644:	24008f60 	.word	0x24008f60
 8012648:	24008ec0 	.word	0x24008ec0
 801264c:	0801390c 	.word	0x0801390c

08012650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012650:	b480      	push	{r7}
 8012652:	b085      	sub	sp, #20
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3b04      	subs	r3, #4
 8012660:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	3b04      	subs	r3, #4
 801266e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	f023 0201 	bic.w	r2, r3, #1
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	3b04      	subs	r3, #4
 801267e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012680:	4a0c      	ldr	r2, [pc, #48]	; (80126b4 <pxPortInitialiseStack+0x64>)
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	3b14      	subs	r3, #20
 801268a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	3b04      	subs	r3, #4
 8012696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	f06f 0202 	mvn.w	r2, #2
 801269e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	3b20      	subs	r3, #32
 80126a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80126a6:	68fb      	ldr	r3, [r7, #12]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3714      	adds	r7, #20
 80126ac:	46bd      	mov	sp, r7
 80126ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b2:	4770      	bx	lr
 80126b4:	080126b9 	.word	0x080126b9

080126b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80126b8:	b480      	push	{r7}
 80126ba:	b085      	sub	sp, #20
 80126bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80126be:	2300      	movs	r3, #0
 80126c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126c2:	4b12      	ldr	r3, [pc, #72]	; (801270c <prvTaskExitError+0x54>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ca:	d00a      	beq.n	80126e2 <prvTaskExitError+0x2a>
	__asm volatile
 80126cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d0:	f383 8811 	msr	BASEPRI, r3
 80126d4:	f3bf 8f6f 	isb	sy
 80126d8:	f3bf 8f4f 	dsb	sy
 80126dc:	60fb      	str	r3, [r7, #12]
}
 80126de:	bf00      	nop
 80126e0:	e7fe      	b.n	80126e0 <prvTaskExitError+0x28>
	__asm volatile
 80126e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e6:	f383 8811 	msr	BASEPRI, r3
 80126ea:	f3bf 8f6f 	isb	sy
 80126ee:	f3bf 8f4f 	dsb	sy
 80126f2:	60bb      	str	r3, [r7, #8]
}
 80126f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80126f6:	bf00      	nop
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d0fc      	beq.n	80126f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80126fe:	bf00      	nop
 8012700:	bf00      	nop
 8012702:	3714      	adds	r7, #20
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	2400803c 	.word	0x2400803c

08012710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012710:	4b07      	ldr	r3, [pc, #28]	; (8012730 <pxCurrentTCBConst2>)
 8012712:	6819      	ldr	r1, [r3, #0]
 8012714:	6808      	ldr	r0, [r1, #0]
 8012716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801271a:	f380 8809 	msr	PSP, r0
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f04f 0000 	mov.w	r0, #0
 8012726:	f380 8811 	msr	BASEPRI, r0
 801272a:	4770      	bx	lr
 801272c:	f3af 8000 	nop.w

08012730 <pxCurrentTCBConst2>:
 8012730:	24008984 	.word	0x24008984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012734:	bf00      	nop
 8012736:	bf00      	nop

08012738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012738:	4808      	ldr	r0, [pc, #32]	; (801275c <prvPortStartFirstTask+0x24>)
 801273a:	6800      	ldr	r0, [r0, #0]
 801273c:	6800      	ldr	r0, [r0, #0]
 801273e:	f380 8808 	msr	MSP, r0
 8012742:	f04f 0000 	mov.w	r0, #0
 8012746:	f380 8814 	msr	CONTROL, r0
 801274a:	b662      	cpsie	i
 801274c:	b661      	cpsie	f
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	f3bf 8f6f 	isb	sy
 8012756:	df00      	svc	0
 8012758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801275a:	bf00      	nop
 801275c:	e000ed08 	.word	0xe000ed08

08012760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b086      	sub	sp, #24
 8012764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012766:	4b46      	ldr	r3, [pc, #280]	; (8012880 <xPortStartScheduler+0x120>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4a46      	ldr	r2, [pc, #280]	; (8012884 <xPortStartScheduler+0x124>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d10a      	bne.n	8012786 <xPortStartScheduler+0x26>
	__asm volatile
 8012770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012774:	f383 8811 	msr	BASEPRI, r3
 8012778:	f3bf 8f6f 	isb	sy
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	613b      	str	r3, [r7, #16]
}
 8012782:	bf00      	nop
 8012784:	e7fe      	b.n	8012784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012786:	4b3e      	ldr	r3, [pc, #248]	; (8012880 <xPortStartScheduler+0x120>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	4a3f      	ldr	r2, [pc, #252]	; (8012888 <xPortStartScheduler+0x128>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d10a      	bne.n	80127a6 <xPortStartScheduler+0x46>
	__asm volatile
 8012790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012794:	f383 8811 	msr	BASEPRI, r3
 8012798:	f3bf 8f6f 	isb	sy
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	60fb      	str	r3, [r7, #12]
}
 80127a2:	bf00      	nop
 80127a4:	e7fe      	b.n	80127a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80127a6:	4b39      	ldr	r3, [pc, #228]	; (801288c <xPortStartScheduler+0x12c>)
 80127a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	22ff      	movs	r2, #255	; 0xff
 80127b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80127c0:	78fb      	ldrb	r3, [r7, #3]
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80127c8:	b2da      	uxtb	r2, r3
 80127ca:	4b31      	ldr	r3, [pc, #196]	; (8012890 <xPortStartScheduler+0x130>)
 80127cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80127ce:	4b31      	ldr	r3, [pc, #196]	; (8012894 <xPortStartScheduler+0x134>)
 80127d0:	2207      	movs	r2, #7
 80127d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127d4:	e009      	b.n	80127ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80127d6:	4b2f      	ldr	r3, [pc, #188]	; (8012894 <xPortStartScheduler+0x134>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	3b01      	subs	r3, #1
 80127dc:	4a2d      	ldr	r2, [pc, #180]	; (8012894 <xPortStartScheduler+0x134>)
 80127de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80127e0:	78fb      	ldrb	r3, [r7, #3]
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	005b      	lsls	r3, r3, #1
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127ea:	78fb      	ldrb	r3, [r7, #3]
 80127ec:	b2db      	uxtb	r3, r3
 80127ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127f2:	2b80      	cmp	r3, #128	; 0x80
 80127f4:	d0ef      	beq.n	80127d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80127f6:	4b27      	ldr	r3, [pc, #156]	; (8012894 <xPortStartScheduler+0x134>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f1c3 0307 	rsb	r3, r3, #7
 80127fe:	2b04      	cmp	r3, #4
 8012800:	d00a      	beq.n	8012818 <xPortStartScheduler+0xb8>
	__asm volatile
 8012802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012806:	f383 8811 	msr	BASEPRI, r3
 801280a:	f3bf 8f6f 	isb	sy
 801280e:	f3bf 8f4f 	dsb	sy
 8012812:	60bb      	str	r3, [r7, #8]
}
 8012814:	bf00      	nop
 8012816:	e7fe      	b.n	8012816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012818:	4b1e      	ldr	r3, [pc, #120]	; (8012894 <xPortStartScheduler+0x134>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	021b      	lsls	r3, r3, #8
 801281e:	4a1d      	ldr	r2, [pc, #116]	; (8012894 <xPortStartScheduler+0x134>)
 8012820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012822:	4b1c      	ldr	r3, [pc, #112]	; (8012894 <xPortStartScheduler+0x134>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801282a:	4a1a      	ldr	r2, [pc, #104]	; (8012894 <xPortStartScheduler+0x134>)
 801282c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	b2da      	uxtb	r2, r3
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012836:	4b18      	ldr	r3, [pc, #96]	; (8012898 <xPortStartScheduler+0x138>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4a17      	ldr	r2, [pc, #92]	; (8012898 <xPortStartScheduler+0x138>)
 801283c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012842:	4b15      	ldr	r3, [pc, #84]	; (8012898 <xPortStartScheduler+0x138>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	4a14      	ldr	r2, [pc, #80]	; (8012898 <xPortStartScheduler+0x138>)
 8012848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801284c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801284e:	f000 f8dd 	bl	8012a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012852:	4b12      	ldr	r3, [pc, #72]	; (801289c <xPortStartScheduler+0x13c>)
 8012854:	2200      	movs	r2, #0
 8012856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012858:	f000 f8fc 	bl	8012a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801285c:	4b10      	ldr	r3, [pc, #64]	; (80128a0 <xPortStartScheduler+0x140>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4a0f      	ldr	r2, [pc, #60]	; (80128a0 <xPortStartScheduler+0x140>)
 8012862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012868:	f7ff ff66 	bl	8012738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801286c:	f7fe ff4e 	bl	801170c <vTaskSwitchContext>
	prvTaskExitError();
 8012870:	f7ff ff22 	bl	80126b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012874:	2300      	movs	r3, #0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3718      	adds	r7, #24
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	e000ed00 	.word	0xe000ed00
 8012884:	410fc271 	.word	0x410fc271
 8012888:	410fc270 	.word	0x410fc270
 801288c:	e000e400 	.word	0xe000e400
 8012890:	24008fb0 	.word	0x24008fb0
 8012894:	24008fb4 	.word	0x24008fb4
 8012898:	e000ed20 	.word	0xe000ed20
 801289c:	2400803c 	.word	0x2400803c
 80128a0:	e000ef34 	.word	0xe000ef34

080128a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80128a4:	b480      	push	{r7}
 80128a6:	b083      	sub	sp, #12
 80128a8:	af00      	add	r7, sp, #0
	__asm volatile
 80128aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ae:	f383 8811 	msr	BASEPRI, r3
 80128b2:	f3bf 8f6f 	isb	sy
 80128b6:	f3bf 8f4f 	dsb	sy
 80128ba:	607b      	str	r3, [r7, #4]
}
 80128bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80128be:	4b0f      	ldr	r3, [pc, #60]	; (80128fc <vPortEnterCritical+0x58>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	3301      	adds	r3, #1
 80128c4:	4a0d      	ldr	r2, [pc, #52]	; (80128fc <vPortEnterCritical+0x58>)
 80128c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80128c8:	4b0c      	ldr	r3, [pc, #48]	; (80128fc <vPortEnterCritical+0x58>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	2b01      	cmp	r3, #1
 80128ce:	d10f      	bne.n	80128f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80128d0:	4b0b      	ldr	r3, [pc, #44]	; (8012900 <vPortEnterCritical+0x5c>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00a      	beq.n	80128f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80128da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128de:	f383 8811 	msr	BASEPRI, r3
 80128e2:	f3bf 8f6f 	isb	sy
 80128e6:	f3bf 8f4f 	dsb	sy
 80128ea:	603b      	str	r3, [r7, #0]
}
 80128ec:	bf00      	nop
 80128ee:	e7fe      	b.n	80128ee <vPortEnterCritical+0x4a>
	}
}
 80128f0:	bf00      	nop
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr
 80128fc:	2400803c 	.word	0x2400803c
 8012900:	e000ed04 	.word	0xe000ed04

08012904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801290a:	4b12      	ldr	r3, [pc, #72]	; (8012954 <vPortExitCritical+0x50>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d10a      	bne.n	8012928 <vPortExitCritical+0x24>
	__asm volatile
 8012912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	607b      	str	r3, [r7, #4]
}
 8012924:	bf00      	nop
 8012926:	e7fe      	b.n	8012926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012928:	4b0a      	ldr	r3, [pc, #40]	; (8012954 <vPortExitCritical+0x50>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	3b01      	subs	r3, #1
 801292e:	4a09      	ldr	r2, [pc, #36]	; (8012954 <vPortExitCritical+0x50>)
 8012930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012932:	4b08      	ldr	r3, [pc, #32]	; (8012954 <vPortExitCritical+0x50>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d105      	bne.n	8012946 <vPortExitCritical+0x42>
 801293a:	2300      	movs	r3, #0
 801293c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	f383 8811 	msr	BASEPRI, r3
}
 8012944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012946:	bf00      	nop
 8012948:	370c      	adds	r7, #12
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr
 8012952:	bf00      	nop
 8012954:	2400803c 	.word	0x2400803c
	...

08012960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012960:	f3ef 8009 	mrs	r0, PSP
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	4b15      	ldr	r3, [pc, #84]	; (80129c0 <pxCurrentTCBConst>)
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	f01e 0f10 	tst.w	lr, #16
 8012970:	bf08      	it	eq
 8012972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297a:	6010      	str	r0, [r2, #0]
 801297c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012984:	f380 8811 	msr	BASEPRI, r0
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	f3bf 8f6f 	isb	sy
 8012990:	f7fe febc 	bl	801170c <vTaskSwitchContext>
 8012994:	f04f 0000 	mov.w	r0, #0
 8012998:	f380 8811 	msr	BASEPRI, r0
 801299c:	bc09      	pop	{r0, r3}
 801299e:	6819      	ldr	r1, [r3, #0]
 80129a0:	6808      	ldr	r0, [r1, #0]
 80129a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a6:	f01e 0f10 	tst.w	lr, #16
 80129aa:	bf08      	it	eq
 80129ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129b0:	f380 8809 	msr	PSP, r0
 80129b4:	f3bf 8f6f 	isb	sy
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	f3af 8000 	nop.w

080129c0 <pxCurrentTCBConst>:
 80129c0:	24008984 	.word	0x24008984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80129c4:	bf00      	nop
 80129c6:	bf00      	nop

080129c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
	__asm volatile
 80129ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d2:	f383 8811 	msr	BASEPRI, r3
 80129d6:	f3bf 8f6f 	isb	sy
 80129da:	f3bf 8f4f 	dsb	sy
 80129de:	607b      	str	r3, [r7, #4]
}
 80129e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80129e2:	f7fe fdd9 	bl	8011598 <xTaskIncrementTick>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d003      	beq.n	80129f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80129ec:	4b06      	ldr	r3, [pc, #24]	; (8012a08 <xPortSysTickHandler+0x40>)
 80129ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129f2:	601a      	str	r2, [r3, #0]
 80129f4:	2300      	movs	r3, #0
 80129f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	f383 8811 	msr	BASEPRI, r3
}
 80129fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a00:	bf00      	nop
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	e000ed04 	.word	0xe000ed04

08012a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a10:	4b0b      	ldr	r3, [pc, #44]	; (8012a40 <vPortSetupTimerInterrupt+0x34>)
 8012a12:	2200      	movs	r2, #0
 8012a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a16:	4b0b      	ldr	r3, [pc, #44]	; (8012a44 <vPortSetupTimerInterrupt+0x38>)
 8012a18:	2200      	movs	r2, #0
 8012a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a1c:	4b0a      	ldr	r3, [pc, #40]	; (8012a48 <vPortSetupTimerInterrupt+0x3c>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	4a0a      	ldr	r2, [pc, #40]	; (8012a4c <vPortSetupTimerInterrupt+0x40>)
 8012a22:	fba2 2303 	umull	r2, r3, r2, r3
 8012a26:	09db      	lsrs	r3, r3, #7
 8012a28:	4a09      	ldr	r2, [pc, #36]	; (8012a50 <vPortSetupTimerInterrupt+0x44>)
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a2e:	4b04      	ldr	r3, [pc, #16]	; (8012a40 <vPortSetupTimerInterrupt+0x34>)
 8012a30:	2207      	movs	r2, #7
 8012a32:	601a      	str	r2, [r3, #0]
}
 8012a34:	bf00      	nop
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	e000e010 	.word	0xe000e010
 8012a44:	e000e018 	.word	0xe000e018
 8012a48:	2400802c 	.word	0x2400802c
 8012a4c:	10624dd3 	.word	0x10624dd3
 8012a50:	e000e014 	.word	0xe000e014

08012a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012a64 <vPortEnableVFP+0x10>
 8012a58:	6801      	ldr	r1, [r0, #0]
 8012a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012a5e:	6001      	str	r1, [r0, #0]
 8012a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012a62:	bf00      	nop
 8012a64:	e000ed88 	.word	0xe000ed88

08012a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012a68:	b480      	push	{r7}
 8012a6a:	b085      	sub	sp, #20
 8012a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a6e:	f3ef 8305 	mrs	r3, IPSR
 8012a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2b0f      	cmp	r3, #15
 8012a78:	d914      	bls.n	8012aa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a7a:	4a17      	ldr	r2, [pc, #92]	; (8012ad8 <vPortValidateInterruptPriority+0x70>)
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	4413      	add	r3, r2
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012a84:	4b15      	ldr	r3, [pc, #84]	; (8012adc <vPortValidateInterruptPriority+0x74>)
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	7afa      	ldrb	r2, [r7, #11]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d20a      	bcs.n	8012aa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a92:	f383 8811 	msr	BASEPRI, r3
 8012a96:	f3bf 8f6f 	isb	sy
 8012a9a:	f3bf 8f4f 	dsb	sy
 8012a9e:	607b      	str	r3, [r7, #4]
}
 8012aa0:	bf00      	nop
 8012aa2:	e7fe      	b.n	8012aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012aa4:	4b0e      	ldr	r3, [pc, #56]	; (8012ae0 <vPortValidateInterruptPriority+0x78>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012aac:	4b0d      	ldr	r3, [pc, #52]	; (8012ae4 <vPortValidateInterruptPriority+0x7c>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d90a      	bls.n	8012aca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab8:	f383 8811 	msr	BASEPRI, r3
 8012abc:	f3bf 8f6f 	isb	sy
 8012ac0:	f3bf 8f4f 	dsb	sy
 8012ac4:	603b      	str	r3, [r7, #0]
}
 8012ac6:	bf00      	nop
 8012ac8:	e7fe      	b.n	8012ac8 <vPortValidateInterruptPriority+0x60>
	}
 8012aca:	bf00      	nop
 8012acc:	3714      	adds	r7, #20
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	e000e3f0 	.word	0xe000e3f0
 8012adc:	24008fb0 	.word	0x24008fb0
 8012ae0:	e000ed0c 	.word	0xe000ed0c
 8012ae4:	24008fb4 	.word	0x24008fb4

08012ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b08a      	sub	sp, #40	; 0x28
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012af0:	2300      	movs	r3, #0
 8012af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012af4:	f7fe fc82 	bl	80113fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012af8:	4b5b      	ldr	r3, [pc, #364]	; (8012c68 <pvPortMalloc+0x180>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d101      	bne.n	8012b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b00:	f000 f920 	bl	8012d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b04:	4b59      	ldr	r3, [pc, #356]	; (8012c6c <pvPortMalloc+0x184>)
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4013      	ands	r3, r2
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	f040 8093 	bne.w	8012c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d01d      	beq.n	8012b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b18:	2208      	movs	r2, #8
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f003 0307 	and.w	r3, r3, #7
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d014      	beq.n	8012b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f023 0307 	bic.w	r3, r3, #7
 8012b30:	3308      	adds	r3, #8
 8012b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f003 0307 	and.w	r3, r3, #7
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00a      	beq.n	8012b54 <pvPortMalloc+0x6c>
	__asm volatile
 8012b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b42:	f383 8811 	msr	BASEPRI, r3
 8012b46:	f3bf 8f6f 	isb	sy
 8012b4a:	f3bf 8f4f 	dsb	sy
 8012b4e:	617b      	str	r3, [r7, #20]
}
 8012b50:	bf00      	nop
 8012b52:	e7fe      	b.n	8012b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d06e      	beq.n	8012c38 <pvPortMalloc+0x150>
 8012b5a:	4b45      	ldr	r3, [pc, #276]	; (8012c70 <pvPortMalloc+0x188>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	687a      	ldr	r2, [r7, #4]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d869      	bhi.n	8012c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b64:	4b43      	ldr	r3, [pc, #268]	; (8012c74 <pvPortMalloc+0x18c>)
 8012b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b68:	4b42      	ldr	r3, [pc, #264]	; (8012c74 <pvPortMalloc+0x18c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b6e:	e004      	b.n	8012b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d903      	bls.n	8012b8c <pvPortMalloc+0xa4>
 8012b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d1f1      	bne.n	8012b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012b8c:	4b36      	ldr	r3, [pc, #216]	; (8012c68 <pvPortMalloc+0x180>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d050      	beq.n	8012c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b96:	6a3b      	ldr	r3, [r7, #32]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2208      	movs	r2, #8
 8012b9c:	4413      	add	r3, r2
 8012b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	6a3b      	ldr	r3, [r7, #32]
 8012ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012baa:	685a      	ldr	r2, [r3, #4]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	1ad2      	subs	r2, r2, r3
 8012bb0:	2308      	movs	r3, #8
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d91f      	bls.n	8012bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	f003 0307 	and.w	r3, r3, #7
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d00a      	beq.n	8012be0 <pvPortMalloc+0xf8>
	__asm volatile
 8012bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bce:	f383 8811 	msr	BASEPRI, r3
 8012bd2:	f3bf 8f6f 	isb	sy
 8012bd6:	f3bf 8f4f 	dsb	sy
 8012bda:	613b      	str	r3, [r7, #16]
}
 8012bdc:	bf00      	nop
 8012bde:	e7fe      	b.n	8012bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	685a      	ldr	r2, [r3, #4]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	1ad2      	subs	r2, r2, r3
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012bf2:	69b8      	ldr	r0, [r7, #24]
 8012bf4:	f000 f908 	bl	8012e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012bf8:	4b1d      	ldr	r3, [pc, #116]	; (8012c70 <pvPortMalloc+0x188>)
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	1ad3      	subs	r3, r2, r3
 8012c02:	4a1b      	ldr	r2, [pc, #108]	; (8012c70 <pvPortMalloc+0x188>)
 8012c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c06:	4b1a      	ldr	r3, [pc, #104]	; (8012c70 <pvPortMalloc+0x188>)
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	4b1b      	ldr	r3, [pc, #108]	; (8012c78 <pvPortMalloc+0x190>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d203      	bcs.n	8012c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c12:	4b17      	ldr	r3, [pc, #92]	; (8012c70 <pvPortMalloc+0x188>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	4a18      	ldr	r2, [pc, #96]	; (8012c78 <pvPortMalloc+0x190>)
 8012c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1c:	685a      	ldr	r2, [r3, #4]
 8012c1e:	4b13      	ldr	r3, [pc, #76]	; (8012c6c <pvPortMalloc+0x184>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	431a      	orrs	r2, r3
 8012c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c2e:	4b13      	ldr	r3, [pc, #76]	; (8012c7c <pvPortMalloc+0x194>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	3301      	adds	r3, #1
 8012c34:	4a11      	ldr	r2, [pc, #68]	; (8012c7c <pvPortMalloc+0x194>)
 8012c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c38:	f7fe fbee 	bl	8011418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	f003 0307 	and.w	r3, r3, #7
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00a      	beq.n	8012c5c <pvPortMalloc+0x174>
	__asm volatile
 8012c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4a:	f383 8811 	msr	BASEPRI, r3
 8012c4e:	f3bf 8f6f 	isb	sy
 8012c52:	f3bf 8f4f 	dsb	sy
 8012c56:	60fb      	str	r3, [r7, #12]
}
 8012c58:	bf00      	nop
 8012c5a:	e7fe      	b.n	8012c5a <pvPortMalloc+0x172>
	return pvReturn;
 8012c5c:	69fb      	ldr	r3, [r7, #28]
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3728      	adds	r7, #40	; 0x28
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	24026fc0 	.word	0x24026fc0
 8012c6c:	24026fd4 	.word	0x24026fd4
 8012c70:	24026fc4 	.word	0x24026fc4
 8012c74:	24026fb8 	.word	0x24026fb8
 8012c78:	24026fc8 	.word	0x24026fc8
 8012c7c:	24026fcc 	.word	0x24026fcc

08012c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b086      	sub	sp, #24
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d04d      	beq.n	8012d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012c92:	2308      	movs	r3, #8
 8012c94:	425b      	negs	r3, r3
 8012c96:	697a      	ldr	r2, [r7, #20]
 8012c98:	4413      	add	r3, r2
 8012c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	685a      	ldr	r2, [r3, #4]
 8012ca4:	4b24      	ldr	r3, [pc, #144]	; (8012d38 <vPortFree+0xb8>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4013      	ands	r3, r2
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d10a      	bne.n	8012cc4 <vPortFree+0x44>
	__asm volatile
 8012cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb2:	f383 8811 	msr	BASEPRI, r3
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	f3bf 8f4f 	dsb	sy
 8012cbe:	60fb      	str	r3, [r7, #12]
}
 8012cc0:	bf00      	nop
 8012cc2:	e7fe      	b.n	8012cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00a      	beq.n	8012ce2 <vPortFree+0x62>
	__asm volatile
 8012ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd0:	f383 8811 	msr	BASEPRI, r3
 8012cd4:	f3bf 8f6f 	isb	sy
 8012cd8:	f3bf 8f4f 	dsb	sy
 8012cdc:	60bb      	str	r3, [r7, #8]
}
 8012cde:	bf00      	nop
 8012ce0:	e7fe      	b.n	8012ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	685a      	ldr	r2, [r3, #4]
 8012ce6:	4b14      	ldr	r3, [pc, #80]	; (8012d38 <vPortFree+0xb8>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	4013      	ands	r3, r2
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d01e      	beq.n	8012d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d11a      	bne.n	8012d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	685a      	ldr	r2, [r3, #4]
 8012cfc:	4b0e      	ldr	r3, [pc, #56]	; (8012d38 <vPortFree+0xb8>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	43db      	mvns	r3, r3
 8012d02:	401a      	ands	r2, r3
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d08:	f7fe fb78 	bl	80113fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	685a      	ldr	r2, [r3, #4]
 8012d10:	4b0a      	ldr	r3, [pc, #40]	; (8012d3c <vPortFree+0xbc>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	4413      	add	r3, r2
 8012d16:	4a09      	ldr	r2, [pc, #36]	; (8012d3c <vPortFree+0xbc>)
 8012d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d1a:	6938      	ldr	r0, [r7, #16]
 8012d1c:	f000 f874 	bl	8012e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d20:	4b07      	ldr	r3, [pc, #28]	; (8012d40 <vPortFree+0xc0>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	3301      	adds	r3, #1
 8012d26:	4a06      	ldr	r2, [pc, #24]	; (8012d40 <vPortFree+0xc0>)
 8012d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d2a:	f7fe fb75 	bl	8011418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d2e:	bf00      	nop
 8012d30:	3718      	adds	r7, #24
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	24026fd4 	.word	0x24026fd4
 8012d3c:	24026fc4 	.word	0x24026fc4
 8012d40:	24026fd0 	.word	0x24026fd0

08012d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d44:	b480      	push	{r7}
 8012d46:	b085      	sub	sp, #20
 8012d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d4a:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
 8012d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012d50:	4b27      	ldr	r3, [pc, #156]	; (8012df0 <prvHeapInit+0xac>)
 8012d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	f003 0307 	and.w	r3, r3, #7
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00c      	beq.n	8012d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	3307      	adds	r3, #7
 8012d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f023 0307 	bic.w	r3, r3, #7
 8012d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d6c:	68ba      	ldr	r2, [r7, #8]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	1ad3      	subs	r3, r2, r3
 8012d72:	4a1f      	ldr	r2, [pc, #124]	; (8012df0 <prvHeapInit+0xac>)
 8012d74:	4413      	add	r3, r2
 8012d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d7c:	4a1d      	ldr	r2, [pc, #116]	; (8012df4 <prvHeapInit+0xb0>)
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012d82:	4b1c      	ldr	r3, [pc, #112]	; (8012df4 <prvHeapInit+0xb0>)
 8012d84:	2200      	movs	r2, #0
 8012d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	68ba      	ldr	r2, [r7, #8]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012d90:	2208      	movs	r2, #8
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	1a9b      	subs	r3, r3, r2
 8012d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f023 0307 	bic.w	r3, r3, #7
 8012d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	4a15      	ldr	r2, [pc, #84]	; (8012df8 <prvHeapInit+0xb4>)
 8012da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012da6:	4b14      	ldr	r3, [pc, #80]	; (8012df8 <prvHeapInit+0xb4>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2200      	movs	r2, #0
 8012dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012dae:	4b12      	ldr	r3, [pc, #72]	; (8012df8 <prvHeapInit+0xb4>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	2200      	movs	r2, #0
 8012db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	68fa      	ldr	r2, [r7, #12]
 8012dbe:	1ad2      	subs	r2, r2, r3
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012dc4:	4b0c      	ldr	r3, [pc, #48]	; (8012df8 <prvHeapInit+0xb4>)
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	4a0a      	ldr	r2, [pc, #40]	; (8012dfc <prvHeapInit+0xb8>)
 8012dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	4a09      	ldr	r2, [pc, #36]	; (8012e00 <prvHeapInit+0xbc>)
 8012dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ddc:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <prvHeapInit+0xc0>)
 8012dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012de2:	601a      	str	r2, [r3, #0]
}
 8012de4:	bf00      	nop
 8012de6:	3714      	adds	r7, #20
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr
 8012df0:	24008fb8 	.word	0x24008fb8
 8012df4:	24026fb8 	.word	0x24026fb8
 8012df8:	24026fc0 	.word	0x24026fc0
 8012dfc:	24026fc8 	.word	0x24026fc8
 8012e00:	24026fc4 	.word	0x24026fc4
 8012e04:	24026fd4 	.word	0x24026fd4

08012e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b085      	sub	sp, #20
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e10:	4b28      	ldr	r3, [pc, #160]	; (8012eb4 <prvInsertBlockIntoFreeList+0xac>)
 8012e12:	60fb      	str	r3, [r7, #12]
 8012e14:	e002      	b.n	8012e1c <prvInsertBlockIntoFreeList+0x14>
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	60fb      	str	r3, [r7, #12]
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d8f7      	bhi.n	8012e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	685b      	ldr	r3, [r3, #4]
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	4413      	add	r3, r2
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d108      	bne.n	8012e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	685a      	ldr	r2, [r3, #4]
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	441a      	add	r2, r3
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	68ba      	ldr	r2, [r7, #8]
 8012e54:	441a      	add	r2, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d118      	bne.n	8012e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681a      	ldr	r2, [r3, #0]
 8012e62:	4b15      	ldr	r3, [pc, #84]	; (8012eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d00d      	beq.n	8012e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	685a      	ldr	r2, [r3, #4]
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	441a      	add	r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	601a      	str	r2, [r3, #0]
 8012e84:	e008      	b.n	8012e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012e86:	4b0c      	ldr	r3, [pc, #48]	; (8012eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	601a      	str	r2, [r3, #0]
 8012e8e:	e003      	b.n	8012e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681a      	ldr	r2, [r3, #0]
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d002      	beq.n	8012ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ea6:	bf00      	nop
 8012ea8:	3714      	adds	r7, #20
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	24026fb8 	.word	0x24026fb8
 8012eb8:	24026fc0 	.word	0x24026fc0

08012ebc <__errno>:
 8012ebc:	4b01      	ldr	r3, [pc, #4]	; (8012ec4 <__errno+0x8>)
 8012ebe:	6818      	ldr	r0, [r3, #0]
 8012ec0:	4770      	bx	lr
 8012ec2:	bf00      	nop
 8012ec4:	24008040 	.word	0x24008040

08012ec8 <__libc_init_array>:
 8012ec8:	b570      	push	{r4, r5, r6, lr}
 8012eca:	4d0d      	ldr	r5, [pc, #52]	; (8012f00 <__libc_init_array+0x38>)
 8012ecc:	4c0d      	ldr	r4, [pc, #52]	; (8012f04 <__libc_init_array+0x3c>)
 8012ece:	1b64      	subs	r4, r4, r5
 8012ed0:	10a4      	asrs	r4, r4, #2
 8012ed2:	2600      	movs	r6, #0
 8012ed4:	42a6      	cmp	r6, r4
 8012ed6:	d109      	bne.n	8012eec <__libc_init_array+0x24>
 8012ed8:	4d0b      	ldr	r5, [pc, #44]	; (8012f08 <__libc_init_array+0x40>)
 8012eda:	4c0c      	ldr	r4, [pc, #48]	; (8012f0c <__libc_init_array+0x44>)
 8012edc:	f000 fcb8 	bl	8013850 <_init>
 8012ee0:	1b64      	subs	r4, r4, r5
 8012ee2:	10a4      	asrs	r4, r4, #2
 8012ee4:	2600      	movs	r6, #0
 8012ee6:	42a6      	cmp	r6, r4
 8012ee8:	d105      	bne.n	8012ef6 <__libc_init_array+0x2e>
 8012eea:	bd70      	pop	{r4, r5, r6, pc}
 8012eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ef0:	4798      	blx	r3
 8012ef2:	3601      	adds	r6, #1
 8012ef4:	e7ee      	b.n	8012ed4 <__libc_init_array+0xc>
 8012ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012efa:	4798      	blx	r3
 8012efc:	3601      	adds	r6, #1
 8012efe:	e7f2      	b.n	8012ee6 <__libc_init_array+0x1e>
 8012f00:	08013ae4 	.word	0x08013ae4
 8012f04:	08013ae4 	.word	0x08013ae4
 8012f08:	08013ae4 	.word	0x08013ae4
 8012f0c:	08013ae8 	.word	0x08013ae8

08012f10 <__retarget_lock_acquire_recursive>:
 8012f10:	4770      	bx	lr

08012f12 <__retarget_lock_release_recursive>:
 8012f12:	4770      	bx	lr

08012f14 <memcpy>:
 8012f14:	440a      	add	r2, r1
 8012f16:	4291      	cmp	r1, r2
 8012f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f1c:	d100      	bne.n	8012f20 <memcpy+0xc>
 8012f1e:	4770      	bx	lr
 8012f20:	b510      	push	{r4, lr}
 8012f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f2a:	4291      	cmp	r1, r2
 8012f2c:	d1f9      	bne.n	8012f22 <memcpy+0xe>
 8012f2e:	bd10      	pop	{r4, pc}

08012f30 <memset>:
 8012f30:	4402      	add	r2, r0
 8012f32:	4603      	mov	r3, r0
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d100      	bne.n	8012f3a <memset+0xa>
 8012f38:	4770      	bx	lr
 8012f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8012f3e:	e7f9      	b.n	8012f34 <memset+0x4>

08012f40 <_malloc_r>:
 8012f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f42:	1ccd      	adds	r5, r1, #3
 8012f44:	f025 0503 	bic.w	r5, r5, #3
 8012f48:	3508      	adds	r5, #8
 8012f4a:	2d0c      	cmp	r5, #12
 8012f4c:	bf38      	it	cc
 8012f4e:	250c      	movcc	r5, #12
 8012f50:	2d00      	cmp	r5, #0
 8012f52:	4606      	mov	r6, r0
 8012f54:	db01      	blt.n	8012f5a <_malloc_r+0x1a>
 8012f56:	42a9      	cmp	r1, r5
 8012f58:	d903      	bls.n	8012f62 <_malloc_r+0x22>
 8012f5a:	230c      	movs	r3, #12
 8012f5c:	6033      	str	r3, [r6, #0]
 8012f5e:	2000      	movs	r0, #0
 8012f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f62:	f000 f8e1 	bl	8013128 <__malloc_lock>
 8012f66:	4921      	ldr	r1, [pc, #132]	; (8012fec <_malloc_r+0xac>)
 8012f68:	680a      	ldr	r2, [r1, #0]
 8012f6a:	4614      	mov	r4, r2
 8012f6c:	b99c      	cbnz	r4, 8012f96 <_malloc_r+0x56>
 8012f6e:	4f20      	ldr	r7, [pc, #128]	; (8012ff0 <_malloc_r+0xb0>)
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	b923      	cbnz	r3, 8012f7e <_malloc_r+0x3e>
 8012f74:	4621      	mov	r1, r4
 8012f76:	4630      	mov	r0, r6
 8012f78:	f000 f8a6 	bl	80130c8 <_sbrk_r>
 8012f7c:	6038      	str	r0, [r7, #0]
 8012f7e:	4629      	mov	r1, r5
 8012f80:	4630      	mov	r0, r6
 8012f82:	f000 f8a1 	bl	80130c8 <_sbrk_r>
 8012f86:	1c43      	adds	r3, r0, #1
 8012f88:	d123      	bne.n	8012fd2 <_malloc_r+0x92>
 8012f8a:	230c      	movs	r3, #12
 8012f8c:	6033      	str	r3, [r6, #0]
 8012f8e:	4630      	mov	r0, r6
 8012f90:	f000 f8d0 	bl	8013134 <__malloc_unlock>
 8012f94:	e7e3      	b.n	8012f5e <_malloc_r+0x1e>
 8012f96:	6823      	ldr	r3, [r4, #0]
 8012f98:	1b5b      	subs	r3, r3, r5
 8012f9a:	d417      	bmi.n	8012fcc <_malloc_r+0x8c>
 8012f9c:	2b0b      	cmp	r3, #11
 8012f9e:	d903      	bls.n	8012fa8 <_malloc_r+0x68>
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	441c      	add	r4, r3
 8012fa4:	6025      	str	r5, [r4, #0]
 8012fa6:	e004      	b.n	8012fb2 <_malloc_r+0x72>
 8012fa8:	6863      	ldr	r3, [r4, #4]
 8012faa:	42a2      	cmp	r2, r4
 8012fac:	bf0c      	ite	eq
 8012fae:	600b      	streq	r3, [r1, #0]
 8012fb0:	6053      	strne	r3, [r2, #4]
 8012fb2:	4630      	mov	r0, r6
 8012fb4:	f000 f8be 	bl	8013134 <__malloc_unlock>
 8012fb8:	f104 000b 	add.w	r0, r4, #11
 8012fbc:	1d23      	adds	r3, r4, #4
 8012fbe:	f020 0007 	bic.w	r0, r0, #7
 8012fc2:	1ac2      	subs	r2, r0, r3
 8012fc4:	d0cc      	beq.n	8012f60 <_malloc_r+0x20>
 8012fc6:	1a1b      	subs	r3, r3, r0
 8012fc8:	50a3      	str	r3, [r4, r2]
 8012fca:	e7c9      	b.n	8012f60 <_malloc_r+0x20>
 8012fcc:	4622      	mov	r2, r4
 8012fce:	6864      	ldr	r4, [r4, #4]
 8012fd0:	e7cc      	b.n	8012f6c <_malloc_r+0x2c>
 8012fd2:	1cc4      	adds	r4, r0, #3
 8012fd4:	f024 0403 	bic.w	r4, r4, #3
 8012fd8:	42a0      	cmp	r0, r4
 8012fda:	d0e3      	beq.n	8012fa4 <_malloc_r+0x64>
 8012fdc:	1a21      	subs	r1, r4, r0
 8012fde:	4630      	mov	r0, r6
 8012fe0:	f000 f872 	bl	80130c8 <_sbrk_r>
 8012fe4:	3001      	adds	r0, #1
 8012fe6:	d1dd      	bne.n	8012fa4 <_malloc_r+0x64>
 8012fe8:	e7cf      	b.n	8012f8a <_malloc_r+0x4a>
 8012fea:	bf00      	nop
 8012fec:	24026fd8 	.word	0x24026fd8
 8012ff0:	24026fdc 	.word	0x24026fdc

08012ff4 <cleanup_glue>:
 8012ff4:	b538      	push	{r3, r4, r5, lr}
 8012ff6:	460c      	mov	r4, r1
 8012ff8:	6809      	ldr	r1, [r1, #0]
 8012ffa:	4605      	mov	r5, r0
 8012ffc:	b109      	cbz	r1, 8013002 <cleanup_glue+0xe>
 8012ffe:	f7ff fff9 	bl	8012ff4 <cleanup_glue>
 8013002:	4621      	mov	r1, r4
 8013004:	4628      	mov	r0, r5
 8013006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801300a:	f000 b899 	b.w	8013140 <_free_r>
	...

08013010 <_reclaim_reent>:
 8013010:	4b2c      	ldr	r3, [pc, #176]	; (80130c4 <_reclaim_reent+0xb4>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	4283      	cmp	r3, r0
 8013016:	b570      	push	{r4, r5, r6, lr}
 8013018:	4604      	mov	r4, r0
 801301a:	d051      	beq.n	80130c0 <_reclaim_reent+0xb0>
 801301c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801301e:	b143      	cbz	r3, 8013032 <_reclaim_reent+0x22>
 8013020:	68db      	ldr	r3, [r3, #12]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d14a      	bne.n	80130bc <_reclaim_reent+0xac>
 8013026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013028:	6819      	ldr	r1, [r3, #0]
 801302a:	b111      	cbz	r1, 8013032 <_reclaim_reent+0x22>
 801302c:	4620      	mov	r0, r4
 801302e:	f000 f887 	bl	8013140 <_free_r>
 8013032:	6961      	ldr	r1, [r4, #20]
 8013034:	b111      	cbz	r1, 801303c <_reclaim_reent+0x2c>
 8013036:	4620      	mov	r0, r4
 8013038:	f000 f882 	bl	8013140 <_free_r>
 801303c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801303e:	b111      	cbz	r1, 8013046 <_reclaim_reent+0x36>
 8013040:	4620      	mov	r0, r4
 8013042:	f000 f87d 	bl	8013140 <_free_r>
 8013046:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013048:	b111      	cbz	r1, 8013050 <_reclaim_reent+0x40>
 801304a:	4620      	mov	r0, r4
 801304c:	f000 f878 	bl	8013140 <_free_r>
 8013050:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013052:	b111      	cbz	r1, 801305a <_reclaim_reent+0x4a>
 8013054:	4620      	mov	r0, r4
 8013056:	f000 f873 	bl	8013140 <_free_r>
 801305a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801305c:	b111      	cbz	r1, 8013064 <_reclaim_reent+0x54>
 801305e:	4620      	mov	r0, r4
 8013060:	f000 f86e 	bl	8013140 <_free_r>
 8013064:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013066:	b111      	cbz	r1, 801306e <_reclaim_reent+0x5e>
 8013068:	4620      	mov	r0, r4
 801306a:	f000 f869 	bl	8013140 <_free_r>
 801306e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013070:	b111      	cbz	r1, 8013078 <_reclaim_reent+0x68>
 8013072:	4620      	mov	r0, r4
 8013074:	f000 f864 	bl	8013140 <_free_r>
 8013078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801307a:	b111      	cbz	r1, 8013082 <_reclaim_reent+0x72>
 801307c:	4620      	mov	r0, r4
 801307e:	f000 f85f 	bl	8013140 <_free_r>
 8013082:	69a3      	ldr	r3, [r4, #24]
 8013084:	b1e3      	cbz	r3, 80130c0 <_reclaim_reent+0xb0>
 8013086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013088:	4620      	mov	r0, r4
 801308a:	4798      	blx	r3
 801308c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801308e:	b1b9      	cbz	r1, 80130c0 <_reclaim_reent+0xb0>
 8013090:	4620      	mov	r0, r4
 8013092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013096:	f7ff bfad 	b.w	8012ff4 <cleanup_glue>
 801309a:	5949      	ldr	r1, [r1, r5]
 801309c:	b941      	cbnz	r1, 80130b0 <_reclaim_reent+0xa0>
 801309e:	3504      	adds	r5, #4
 80130a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130a2:	2d80      	cmp	r5, #128	; 0x80
 80130a4:	68d9      	ldr	r1, [r3, #12]
 80130a6:	d1f8      	bne.n	801309a <_reclaim_reent+0x8a>
 80130a8:	4620      	mov	r0, r4
 80130aa:	f000 f849 	bl	8013140 <_free_r>
 80130ae:	e7ba      	b.n	8013026 <_reclaim_reent+0x16>
 80130b0:	680e      	ldr	r6, [r1, #0]
 80130b2:	4620      	mov	r0, r4
 80130b4:	f000 f844 	bl	8013140 <_free_r>
 80130b8:	4631      	mov	r1, r6
 80130ba:	e7ef      	b.n	801309c <_reclaim_reent+0x8c>
 80130bc:	2500      	movs	r5, #0
 80130be:	e7ef      	b.n	80130a0 <_reclaim_reent+0x90>
 80130c0:	bd70      	pop	{r4, r5, r6, pc}
 80130c2:	bf00      	nop
 80130c4:	24008040 	.word	0x24008040

080130c8 <_sbrk_r>:
 80130c8:	b538      	push	{r3, r4, r5, lr}
 80130ca:	4d06      	ldr	r5, [pc, #24]	; (80130e4 <_sbrk_r+0x1c>)
 80130cc:	2300      	movs	r3, #0
 80130ce:	4604      	mov	r4, r0
 80130d0:	4608      	mov	r0, r1
 80130d2:	602b      	str	r3, [r5, #0]
 80130d4:	f7f0 f99c 	bl	8003410 <_sbrk>
 80130d8:	1c43      	adds	r3, r0, #1
 80130da:	d102      	bne.n	80130e2 <_sbrk_r+0x1a>
 80130dc:	682b      	ldr	r3, [r5, #0]
 80130de:	b103      	cbz	r3, 80130e2 <_sbrk_r+0x1a>
 80130e0:	6023      	str	r3, [r4, #0]
 80130e2:	bd38      	pop	{r3, r4, r5, pc}
 80130e4:	24027b4c 	.word	0x24027b4c

080130e8 <siprintf>:
 80130e8:	b40e      	push	{r1, r2, r3}
 80130ea:	b500      	push	{lr}
 80130ec:	b09c      	sub	sp, #112	; 0x70
 80130ee:	ab1d      	add	r3, sp, #116	; 0x74
 80130f0:	9002      	str	r0, [sp, #8]
 80130f2:	9006      	str	r0, [sp, #24]
 80130f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80130f8:	4809      	ldr	r0, [pc, #36]	; (8013120 <siprintf+0x38>)
 80130fa:	9107      	str	r1, [sp, #28]
 80130fc:	9104      	str	r1, [sp, #16]
 80130fe:	4909      	ldr	r1, [pc, #36]	; (8013124 <siprintf+0x3c>)
 8013100:	f853 2b04 	ldr.w	r2, [r3], #4
 8013104:	9105      	str	r1, [sp, #20]
 8013106:	6800      	ldr	r0, [r0, #0]
 8013108:	9301      	str	r3, [sp, #4]
 801310a:	a902      	add	r1, sp, #8
 801310c:	f000 f8c4 	bl	8013298 <_svfiprintf_r>
 8013110:	9b02      	ldr	r3, [sp, #8]
 8013112:	2200      	movs	r2, #0
 8013114:	701a      	strb	r2, [r3, #0]
 8013116:	b01c      	add	sp, #112	; 0x70
 8013118:	f85d eb04 	ldr.w	lr, [sp], #4
 801311c:	b003      	add	sp, #12
 801311e:	4770      	bx	lr
 8013120:	24008040 	.word	0x24008040
 8013124:	ffff0208 	.word	0xffff0208

08013128 <__malloc_lock>:
 8013128:	4801      	ldr	r0, [pc, #4]	; (8013130 <__malloc_lock+0x8>)
 801312a:	f7ff bef1 	b.w	8012f10 <__retarget_lock_acquire_recursive>
 801312e:	bf00      	nop
 8013130:	24027b44 	.word	0x24027b44

08013134 <__malloc_unlock>:
 8013134:	4801      	ldr	r0, [pc, #4]	; (801313c <__malloc_unlock+0x8>)
 8013136:	f7ff beec 	b.w	8012f12 <__retarget_lock_release_recursive>
 801313a:	bf00      	nop
 801313c:	24027b44 	.word	0x24027b44

08013140 <_free_r>:
 8013140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013142:	2900      	cmp	r1, #0
 8013144:	d048      	beq.n	80131d8 <_free_r+0x98>
 8013146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801314a:	9001      	str	r0, [sp, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	f1a1 0404 	sub.w	r4, r1, #4
 8013152:	bfb8      	it	lt
 8013154:	18e4      	addlt	r4, r4, r3
 8013156:	f7ff ffe7 	bl	8013128 <__malloc_lock>
 801315a:	4a20      	ldr	r2, [pc, #128]	; (80131dc <_free_r+0x9c>)
 801315c:	9801      	ldr	r0, [sp, #4]
 801315e:	6813      	ldr	r3, [r2, #0]
 8013160:	4615      	mov	r5, r2
 8013162:	b933      	cbnz	r3, 8013172 <_free_r+0x32>
 8013164:	6063      	str	r3, [r4, #4]
 8013166:	6014      	str	r4, [r2, #0]
 8013168:	b003      	add	sp, #12
 801316a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801316e:	f7ff bfe1 	b.w	8013134 <__malloc_unlock>
 8013172:	42a3      	cmp	r3, r4
 8013174:	d90b      	bls.n	801318e <_free_r+0x4e>
 8013176:	6821      	ldr	r1, [r4, #0]
 8013178:	1862      	adds	r2, r4, r1
 801317a:	4293      	cmp	r3, r2
 801317c:	bf04      	itt	eq
 801317e:	681a      	ldreq	r2, [r3, #0]
 8013180:	685b      	ldreq	r3, [r3, #4]
 8013182:	6063      	str	r3, [r4, #4]
 8013184:	bf04      	itt	eq
 8013186:	1852      	addeq	r2, r2, r1
 8013188:	6022      	streq	r2, [r4, #0]
 801318a:	602c      	str	r4, [r5, #0]
 801318c:	e7ec      	b.n	8013168 <_free_r+0x28>
 801318e:	461a      	mov	r2, r3
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	b10b      	cbz	r3, 8013198 <_free_r+0x58>
 8013194:	42a3      	cmp	r3, r4
 8013196:	d9fa      	bls.n	801318e <_free_r+0x4e>
 8013198:	6811      	ldr	r1, [r2, #0]
 801319a:	1855      	adds	r5, r2, r1
 801319c:	42a5      	cmp	r5, r4
 801319e:	d10b      	bne.n	80131b8 <_free_r+0x78>
 80131a0:	6824      	ldr	r4, [r4, #0]
 80131a2:	4421      	add	r1, r4
 80131a4:	1854      	adds	r4, r2, r1
 80131a6:	42a3      	cmp	r3, r4
 80131a8:	6011      	str	r1, [r2, #0]
 80131aa:	d1dd      	bne.n	8013168 <_free_r+0x28>
 80131ac:	681c      	ldr	r4, [r3, #0]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	6053      	str	r3, [r2, #4]
 80131b2:	4421      	add	r1, r4
 80131b4:	6011      	str	r1, [r2, #0]
 80131b6:	e7d7      	b.n	8013168 <_free_r+0x28>
 80131b8:	d902      	bls.n	80131c0 <_free_r+0x80>
 80131ba:	230c      	movs	r3, #12
 80131bc:	6003      	str	r3, [r0, #0]
 80131be:	e7d3      	b.n	8013168 <_free_r+0x28>
 80131c0:	6825      	ldr	r5, [r4, #0]
 80131c2:	1961      	adds	r1, r4, r5
 80131c4:	428b      	cmp	r3, r1
 80131c6:	bf04      	itt	eq
 80131c8:	6819      	ldreq	r1, [r3, #0]
 80131ca:	685b      	ldreq	r3, [r3, #4]
 80131cc:	6063      	str	r3, [r4, #4]
 80131ce:	bf04      	itt	eq
 80131d0:	1949      	addeq	r1, r1, r5
 80131d2:	6021      	streq	r1, [r4, #0]
 80131d4:	6054      	str	r4, [r2, #4]
 80131d6:	e7c7      	b.n	8013168 <_free_r+0x28>
 80131d8:	b003      	add	sp, #12
 80131da:	bd30      	pop	{r4, r5, pc}
 80131dc:	24026fd8 	.word	0x24026fd8

080131e0 <__ssputs_r>:
 80131e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131e4:	688e      	ldr	r6, [r1, #8]
 80131e6:	429e      	cmp	r6, r3
 80131e8:	4682      	mov	sl, r0
 80131ea:	460c      	mov	r4, r1
 80131ec:	4690      	mov	r8, r2
 80131ee:	461f      	mov	r7, r3
 80131f0:	d838      	bhi.n	8013264 <__ssputs_r+0x84>
 80131f2:	898a      	ldrh	r2, [r1, #12]
 80131f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80131f8:	d032      	beq.n	8013260 <__ssputs_r+0x80>
 80131fa:	6825      	ldr	r5, [r4, #0]
 80131fc:	6909      	ldr	r1, [r1, #16]
 80131fe:	eba5 0901 	sub.w	r9, r5, r1
 8013202:	6965      	ldr	r5, [r4, #20]
 8013204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801320c:	3301      	adds	r3, #1
 801320e:	444b      	add	r3, r9
 8013210:	106d      	asrs	r5, r5, #1
 8013212:	429d      	cmp	r5, r3
 8013214:	bf38      	it	cc
 8013216:	461d      	movcc	r5, r3
 8013218:	0553      	lsls	r3, r2, #21
 801321a:	d531      	bpl.n	8013280 <__ssputs_r+0xa0>
 801321c:	4629      	mov	r1, r5
 801321e:	f7ff fe8f 	bl	8012f40 <_malloc_r>
 8013222:	4606      	mov	r6, r0
 8013224:	b950      	cbnz	r0, 801323c <__ssputs_r+0x5c>
 8013226:	230c      	movs	r3, #12
 8013228:	f8ca 3000 	str.w	r3, [sl]
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013232:	81a3      	strh	r3, [r4, #12]
 8013234:	f04f 30ff 	mov.w	r0, #4294967295
 8013238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801323c:	6921      	ldr	r1, [r4, #16]
 801323e:	464a      	mov	r2, r9
 8013240:	f7ff fe68 	bl	8012f14 <memcpy>
 8013244:	89a3      	ldrh	r3, [r4, #12]
 8013246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801324a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801324e:	81a3      	strh	r3, [r4, #12]
 8013250:	6126      	str	r6, [r4, #16]
 8013252:	6165      	str	r5, [r4, #20]
 8013254:	444e      	add	r6, r9
 8013256:	eba5 0509 	sub.w	r5, r5, r9
 801325a:	6026      	str	r6, [r4, #0]
 801325c:	60a5      	str	r5, [r4, #8]
 801325e:	463e      	mov	r6, r7
 8013260:	42be      	cmp	r6, r7
 8013262:	d900      	bls.n	8013266 <__ssputs_r+0x86>
 8013264:	463e      	mov	r6, r7
 8013266:	4632      	mov	r2, r6
 8013268:	6820      	ldr	r0, [r4, #0]
 801326a:	4641      	mov	r1, r8
 801326c:	f000 faa8 	bl	80137c0 <memmove>
 8013270:	68a3      	ldr	r3, [r4, #8]
 8013272:	6822      	ldr	r2, [r4, #0]
 8013274:	1b9b      	subs	r3, r3, r6
 8013276:	4432      	add	r2, r6
 8013278:	60a3      	str	r3, [r4, #8]
 801327a:	6022      	str	r2, [r4, #0]
 801327c:	2000      	movs	r0, #0
 801327e:	e7db      	b.n	8013238 <__ssputs_r+0x58>
 8013280:	462a      	mov	r2, r5
 8013282:	f000 fab7 	bl	80137f4 <_realloc_r>
 8013286:	4606      	mov	r6, r0
 8013288:	2800      	cmp	r0, #0
 801328a:	d1e1      	bne.n	8013250 <__ssputs_r+0x70>
 801328c:	6921      	ldr	r1, [r4, #16]
 801328e:	4650      	mov	r0, sl
 8013290:	f7ff ff56 	bl	8013140 <_free_r>
 8013294:	e7c7      	b.n	8013226 <__ssputs_r+0x46>
	...

08013298 <_svfiprintf_r>:
 8013298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801329c:	4698      	mov	r8, r3
 801329e:	898b      	ldrh	r3, [r1, #12]
 80132a0:	061b      	lsls	r3, r3, #24
 80132a2:	b09d      	sub	sp, #116	; 0x74
 80132a4:	4607      	mov	r7, r0
 80132a6:	460d      	mov	r5, r1
 80132a8:	4614      	mov	r4, r2
 80132aa:	d50e      	bpl.n	80132ca <_svfiprintf_r+0x32>
 80132ac:	690b      	ldr	r3, [r1, #16]
 80132ae:	b963      	cbnz	r3, 80132ca <_svfiprintf_r+0x32>
 80132b0:	2140      	movs	r1, #64	; 0x40
 80132b2:	f7ff fe45 	bl	8012f40 <_malloc_r>
 80132b6:	6028      	str	r0, [r5, #0]
 80132b8:	6128      	str	r0, [r5, #16]
 80132ba:	b920      	cbnz	r0, 80132c6 <_svfiprintf_r+0x2e>
 80132bc:	230c      	movs	r3, #12
 80132be:	603b      	str	r3, [r7, #0]
 80132c0:	f04f 30ff 	mov.w	r0, #4294967295
 80132c4:	e0d1      	b.n	801346a <_svfiprintf_r+0x1d2>
 80132c6:	2340      	movs	r3, #64	; 0x40
 80132c8:	616b      	str	r3, [r5, #20]
 80132ca:	2300      	movs	r3, #0
 80132cc:	9309      	str	r3, [sp, #36]	; 0x24
 80132ce:	2320      	movs	r3, #32
 80132d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80132d8:	2330      	movs	r3, #48	; 0x30
 80132da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013484 <_svfiprintf_r+0x1ec>
 80132de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132e2:	f04f 0901 	mov.w	r9, #1
 80132e6:	4623      	mov	r3, r4
 80132e8:	469a      	mov	sl, r3
 80132ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132ee:	b10a      	cbz	r2, 80132f4 <_svfiprintf_r+0x5c>
 80132f0:	2a25      	cmp	r2, #37	; 0x25
 80132f2:	d1f9      	bne.n	80132e8 <_svfiprintf_r+0x50>
 80132f4:	ebba 0b04 	subs.w	fp, sl, r4
 80132f8:	d00b      	beq.n	8013312 <_svfiprintf_r+0x7a>
 80132fa:	465b      	mov	r3, fp
 80132fc:	4622      	mov	r2, r4
 80132fe:	4629      	mov	r1, r5
 8013300:	4638      	mov	r0, r7
 8013302:	f7ff ff6d 	bl	80131e0 <__ssputs_r>
 8013306:	3001      	adds	r0, #1
 8013308:	f000 80aa 	beq.w	8013460 <_svfiprintf_r+0x1c8>
 801330c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801330e:	445a      	add	r2, fp
 8013310:	9209      	str	r2, [sp, #36]	; 0x24
 8013312:	f89a 3000 	ldrb.w	r3, [sl]
 8013316:	2b00      	cmp	r3, #0
 8013318:	f000 80a2 	beq.w	8013460 <_svfiprintf_r+0x1c8>
 801331c:	2300      	movs	r3, #0
 801331e:	f04f 32ff 	mov.w	r2, #4294967295
 8013322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013326:	f10a 0a01 	add.w	sl, sl, #1
 801332a:	9304      	str	r3, [sp, #16]
 801332c:	9307      	str	r3, [sp, #28]
 801332e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013332:	931a      	str	r3, [sp, #104]	; 0x68
 8013334:	4654      	mov	r4, sl
 8013336:	2205      	movs	r2, #5
 8013338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801333c:	4851      	ldr	r0, [pc, #324]	; (8013484 <_svfiprintf_r+0x1ec>)
 801333e:	f7ec ffef 	bl	8000320 <memchr>
 8013342:	9a04      	ldr	r2, [sp, #16]
 8013344:	b9d8      	cbnz	r0, 801337e <_svfiprintf_r+0xe6>
 8013346:	06d0      	lsls	r0, r2, #27
 8013348:	bf44      	itt	mi
 801334a:	2320      	movmi	r3, #32
 801334c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013350:	0711      	lsls	r1, r2, #28
 8013352:	bf44      	itt	mi
 8013354:	232b      	movmi	r3, #43	; 0x2b
 8013356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801335a:	f89a 3000 	ldrb.w	r3, [sl]
 801335e:	2b2a      	cmp	r3, #42	; 0x2a
 8013360:	d015      	beq.n	801338e <_svfiprintf_r+0xf6>
 8013362:	9a07      	ldr	r2, [sp, #28]
 8013364:	4654      	mov	r4, sl
 8013366:	2000      	movs	r0, #0
 8013368:	f04f 0c0a 	mov.w	ip, #10
 801336c:	4621      	mov	r1, r4
 801336e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013372:	3b30      	subs	r3, #48	; 0x30
 8013374:	2b09      	cmp	r3, #9
 8013376:	d94e      	bls.n	8013416 <_svfiprintf_r+0x17e>
 8013378:	b1b0      	cbz	r0, 80133a8 <_svfiprintf_r+0x110>
 801337a:	9207      	str	r2, [sp, #28]
 801337c:	e014      	b.n	80133a8 <_svfiprintf_r+0x110>
 801337e:	eba0 0308 	sub.w	r3, r0, r8
 8013382:	fa09 f303 	lsl.w	r3, r9, r3
 8013386:	4313      	orrs	r3, r2
 8013388:	9304      	str	r3, [sp, #16]
 801338a:	46a2      	mov	sl, r4
 801338c:	e7d2      	b.n	8013334 <_svfiprintf_r+0x9c>
 801338e:	9b03      	ldr	r3, [sp, #12]
 8013390:	1d19      	adds	r1, r3, #4
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	9103      	str	r1, [sp, #12]
 8013396:	2b00      	cmp	r3, #0
 8013398:	bfbb      	ittet	lt
 801339a:	425b      	neglt	r3, r3
 801339c:	f042 0202 	orrlt.w	r2, r2, #2
 80133a0:	9307      	strge	r3, [sp, #28]
 80133a2:	9307      	strlt	r3, [sp, #28]
 80133a4:	bfb8      	it	lt
 80133a6:	9204      	strlt	r2, [sp, #16]
 80133a8:	7823      	ldrb	r3, [r4, #0]
 80133aa:	2b2e      	cmp	r3, #46	; 0x2e
 80133ac:	d10c      	bne.n	80133c8 <_svfiprintf_r+0x130>
 80133ae:	7863      	ldrb	r3, [r4, #1]
 80133b0:	2b2a      	cmp	r3, #42	; 0x2a
 80133b2:	d135      	bne.n	8013420 <_svfiprintf_r+0x188>
 80133b4:	9b03      	ldr	r3, [sp, #12]
 80133b6:	1d1a      	adds	r2, r3, #4
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	9203      	str	r2, [sp, #12]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	bfb8      	it	lt
 80133c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80133c4:	3402      	adds	r4, #2
 80133c6:	9305      	str	r3, [sp, #20]
 80133c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013494 <_svfiprintf_r+0x1fc>
 80133cc:	7821      	ldrb	r1, [r4, #0]
 80133ce:	2203      	movs	r2, #3
 80133d0:	4650      	mov	r0, sl
 80133d2:	f7ec ffa5 	bl	8000320 <memchr>
 80133d6:	b140      	cbz	r0, 80133ea <_svfiprintf_r+0x152>
 80133d8:	2340      	movs	r3, #64	; 0x40
 80133da:	eba0 000a 	sub.w	r0, r0, sl
 80133de:	fa03 f000 	lsl.w	r0, r3, r0
 80133e2:	9b04      	ldr	r3, [sp, #16]
 80133e4:	4303      	orrs	r3, r0
 80133e6:	3401      	adds	r4, #1
 80133e8:	9304      	str	r3, [sp, #16]
 80133ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133ee:	4826      	ldr	r0, [pc, #152]	; (8013488 <_svfiprintf_r+0x1f0>)
 80133f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133f4:	2206      	movs	r2, #6
 80133f6:	f7ec ff93 	bl	8000320 <memchr>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d038      	beq.n	8013470 <_svfiprintf_r+0x1d8>
 80133fe:	4b23      	ldr	r3, [pc, #140]	; (801348c <_svfiprintf_r+0x1f4>)
 8013400:	bb1b      	cbnz	r3, 801344a <_svfiprintf_r+0x1b2>
 8013402:	9b03      	ldr	r3, [sp, #12]
 8013404:	3307      	adds	r3, #7
 8013406:	f023 0307 	bic.w	r3, r3, #7
 801340a:	3308      	adds	r3, #8
 801340c:	9303      	str	r3, [sp, #12]
 801340e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013410:	4433      	add	r3, r6
 8013412:	9309      	str	r3, [sp, #36]	; 0x24
 8013414:	e767      	b.n	80132e6 <_svfiprintf_r+0x4e>
 8013416:	fb0c 3202 	mla	r2, ip, r2, r3
 801341a:	460c      	mov	r4, r1
 801341c:	2001      	movs	r0, #1
 801341e:	e7a5      	b.n	801336c <_svfiprintf_r+0xd4>
 8013420:	2300      	movs	r3, #0
 8013422:	3401      	adds	r4, #1
 8013424:	9305      	str	r3, [sp, #20]
 8013426:	4619      	mov	r1, r3
 8013428:	f04f 0c0a 	mov.w	ip, #10
 801342c:	4620      	mov	r0, r4
 801342e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013432:	3a30      	subs	r2, #48	; 0x30
 8013434:	2a09      	cmp	r2, #9
 8013436:	d903      	bls.n	8013440 <_svfiprintf_r+0x1a8>
 8013438:	2b00      	cmp	r3, #0
 801343a:	d0c5      	beq.n	80133c8 <_svfiprintf_r+0x130>
 801343c:	9105      	str	r1, [sp, #20]
 801343e:	e7c3      	b.n	80133c8 <_svfiprintf_r+0x130>
 8013440:	fb0c 2101 	mla	r1, ip, r1, r2
 8013444:	4604      	mov	r4, r0
 8013446:	2301      	movs	r3, #1
 8013448:	e7f0      	b.n	801342c <_svfiprintf_r+0x194>
 801344a:	ab03      	add	r3, sp, #12
 801344c:	9300      	str	r3, [sp, #0]
 801344e:	462a      	mov	r2, r5
 8013450:	4b0f      	ldr	r3, [pc, #60]	; (8013490 <_svfiprintf_r+0x1f8>)
 8013452:	a904      	add	r1, sp, #16
 8013454:	4638      	mov	r0, r7
 8013456:	f3af 8000 	nop.w
 801345a:	1c42      	adds	r2, r0, #1
 801345c:	4606      	mov	r6, r0
 801345e:	d1d6      	bne.n	801340e <_svfiprintf_r+0x176>
 8013460:	89ab      	ldrh	r3, [r5, #12]
 8013462:	065b      	lsls	r3, r3, #25
 8013464:	f53f af2c 	bmi.w	80132c0 <_svfiprintf_r+0x28>
 8013468:	9809      	ldr	r0, [sp, #36]	; 0x24
 801346a:	b01d      	add	sp, #116	; 0x74
 801346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013470:	ab03      	add	r3, sp, #12
 8013472:	9300      	str	r3, [sp, #0]
 8013474:	462a      	mov	r2, r5
 8013476:	4b06      	ldr	r3, [pc, #24]	; (8013490 <_svfiprintf_r+0x1f8>)
 8013478:	a904      	add	r1, sp, #16
 801347a:	4638      	mov	r0, r7
 801347c:	f000 f87a 	bl	8013574 <_printf_i>
 8013480:	e7eb      	b.n	801345a <_svfiprintf_r+0x1c2>
 8013482:	bf00      	nop
 8013484:	08013aa8 	.word	0x08013aa8
 8013488:	08013ab2 	.word	0x08013ab2
 801348c:	00000000 	.word	0x00000000
 8013490:	080131e1 	.word	0x080131e1
 8013494:	08013aae 	.word	0x08013aae

08013498 <_printf_common>:
 8013498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801349c:	4616      	mov	r6, r2
 801349e:	4699      	mov	r9, r3
 80134a0:	688a      	ldr	r2, [r1, #8]
 80134a2:	690b      	ldr	r3, [r1, #16]
 80134a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80134a8:	4293      	cmp	r3, r2
 80134aa:	bfb8      	it	lt
 80134ac:	4613      	movlt	r3, r2
 80134ae:	6033      	str	r3, [r6, #0]
 80134b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80134b4:	4607      	mov	r7, r0
 80134b6:	460c      	mov	r4, r1
 80134b8:	b10a      	cbz	r2, 80134be <_printf_common+0x26>
 80134ba:	3301      	adds	r3, #1
 80134bc:	6033      	str	r3, [r6, #0]
 80134be:	6823      	ldr	r3, [r4, #0]
 80134c0:	0699      	lsls	r1, r3, #26
 80134c2:	bf42      	ittt	mi
 80134c4:	6833      	ldrmi	r3, [r6, #0]
 80134c6:	3302      	addmi	r3, #2
 80134c8:	6033      	strmi	r3, [r6, #0]
 80134ca:	6825      	ldr	r5, [r4, #0]
 80134cc:	f015 0506 	ands.w	r5, r5, #6
 80134d0:	d106      	bne.n	80134e0 <_printf_common+0x48>
 80134d2:	f104 0a19 	add.w	sl, r4, #25
 80134d6:	68e3      	ldr	r3, [r4, #12]
 80134d8:	6832      	ldr	r2, [r6, #0]
 80134da:	1a9b      	subs	r3, r3, r2
 80134dc:	42ab      	cmp	r3, r5
 80134de:	dc26      	bgt.n	801352e <_printf_common+0x96>
 80134e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80134e4:	1e13      	subs	r3, r2, #0
 80134e6:	6822      	ldr	r2, [r4, #0]
 80134e8:	bf18      	it	ne
 80134ea:	2301      	movne	r3, #1
 80134ec:	0692      	lsls	r2, r2, #26
 80134ee:	d42b      	bmi.n	8013548 <_printf_common+0xb0>
 80134f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134f4:	4649      	mov	r1, r9
 80134f6:	4638      	mov	r0, r7
 80134f8:	47c0      	blx	r8
 80134fa:	3001      	adds	r0, #1
 80134fc:	d01e      	beq.n	801353c <_printf_common+0xa4>
 80134fe:	6823      	ldr	r3, [r4, #0]
 8013500:	68e5      	ldr	r5, [r4, #12]
 8013502:	6832      	ldr	r2, [r6, #0]
 8013504:	f003 0306 	and.w	r3, r3, #6
 8013508:	2b04      	cmp	r3, #4
 801350a:	bf08      	it	eq
 801350c:	1aad      	subeq	r5, r5, r2
 801350e:	68a3      	ldr	r3, [r4, #8]
 8013510:	6922      	ldr	r2, [r4, #16]
 8013512:	bf0c      	ite	eq
 8013514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013518:	2500      	movne	r5, #0
 801351a:	4293      	cmp	r3, r2
 801351c:	bfc4      	itt	gt
 801351e:	1a9b      	subgt	r3, r3, r2
 8013520:	18ed      	addgt	r5, r5, r3
 8013522:	2600      	movs	r6, #0
 8013524:	341a      	adds	r4, #26
 8013526:	42b5      	cmp	r5, r6
 8013528:	d11a      	bne.n	8013560 <_printf_common+0xc8>
 801352a:	2000      	movs	r0, #0
 801352c:	e008      	b.n	8013540 <_printf_common+0xa8>
 801352e:	2301      	movs	r3, #1
 8013530:	4652      	mov	r2, sl
 8013532:	4649      	mov	r1, r9
 8013534:	4638      	mov	r0, r7
 8013536:	47c0      	blx	r8
 8013538:	3001      	adds	r0, #1
 801353a:	d103      	bne.n	8013544 <_printf_common+0xac>
 801353c:	f04f 30ff 	mov.w	r0, #4294967295
 8013540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013544:	3501      	adds	r5, #1
 8013546:	e7c6      	b.n	80134d6 <_printf_common+0x3e>
 8013548:	18e1      	adds	r1, r4, r3
 801354a:	1c5a      	adds	r2, r3, #1
 801354c:	2030      	movs	r0, #48	; 0x30
 801354e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013552:	4422      	add	r2, r4
 8013554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801355c:	3302      	adds	r3, #2
 801355e:	e7c7      	b.n	80134f0 <_printf_common+0x58>
 8013560:	2301      	movs	r3, #1
 8013562:	4622      	mov	r2, r4
 8013564:	4649      	mov	r1, r9
 8013566:	4638      	mov	r0, r7
 8013568:	47c0      	blx	r8
 801356a:	3001      	adds	r0, #1
 801356c:	d0e6      	beq.n	801353c <_printf_common+0xa4>
 801356e:	3601      	adds	r6, #1
 8013570:	e7d9      	b.n	8013526 <_printf_common+0x8e>
	...

08013574 <_printf_i>:
 8013574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013578:	460c      	mov	r4, r1
 801357a:	4691      	mov	r9, r2
 801357c:	7e27      	ldrb	r7, [r4, #24]
 801357e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013580:	2f78      	cmp	r7, #120	; 0x78
 8013582:	4680      	mov	r8, r0
 8013584:	469a      	mov	sl, r3
 8013586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801358a:	d807      	bhi.n	801359c <_printf_i+0x28>
 801358c:	2f62      	cmp	r7, #98	; 0x62
 801358e:	d80a      	bhi.n	80135a6 <_printf_i+0x32>
 8013590:	2f00      	cmp	r7, #0
 8013592:	f000 80d8 	beq.w	8013746 <_printf_i+0x1d2>
 8013596:	2f58      	cmp	r7, #88	; 0x58
 8013598:	f000 80a3 	beq.w	80136e2 <_printf_i+0x16e>
 801359c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80135a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80135a4:	e03a      	b.n	801361c <_printf_i+0xa8>
 80135a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80135aa:	2b15      	cmp	r3, #21
 80135ac:	d8f6      	bhi.n	801359c <_printf_i+0x28>
 80135ae:	a001      	add	r0, pc, #4	; (adr r0, 80135b4 <_printf_i+0x40>)
 80135b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80135b4:	0801360d 	.word	0x0801360d
 80135b8:	08013621 	.word	0x08013621
 80135bc:	0801359d 	.word	0x0801359d
 80135c0:	0801359d 	.word	0x0801359d
 80135c4:	0801359d 	.word	0x0801359d
 80135c8:	0801359d 	.word	0x0801359d
 80135cc:	08013621 	.word	0x08013621
 80135d0:	0801359d 	.word	0x0801359d
 80135d4:	0801359d 	.word	0x0801359d
 80135d8:	0801359d 	.word	0x0801359d
 80135dc:	0801359d 	.word	0x0801359d
 80135e0:	0801372d 	.word	0x0801372d
 80135e4:	08013651 	.word	0x08013651
 80135e8:	0801370f 	.word	0x0801370f
 80135ec:	0801359d 	.word	0x0801359d
 80135f0:	0801359d 	.word	0x0801359d
 80135f4:	0801374f 	.word	0x0801374f
 80135f8:	0801359d 	.word	0x0801359d
 80135fc:	08013651 	.word	0x08013651
 8013600:	0801359d 	.word	0x0801359d
 8013604:	0801359d 	.word	0x0801359d
 8013608:	08013717 	.word	0x08013717
 801360c:	680b      	ldr	r3, [r1, #0]
 801360e:	1d1a      	adds	r2, r3, #4
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	600a      	str	r2, [r1, #0]
 8013614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801361c:	2301      	movs	r3, #1
 801361e:	e0a3      	b.n	8013768 <_printf_i+0x1f4>
 8013620:	6825      	ldr	r5, [r4, #0]
 8013622:	6808      	ldr	r0, [r1, #0]
 8013624:	062e      	lsls	r6, r5, #24
 8013626:	f100 0304 	add.w	r3, r0, #4
 801362a:	d50a      	bpl.n	8013642 <_printf_i+0xce>
 801362c:	6805      	ldr	r5, [r0, #0]
 801362e:	600b      	str	r3, [r1, #0]
 8013630:	2d00      	cmp	r5, #0
 8013632:	da03      	bge.n	801363c <_printf_i+0xc8>
 8013634:	232d      	movs	r3, #45	; 0x2d
 8013636:	426d      	negs	r5, r5
 8013638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801363c:	485e      	ldr	r0, [pc, #376]	; (80137b8 <_printf_i+0x244>)
 801363e:	230a      	movs	r3, #10
 8013640:	e019      	b.n	8013676 <_printf_i+0x102>
 8013642:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013646:	6805      	ldr	r5, [r0, #0]
 8013648:	600b      	str	r3, [r1, #0]
 801364a:	bf18      	it	ne
 801364c:	b22d      	sxthne	r5, r5
 801364e:	e7ef      	b.n	8013630 <_printf_i+0xbc>
 8013650:	680b      	ldr	r3, [r1, #0]
 8013652:	6825      	ldr	r5, [r4, #0]
 8013654:	1d18      	adds	r0, r3, #4
 8013656:	6008      	str	r0, [r1, #0]
 8013658:	0628      	lsls	r0, r5, #24
 801365a:	d501      	bpl.n	8013660 <_printf_i+0xec>
 801365c:	681d      	ldr	r5, [r3, #0]
 801365e:	e002      	b.n	8013666 <_printf_i+0xf2>
 8013660:	0669      	lsls	r1, r5, #25
 8013662:	d5fb      	bpl.n	801365c <_printf_i+0xe8>
 8013664:	881d      	ldrh	r5, [r3, #0]
 8013666:	4854      	ldr	r0, [pc, #336]	; (80137b8 <_printf_i+0x244>)
 8013668:	2f6f      	cmp	r7, #111	; 0x6f
 801366a:	bf0c      	ite	eq
 801366c:	2308      	moveq	r3, #8
 801366e:	230a      	movne	r3, #10
 8013670:	2100      	movs	r1, #0
 8013672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013676:	6866      	ldr	r6, [r4, #4]
 8013678:	60a6      	str	r6, [r4, #8]
 801367a:	2e00      	cmp	r6, #0
 801367c:	bfa2      	ittt	ge
 801367e:	6821      	ldrge	r1, [r4, #0]
 8013680:	f021 0104 	bicge.w	r1, r1, #4
 8013684:	6021      	strge	r1, [r4, #0]
 8013686:	b90d      	cbnz	r5, 801368c <_printf_i+0x118>
 8013688:	2e00      	cmp	r6, #0
 801368a:	d04d      	beq.n	8013728 <_printf_i+0x1b4>
 801368c:	4616      	mov	r6, r2
 801368e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013692:	fb03 5711 	mls	r7, r3, r1, r5
 8013696:	5dc7      	ldrb	r7, [r0, r7]
 8013698:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801369c:	462f      	mov	r7, r5
 801369e:	42bb      	cmp	r3, r7
 80136a0:	460d      	mov	r5, r1
 80136a2:	d9f4      	bls.n	801368e <_printf_i+0x11a>
 80136a4:	2b08      	cmp	r3, #8
 80136a6:	d10b      	bne.n	80136c0 <_printf_i+0x14c>
 80136a8:	6823      	ldr	r3, [r4, #0]
 80136aa:	07df      	lsls	r7, r3, #31
 80136ac:	d508      	bpl.n	80136c0 <_printf_i+0x14c>
 80136ae:	6923      	ldr	r3, [r4, #16]
 80136b0:	6861      	ldr	r1, [r4, #4]
 80136b2:	4299      	cmp	r1, r3
 80136b4:	bfde      	ittt	le
 80136b6:	2330      	movle	r3, #48	; 0x30
 80136b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80136bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80136c0:	1b92      	subs	r2, r2, r6
 80136c2:	6122      	str	r2, [r4, #16]
 80136c4:	f8cd a000 	str.w	sl, [sp]
 80136c8:	464b      	mov	r3, r9
 80136ca:	aa03      	add	r2, sp, #12
 80136cc:	4621      	mov	r1, r4
 80136ce:	4640      	mov	r0, r8
 80136d0:	f7ff fee2 	bl	8013498 <_printf_common>
 80136d4:	3001      	adds	r0, #1
 80136d6:	d14c      	bne.n	8013772 <_printf_i+0x1fe>
 80136d8:	f04f 30ff 	mov.w	r0, #4294967295
 80136dc:	b004      	add	sp, #16
 80136de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136e2:	4835      	ldr	r0, [pc, #212]	; (80137b8 <_printf_i+0x244>)
 80136e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80136e8:	6823      	ldr	r3, [r4, #0]
 80136ea:	680e      	ldr	r6, [r1, #0]
 80136ec:	061f      	lsls	r7, r3, #24
 80136ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80136f2:	600e      	str	r6, [r1, #0]
 80136f4:	d514      	bpl.n	8013720 <_printf_i+0x1ac>
 80136f6:	07d9      	lsls	r1, r3, #31
 80136f8:	bf44      	itt	mi
 80136fa:	f043 0320 	orrmi.w	r3, r3, #32
 80136fe:	6023      	strmi	r3, [r4, #0]
 8013700:	b91d      	cbnz	r5, 801370a <_printf_i+0x196>
 8013702:	6823      	ldr	r3, [r4, #0]
 8013704:	f023 0320 	bic.w	r3, r3, #32
 8013708:	6023      	str	r3, [r4, #0]
 801370a:	2310      	movs	r3, #16
 801370c:	e7b0      	b.n	8013670 <_printf_i+0xfc>
 801370e:	6823      	ldr	r3, [r4, #0]
 8013710:	f043 0320 	orr.w	r3, r3, #32
 8013714:	6023      	str	r3, [r4, #0]
 8013716:	2378      	movs	r3, #120	; 0x78
 8013718:	4828      	ldr	r0, [pc, #160]	; (80137bc <_printf_i+0x248>)
 801371a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801371e:	e7e3      	b.n	80136e8 <_printf_i+0x174>
 8013720:	065e      	lsls	r6, r3, #25
 8013722:	bf48      	it	mi
 8013724:	b2ad      	uxthmi	r5, r5
 8013726:	e7e6      	b.n	80136f6 <_printf_i+0x182>
 8013728:	4616      	mov	r6, r2
 801372a:	e7bb      	b.n	80136a4 <_printf_i+0x130>
 801372c:	680b      	ldr	r3, [r1, #0]
 801372e:	6826      	ldr	r6, [r4, #0]
 8013730:	6960      	ldr	r0, [r4, #20]
 8013732:	1d1d      	adds	r5, r3, #4
 8013734:	600d      	str	r5, [r1, #0]
 8013736:	0635      	lsls	r5, r6, #24
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	d501      	bpl.n	8013740 <_printf_i+0x1cc>
 801373c:	6018      	str	r0, [r3, #0]
 801373e:	e002      	b.n	8013746 <_printf_i+0x1d2>
 8013740:	0671      	lsls	r1, r6, #25
 8013742:	d5fb      	bpl.n	801373c <_printf_i+0x1c8>
 8013744:	8018      	strh	r0, [r3, #0]
 8013746:	2300      	movs	r3, #0
 8013748:	6123      	str	r3, [r4, #16]
 801374a:	4616      	mov	r6, r2
 801374c:	e7ba      	b.n	80136c4 <_printf_i+0x150>
 801374e:	680b      	ldr	r3, [r1, #0]
 8013750:	1d1a      	adds	r2, r3, #4
 8013752:	600a      	str	r2, [r1, #0]
 8013754:	681e      	ldr	r6, [r3, #0]
 8013756:	6862      	ldr	r2, [r4, #4]
 8013758:	2100      	movs	r1, #0
 801375a:	4630      	mov	r0, r6
 801375c:	f7ec fde0 	bl	8000320 <memchr>
 8013760:	b108      	cbz	r0, 8013766 <_printf_i+0x1f2>
 8013762:	1b80      	subs	r0, r0, r6
 8013764:	6060      	str	r0, [r4, #4]
 8013766:	6863      	ldr	r3, [r4, #4]
 8013768:	6123      	str	r3, [r4, #16]
 801376a:	2300      	movs	r3, #0
 801376c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013770:	e7a8      	b.n	80136c4 <_printf_i+0x150>
 8013772:	6923      	ldr	r3, [r4, #16]
 8013774:	4632      	mov	r2, r6
 8013776:	4649      	mov	r1, r9
 8013778:	4640      	mov	r0, r8
 801377a:	47d0      	blx	sl
 801377c:	3001      	adds	r0, #1
 801377e:	d0ab      	beq.n	80136d8 <_printf_i+0x164>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	079b      	lsls	r3, r3, #30
 8013784:	d413      	bmi.n	80137ae <_printf_i+0x23a>
 8013786:	68e0      	ldr	r0, [r4, #12]
 8013788:	9b03      	ldr	r3, [sp, #12]
 801378a:	4298      	cmp	r0, r3
 801378c:	bfb8      	it	lt
 801378e:	4618      	movlt	r0, r3
 8013790:	e7a4      	b.n	80136dc <_printf_i+0x168>
 8013792:	2301      	movs	r3, #1
 8013794:	4632      	mov	r2, r6
 8013796:	4649      	mov	r1, r9
 8013798:	4640      	mov	r0, r8
 801379a:	47d0      	blx	sl
 801379c:	3001      	adds	r0, #1
 801379e:	d09b      	beq.n	80136d8 <_printf_i+0x164>
 80137a0:	3501      	adds	r5, #1
 80137a2:	68e3      	ldr	r3, [r4, #12]
 80137a4:	9903      	ldr	r1, [sp, #12]
 80137a6:	1a5b      	subs	r3, r3, r1
 80137a8:	42ab      	cmp	r3, r5
 80137aa:	dcf2      	bgt.n	8013792 <_printf_i+0x21e>
 80137ac:	e7eb      	b.n	8013786 <_printf_i+0x212>
 80137ae:	2500      	movs	r5, #0
 80137b0:	f104 0619 	add.w	r6, r4, #25
 80137b4:	e7f5      	b.n	80137a2 <_printf_i+0x22e>
 80137b6:	bf00      	nop
 80137b8:	08013ab9 	.word	0x08013ab9
 80137bc:	08013aca 	.word	0x08013aca

080137c0 <memmove>:
 80137c0:	4288      	cmp	r0, r1
 80137c2:	b510      	push	{r4, lr}
 80137c4:	eb01 0402 	add.w	r4, r1, r2
 80137c8:	d902      	bls.n	80137d0 <memmove+0x10>
 80137ca:	4284      	cmp	r4, r0
 80137cc:	4623      	mov	r3, r4
 80137ce:	d807      	bhi.n	80137e0 <memmove+0x20>
 80137d0:	1e43      	subs	r3, r0, #1
 80137d2:	42a1      	cmp	r1, r4
 80137d4:	d008      	beq.n	80137e8 <memmove+0x28>
 80137d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137de:	e7f8      	b.n	80137d2 <memmove+0x12>
 80137e0:	4402      	add	r2, r0
 80137e2:	4601      	mov	r1, r0
 80137e4:	428a      	cmp	r2, r1
 80137e6:	d100      	bne.n	80137ea <memmove+0x2a>
 80137e8:	bd10      	pop	{r4, pc}
 80137ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137f2:	e7f7      	b.n	80137e4 <memmove+0x24>

080137f4 <_realloc_r>:
 80137f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137f6:	4607      	mov	r7, r0
 80137f8:	4614      	mov	r4, r2
 80137fa:	460e      	mov	r6, r1
 80137fc:	b921      	cbnz	r1, 8013808 <_realloc_r+0x14>
 80137fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013802:	4611      	mov	r1, r2
 8013804:	f7ff bb9c 	b.w	8012f40 <_malloc_r>
 8013808:	b922      	cbnz	r2, 8013814 <_realloc_r+0x20>
 801380a:	f7ff fc99 	bl	8013140 <_free_r>
 801380e:	4625      	mov	r5, r4
 8013810:	4628      	mov	r0, r5
 8013812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013814:	f000 f814 	bl	8013840 <_malloc_usable_size_r>
 8013818:	42a0      	cmp	r0, r4
 801381a:	d20f      	bcs.n	801383c <_realloc_r+0x48>
 801381c:	4621      	mov	r1, r4
 801381e:	4638      	mov	r0, r7
 8013820:	f7ff fb8e 	bl	8012f40 <_malloc_r>
 8013824:	4605      	mov	r5, r0
 8013826:	2800      	cmp	r0, #0
 8013828:	d0f2      	beq.n	8013810 <_realloc_r+0x1c>
 801382a:	4631      	mov	r1, r6
 801382c:	4622      	mov	r2, r4
 801382e:	f7ff fb71 	bl	8012f14 <memcpy>
 8013832:	4631      	mov	r1, r6
 8013834:	4638      	mov	r0, r7
 8013836:	f7ff fc83 	bl	8013140 <_free_r>
 801383a:	e7e9      	b.n	8013810 <_realloc_r+0x1c>
 801383c:	4635      	mov	r5, r6
 801383e:	e7e7      	b.n	8013810 <_realloc_r+0x1c>

08013840 <_malloc_usable_size_r>:
 8013840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013844:	1f18      	subs	r0, r3, #4
 8013846:	2b00      	cmp	r3, #0
 8013848:	bfbc      	itt	lt
 801384a:	580b      	ldrlt	r3, [r1, r0]
 801384c:	18c0      	addlt	r0, r0, r3
 801384e:	4770      	bx	lr

08013850 <_init>:
 8013850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013852:	bf00      	nop
 8013854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013856:	bc08      	pop	{r3}
 8013858:	469e      	mov	lr, r3
 801385a:	4770      	bx	lr

0801385c <_fini>:
 801385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801385e:	bf00      	nop
 8013860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013862:	bc08      	pop	{r3}
 8013864:	469e      	mov	lr, r3
 8013866:	4770      	bx	lr
