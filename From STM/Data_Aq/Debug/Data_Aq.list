
Data_Aq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbb8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800de88  0800de88  0001de88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800df44  0800df44  0001df44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800df48  0800df48  0001df48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00008078  24000000  0800df4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24008078  08015fc4  00028078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240080d8  08016024  000280d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b80  24008138  08016084  00028138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400ccb8  08016084  0002ccb8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00028138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e130  00000000  00000000  00028166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dd9  00000000  00000000  00066296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0006c070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d60  00000000  00000000  0006dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000075cc  00000000  00000000  0006fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028cfe  00000000  00000000  000772d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00164ce5  00000000  00000000  0009ffd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00204cb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008598  00000000  00000000  00204d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24008138 	.word	0x24008138
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800de70 	.word	0x0800de70

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400813c 	.word	0x2400813c
 800030c:	0800de70 	.word	0x0800de70

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HalfKBWrite>:
 */
#include "stdio.h"
#include "helpercmd.h"

void HalfKBWrite(char* BufferToFill,uint16_t qty)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
	for (int count=0; count<qty; count++)
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e024      	b.n	8000664 <HalfKBWrite+0x5c>
	{
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	e01a      	b.n	8000656 <HalfKBWrite+0x4e>
		{
			if(HexFiller >=256)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2bff      	cmp	r3, #255	; 0xff
 8000624:	dd0a      	ble.n	800063c <HalfKBWrite+0x34>
			{
				BufferToFill[count*512+HexFiller] = HexFiller - 256;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	025a      	lsls	r2, r3, #9
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	4413      	add	r3, r2
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	68ba      	ldr	r2, [r7, #8]
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e009      	b.n	8000650 <HalfKBWrite+0x48>
			}else
			{
				BufferToFill[count*512+HexFiller] = HexFiller;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	025a      	lsls	r2, r3, #9
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4413      	add	r3, r2
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	701a      	strb	r2, [r3, #0]
		for(int HexFiller = 0; HexFiller<512;HexFiller++)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	3301      	adds	r3, #1
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800065c:	dbe0      	blt.n	8000620 <HalfKBWrite+0x18>
	for (int count=0; count<qty; count++)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbd6      	blt.n	800061a <HalfKBWrite+0x12>
			}

		}

	}
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HalfKBWrite((char *)stext,chunk_mult);
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	481b      	ldr	r0, [pc, #108]	; (80006f4 <main+0x78>)
 8000686:	f7ff ffbf 	bl	8000608 <HalfKBWrite>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 ff47 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f837 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 fa59 	bl	8000b48 <MX_GPIO_Init>
  MX_ETH_Init();
 8000696:	f000 f8ad 	bl	80007f4 <MX_ETH_Init>
  MX_MDMA_Init();
 800069a:	f000 f9f1 	bl	8000a80 <MX_MDMA_Init>
  MX_SDMMC1_SD_Init();
 800069e:	f000 f8f5 	bl	800088c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006a2:	f00b fad1 	bl	800bc48 <MX_FATFS_Init>
  MX_DMA_Init();
 80006a6:	f000 f9cb 	bl	8000a40 <MX_DMA_Init>
  MX_TIM2_Init();
 80006aa:	f000 f91d 	bl	80008e8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80006ae:	f000 f973 	bl	8000998 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006b2:	f000 f9bd 	bl	8000a30 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CCR1 = 2;
 80006b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ba:	2202      	movs	r2, #2
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80006be:	2100      	movs	r1, #0
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <main+0x7c>)
 80006c2:	f008 fbbd 	bl	8008e40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2101      	movs	r1, #1
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <main+0x80>)
 80006cc:	f003 fb30 	bl	8003d30 <HAL_GPIO_WritePin>
  uint16_t PinState = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	80fb      	strh	r3, [r7, #6]
  while(1){
	  //LED_GREEN_GPIO_Port->BSRR != LED_GREEN_GPIO_Port->BSRR;

	  if (PinState != GPIO_PIN_RESET)
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d005      	beq.n	80006e6 <main+0x6a>
	  {
		  PinState = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	80fb      	strh	r3, [r7, #6]
		  LED_GREEN_GPIO_Port->BSRR = LED_GREEN_Pin;
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <main+0x80>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	619a      	str	r2, [r3, #24]
 80006e4:	e7f6      	b.n	80006d4 <main+0x58>
	  }
	  else
	  {
		  PinState = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	80fb      	strh	r3, [r7, #6]
		  LED_GREEN_GPIO_Port->BSRR = (uint32_t)LED_GREEN_Pin << 16;
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <main+0x80>)
 80006ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006f0:	619a      	str	r2, [r3, #24]
	  if (PinState != GPIO_PIN_RESET)
 80006f2:	e7ef      	b.n	80006d4 <main+0x58>
 80006f4:	24000000 	.word	0x24000000
 80006f8:	2400c644 	.word	0x2400c644
 80006fc:	58020400 	.word	0x58020400

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	; 0x70
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	224c      	movs	r2, #76	; 0x4c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00d fba6 	bl	800de60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00d fba0 	bl	800de60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000720:	2002      	movs	r0, #2
 8000722:	f003 fdab 	bl	800427c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b30      	ldr	r3, [pc, #192]	; (80007ec <SystemClock_Config+0xec>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a2f      	ldr	r2, [pc, #188]	; (80007ec <SystemClock_Config+0xec>)
 8000730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <SystemClock_Config+0xec>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000742:	bf00      	nop
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <SystemClock_Config+0xec>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800074c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000750:	d1f8      	bne.n	8000744 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <SystemClock_Config+0xf0>)
 8000754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000756:	f023 0303 	bic.w	r3, r3, #3
 800075a:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <SystemClock_Config+0xf0>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000762:	2321      	movs	r3, #33	; 0x21
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000766:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000774:	2302      	movs	r3, #2
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800077c:	f240 1313 	movw	r3, #275	; 0x113
 8000780:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000786:	2304      	movs	r3, #4
 8000788:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800078e:	2304      	movs	r3, #4
 8000790:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000792:	2300      	movs	r3, #0
 8000794:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fda6 	bl	80042f0 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007aa:	f000 fadb 	bl	8000d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	233f      	movs	r3, #63	; 0x3f
 80007b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2303      	movs	r3, #3
 80007b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ba:	2308      	movs	r3, #8
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2103      	movs	r1, #3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 f937 	bl	8004a48 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007e0:	f000 fac0 	bl	8000d64 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3770      	adds	r7, #112	; 0x70
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	58024800 	.word	0x58024800
 80007f0:	58024400 	.word	0x58024400

080007f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_ETH_Init+0x80>)
 80007fa:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <MX_ETH_Init+0x84>)
 80007fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ETH_Init+0x88>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_ETH_Init+0x88>)
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_ETH_Init+0x88>)
 800080c:	22e1      	movs	r2, #225	; 0xe1
 800080e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ETH_Init+0x88>)
 8000812:	2200      	movs	r2, #0
 8000814:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_ETH_Init+0x88>)
 8000818:	2200      	movs	r2, #0
 800081a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_ETH_Init+0x88>)
 800081e:	2200      	movs	r2, #0
 8000820:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_ETH_Init+0x80>)
 8000824:	4a15      	ldr	r2, [pc, #84]	; (800087c <MX_ETH_Init+0x88>)
 8000826:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_ETH_Init+0x80>)
 800082a:	2201      	movs	r2, #1
 800082c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_ETH_Init+0x80>)
 8000830:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_ETH_Init+0x8c>)
 8000832:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_ETH_Init+0x80>)
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_ETH_Init+0x90>)
 8000838:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_ETH_Init+0x80>)
 800083c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000840:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_ETH_Init+0x80>)
 8000844:	f002 fc9e 	bl	8003184 <HAL_ETH_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800084e:	f000 fa89 	bl	8000d64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000852:	2234      	movs	r2, #52	; 0x34
 8000854:	2100      	movs	r1, #0
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_ETH_Init+0x94>)
 8000858:	f00d fb02 	bl	800de60 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_ETH_Init+0x94>)
 800085e:	2221      	movs	r2, #33	; 0x21
 8000860:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_ETH_Init+0x94>)
 8000864:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000868:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_ETH_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2400c700 	.word	0x2400c700
 8000878:	40028000 	.word	0x40028000
 800087c:	24008154 	.word	0x24008154
 8000880:	240080d8 	.word	0x240080d8
 8000884:	24008078 	.word	0x24008078
 8000888:	2400c788 	.word	0x2400c788

0800088c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_SDMMC1_SD_Init+0x50>)
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_SDMMC1_SD_Init+0x54>)
 8000894:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SDMMC1_SD_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_SDMMC1_SD_Init+0x50>)
 800089e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a2:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_SDMMC1_SD_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008aa:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_SDMMC1_SD_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_SDMMC1_SD_Init+0x50>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  __HAL_RCC_SDMMC1_FORCE_RESET();
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_SDMMC1_SD_Init+0x58>)
 80008ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80008bc:	4a09      	ldr	r2, [pc, #36]	; (80008e4 <MX_SDMMC1_SD_Init+0x58>)
 80008be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c2:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RCC_SDMMC1_RELEASE_RESET();
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_SDMMC1_SD_Init+0x58>)
 80008c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <MX_SDMMC1_SD_Init+0x58>)
 80008ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ce:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* USER CODE END SDMMC1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	2400c360 	.word	0x2400c360
 80008e0:	52007000 	.word	0x52007000
 80008e4:	58024400 	.word	0x58024400

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090c:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_TIM2_Init+0xac>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM2_Init+0xac>)
 8000916:	2204      	movs	r2, #4
 8000918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_TIM2_Init+0xac>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4-1;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_TIM2_Init+0xac>)
 8000922:	2203      	movs	r2, #3
 8000924:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_TIM2_Init+0xac>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_TIM2_Init+0xac>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000932:	4818      	ldr	r0, [pc, #96]	; (8000994 <MX_TIM2_Init+0xac>)
 8000934:	f008 fa2c 	bl	8008d90 <HAL_TIM_PWM_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800093e:	f000 fa11 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4810      	ldr	r0, [pc, #64]	; (8000994 <MX_TIM2_Init+0xac>)
 8000952:	f009 f98f 	bl	8009c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800095c:	f000 fa02 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_TIM2_Init+0xac>)
 8000978:	f008 fc9e 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000982:	f000 f9ef 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <MX_TIM2_Init+0xac>)
 8000988:	f000 fbe8 	bl	800115c <HAL_TIM_MspPostInit>

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	; 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2400c644 	.word	0x2400c644

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <MX_USART3_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009e2:	f009 fa01 	bl	8009de8 <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f9ba 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009f4:	f00a fa94 	bl	800af20 <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f9b1 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a06:	f00a fac9 	bl	800af9c <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f9a8 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a16:	f00a fa4a 	bl	800aeae <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f9a0 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2400c2c4 	.word	0x2400c2c4
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <MX_DMA_Init+0x3c>)
 8000a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <MX_DMA_Init+0x3c>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_DMA_Init+0x3c>)
 8000a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	200c      	movs	r0, #12
 8000a6a:	f000 fea3 	bl	80017b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a6e:	200c      	movs	r0, #12
 8000a70:	f000 feba 	bl	80017e8 <HAL_NVIC_EnableIRQ>

}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58024400 	.word	0x58024400

08000a80 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_MDMA_Init+0xbc>)
 8000a88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a8c:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <MX_MDMA_Init+0xbc>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_MDMA_Init+0xbc>)
 8000a98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000aa6:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <MX_MDMA_Init+0xc4>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000aac:	221d      	movs	r2, #29
 8000aae:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000b02:	f003 f92e 	bl	8003d62 <HAL_MDMA_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000b0c:	f000 f92a 	bl	8000d64 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <MX_MDMA_Init+0xc0>)
 8000b16:	f003 f970 	bl	8003dfa <HAL_MDMA_ConfigPostRequestMask>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000b20:	f000 f920 	bl	8000d64 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2105      	movs	r1, #5
 8000b28:	207a      	movs	r0, #122	; 0x7a
 8000b2a:	f000 fe43 	bl	80017b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000b2e:	207a      	movs	r0, #122	; 0x7a
 8000b30:	f000 fe5a 	bl	80017e8 <HAL_NVIC_EnableIRQ>

}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	2400c694 	.word	0x2400c694
 8000b44:	52000040 	.word	0x52000040

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b71      	ldr	r3, [pc, #452]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	4a6f      	ldr	r2, [pc, #444]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6e:	4b6d      	ldr	r3, [pc, #436]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7c:	4b69      	ldr	r3, [pc, #420]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	4a68      	ldr	r2, [pc, #416]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8c:	4b65      	ldr	r3, [pc, #404]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b62      	ldr	r3, [pc, #392]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a60      	ldr	r2, [pc, #384]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b5e      	ldr	r3, [pc, #376]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	4b5a      	ldr	r3, [pc, #360]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a59      	ldr	r2, [pc, #356]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b56      	ldr	r3, [pc, #344]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	4b53      	ldr	r3, [pc, #332]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	4a51      	ldr	r2, [pc, #324]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be6:	4b4f      	ldr	r3, [pc, #316]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf4:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	4a4a      	ldr	r2, [pc, #296]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c04:	4b47      	ldr	r3, [pc, #284]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	4b44      	ldr	r3, [pc, #272]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	4a42      	ldr	r2, [pc, #264]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <MX_GPIO_Init+0x1dc>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c36:	483c      	ldr	r0, [pc, #240]	; (8000d28 <MX_GPIO_Init+0x1e0>)
 8000c38:	f003 f87a 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	483a      	ldr	r0, [pc, #232]	; (8000d2c <MX_GPIO_Init+0x1e4>)
 8000c44:	f003 f874 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	4838      	ldr	r0, [pc, #224]	; (8000d30 <MX_GPIO_Init+0x1e8>)
 8000c4e:	f003 f86f 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4833      	ldr	r0, [pc, #204]	; (8000d34 <MX_GPIO_Init+0x1ec>)
 8000c68:	f002 fea2 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c6c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4828      	ldr	r0, [pc, #160]	; (8000d28 <MX_GPIO_Init+0x1e0>)
 8000c86:	f002 fe93 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4822      	ldr	r0, [pc, #136]	; (8000d2c <MX_GPIO_Init+0x1e4>)
 8000ca4:	f002 fe84 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481e      	ldr	r0, [pc, #120]	; (8000d38 <MX_GPIO_Init+0x1f0>)
 8000cbe:	f002 fe77 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4819      	ldr	r0, [pc, #100]	; (8000d3c <MX_GPIO_Init+0x1f4>)
 8000cd8:	f002 fe6a 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cee:	230a      	movs	r3, #10
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <MX_GPIO_Init+0x1f4>)
 8000cfa:	f002 fe59 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_GPIO_Init+0x1e8>)
 8000d16:	f002 fe4b 	bl	80039b0 <HAL_GPIO_Init>

}
 8000d1a:	bf00      	nop
 8000d1c:	3730      	adds	r7, #48	; 0x30
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	58024400 	.word	0x58024400
 8000d28:	58020400 	.word	0x58020400
 8000d2c:	58020c00 	.word	0x58020c00
 8000d30:	58021000 	.word	0x58021000
 8000d34:	58020800 	.word	0x58020800
 8000d38:	58021800 	.word	0x58021800
 8000d3c:	58020000 	.word	0x58020000

08000d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d52:	f000 fc1f 	bl	8001594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40010000 	.word	0x40010000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <Error_Handler+0x2c>)
 8000d6e:	f002 ffdf 	bl	8003d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2102      	movs	r1, #2
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <Error_Handler+0x30>)
 8000d78:	f002 ffda 	bl	8003d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <Error_Handler+0x2c>)
 8000d84:	f002 ffd4 	bl	8003d30 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x28>
 8000d8e:	bf00      	nop
 8000d90:	58020400 	.word	0x58020400
 8000d94:	58021000 	.word	0x58021000

08000d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x38>)
 8000da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_MspInit+0x38>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_MspInit+0x38>)
 8000db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f06f 0001 	mvn.w	r0, #1
 8000dc4:	f000 fcf6 	bl	80017b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	58024400 	.word	0x58024400

08000dd4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a59      	ldr	r2, [pc, #356]	; (8000f58 <HAL_ETH_MspInit+0x184>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	f040 80ab 	bne.w	8000f4e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000df8:	4b58      	ldr	r3, [pc, #352]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfe:	4a57      	ldr	r2, [pc, #348]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e08:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e16:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1c:	4a4f      	ldr	r2, [pc, #316]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e26:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e34:	4b49      	ldr	r3, [pc, #292]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e3a:	4a48      	ldr	r2, [pc, #288]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e44:	4b45      	ldr	r3, [pc, #276]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b42      	ldr	r3, [pc, #264]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a40      	ldr	r2, [pc, #256]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a39      	ldr	r2, [pc, #228]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a31      	ldr	r2, [pc, #196]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	4a2a      	ldr	r2, [pc, #168]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_ETH_MspInit+0x188>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000eca:	2332      	movs	r3, #50	; 0x32
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481e      	ldr	r0, [pc, #120]	; (8000f60 <HAL_ETH_MspInit+0x18c>)
 8000ee6:	f002 fd63 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eea:	2386      	movs	r3, #134	; 0x86
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efa:	230b      	movs	r3, #11
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4817      	ldr	r0, [pc, #92]	; (8000f64 <HAL_ETH_MspInit+0x190>)
 8000f06:	f002 fd53 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1c:	230b      	movs	r3, #11
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4810      	ldr	r0, [pc, #64]	; (8000f68 <HAL_ETH_MspInit+0x194>)
 8000f28:	f002 fd42 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3e:	230b      	movs	r3, #11
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4808      	ldr	r0, [pc, #32]	; (8000f6c <HAL_ETH_MspInit+0x198>)
 8000f4a:	f002 fd31 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3738      	adds	r7, #56	; 0x38
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40028000 	.word	0x40028000
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58020800 	.word	0x58020800
 8000f64:	58020000 	.word	0x58020000
 8000f68:	58020400 	.word	0x58020400
 8000f6c:	58021800 	.word	0x58021800

08000f70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0b8      	sub	sp, #224	; 0xe0
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	22b4      	movs	r2, #180	; 0xb4
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00c ff65 	bl	800de60 <memset>
  if(hsd->Instance==SDMMC1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a43      	ldr	r2, [pc, #268]	; (80010a8 <HAL_SD_MspInit+0x138>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d17f      	bne.n	80010a0 <HAL_SD_MspInit+0x130>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000faa:	2319      	movs	r3, #25
 8000fac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000fba:	23c0      	movs	r3, #192	; 0xc0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 f907 	bl	80051e4 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8000fdc:	f7ff fec2 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <HAL_SD_MspInit+0x13c>)
 8000fe2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fe6:	4a31      	ldr	r2, [pc, #196]	; (80010ac <HAL_SD_MspInit+0x13c>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <HAL_SD_MspInit+0x13c>)
 8000ff2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_SD_MspInit+0x13c>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	4a29      	ldr	r2, [pc, #164]	; (80010ac <HAL_SD_MspInit+0x13c>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_SD_MspInit+0x13c>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <HAL_SD_MspInit+0x13c>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a22      	ldr	r2, [pc, #136]	; (80010ac <HAL_SD_MspInit+0x13c>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <HAL_SD_MspInit+0x13c>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800103a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800103e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001054:	230c      	movs	r3, #12
 8001056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800105e:	4619      	mov	r1, r3
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <HAL_SD_MspInit+0x140>)
 8001062:	f002 fca5 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001066:	2304      	movs	r3, #4
 8001068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800107e:	230c      	movs	r3, #12
 8001080:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001088:	4619      	mov	r1, r3
 800108a:	480a      	ldr	r0, [pc, #40]	; (80010b4 <HAL_SD_MspInit+0x144>)
 800108c:	f002 fc90 	bl	80039b0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2105      	movs	r1, #5
 8001094:	2031      	movs	r0, #49	; 0x31
 8001096:	f000 fb8d 	bl	80017b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800109a:	2031      	movs	r0, #49	; 0x31
 800109c:	f000 fba4 	bl	80017e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	37e0      	adds	r7, #224	; 0xe0
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	52007000 	.word	0x52007000
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58020800 	.word	0x58020800
 80010b4:	58020c00 	.word	0x58020c00

080010b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c8:	d13d      	bne.n	8001146 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_TIM_PWM_MspInit+0x98>)
 80010cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d0:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <HAL_TIM_PWM_MspInit+0x98>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_TIM_PWM_MspInit+0x98>)
 80010dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream1;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 80010ea:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <HAL_TIM_PWM_MspInit+0xa0>)
 80010ec:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 80010f0:	2212      	movs	r2, #18
 80010f2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 80010f6:	2240      	movs	r2, #64	; 0x40
 80010f8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 8001102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001106:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 800110a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800110e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 800112c:	f000 fb6a 	bl	8001804 <HAL_DMA_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001136:	f7ff fe15 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_TIM_PWM_MspInit+0x9c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	58024400 	.word	0x58024400
 8001154:	2400c24c 	.word	0x2400c24c
 8001158:	40020028 	.word	0x40020028

0800115c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800117c:	d11e      	bne.n	80011bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_TIM_MspPostInit+0x68>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_TIM_MspPostInit+0x68>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_TIM_MspPostInit+0x68>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800119c:	2301      	movs	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <HAL_TIM_MspPostInit+0x6c>)
 80011b8:	f002 fbfa 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58020000 	.word	0x58020000

080011cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0b6      	sub	sp, #216	; 0xd8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	22b4      	movs	r2, #180	; 0xb4
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00c fe37 	bl	800de60 <memset>
  if(huart->Instance==USART3)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <HAL_UART_MspInit+0xc0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d142      	bne.n	8001282 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011fc:	2302      	movs	r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4618      	mov	r0, r3
 800120c:	f003 ffea 	bl	80051e4 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001216:	f7ff fda5 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_UART_MspInit+0xc4>)
 800121c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_UART_MspInit+0xc4>)
 8001222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_UART_MspInit+0xc4>)
 800122c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0xc4>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <HAL_UART_MspInit+0xc4>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_UART_MspInit+0xc4>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001256:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001270:	2307      	movs	r3, #7
 8001272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001276:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_UART_MspInit+0xc8>)
 800127e:	f002 fb97 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	37d8      	adds	r7, #216	; 0xd8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40004800 	.word	0x40004800
 8001290:	58024400 	.word	0x58024400
 8001294:	58020c00 	.word	0x58020c00

08001298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d844      	bhi.n	8001330 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80012a6:	2200      	movs	r2, #0
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	2019      	movs	r0, #25
 80012ac:	f000 fa82 	bl	80017b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012b0:	2019      	movs	r0, #25
 80012b2:	f000 fa99 	bl	80017e8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80012b6:	4a24      	ldr	r2, [pc, #144]	; (8001348 <HAL_InitTick+0xb0>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_InitTick+0xb4>)
 80012be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_InitTick+0xb4>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_InitTick+0xb4>)
 80012ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 ff3b 	bl	8005160 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012ea:	f003 ff23 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 80012ee:	4603      	mov	r3, r0
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <HAL_InitTick+0xb8>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	0c9b      	lsrs	r3, r3, #18
 80012fe:	3b01      	subs	r3, #1
 8001300:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_InitTick+0xbc>)
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_InitTick+0xc0>)
 8001306:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0xbc>)
 800130a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001310:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_InitTick+0xbc>)
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_InitTick+0xbc>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_InitTick+0xbc>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <HAL_InitTick+0xbc>)
 8001324:	f007 fc4c 	bl	8008bc0 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <HAL_InitTick+0xa6>
 800132e:	e001      	b.n	8001334 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e005      	b.n	8001340 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <HAL_InitTick+0xbc>)
 8001336:	f007 fca5 	bl	8008c84 <HAL_TIM_Base_Start_IT>
 800133a:	4603      	mov	r3, r0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3738      	adds	r7, #56	; 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	24008008 	.word	0x24008008
 800134c:	58024400 	.word	0x58024400
 8001350:	431bde83 	.word	0x431bde83
 8001354:	2400c7bc 	.word	0x2400c7bc
 8001358:	40010000 	.word	0x40010000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <DMA1_Stream1_IRQHandler+0x10>)
 800138e:	f000 fd93 	bl	8001eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2400c24c 	.word	0x2400c24c

0800139c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <TIM1_UP_IRQHandler+0x10>)
 80013a2:	f007 fe69 	bl	8009078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2400c7bc 	.word	0x2400c7bc

080013b0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <SDMMC1_IRQHandler+0x10>)
 80013b6:	f006 fa11 	bl	80077dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2400c360 	.word	0x2400c360

080013c4 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <MDMA_IRQHandler+0x10>)
 80013ca:	f002 fd69 	bl	8003ea0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2400c694 	.word	0x2400c694

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013dc:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <SystemInit+0xd0>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a31      	ldr	r2, [pc, #196]	; (80014a8 <SystemInit+0xd0>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <SystemInit+0xd4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 030f 	and.w	r3, r3, #15
 80013f4:	2b06      	cmp	r3, #6
 80013f6:	d807      	bhi.n	8001408 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <SystemInit+0xd4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 030f 	bic.w	r3, r3, #15
 8001400:	4a2a      	ldr	r2, [pc, #168]	; (80014ac <SystemInit+0xd4>)
 8001402:	f043 0307 	orr.w	r3, r3, #7
 8001406:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <SystemInit+0xd8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <SystemInit+0xd8>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <SystemInit+0xd8>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <SystemInit+0xd8>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4924      	ldr	r1, [pc, #144]	; (80014b0 <SystemInit+0xd8>)
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <SystemInit+0xdc>)
 8001422:	4013      	ands	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <SystemInit+0xd4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <SystemInit+0xd4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 030f 	bic.w	r3, r3, #15
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <SystemInit+0xd4>)
 800143c:	f043 0307 	orr.w	r3, r3, #7
 8001440:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <SystemInit+0xd8>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <SystemInit+0xd8>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <SystemInit+0xd8>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <SystemInit+0xd8>)
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <SystemInit+0xe0>)
 8001458:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <SystemInit+0xd8>)
 800145c:	4a17      	ldr	r2, [pc, #92]	; (80014bc <SystemInit+0xe4>)
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <SystemInit+0xd8>)
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <SystemInit+0xe8>)
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <SystemInit+0xd8>)
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <SystemInit+0xd8>)
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <SystemInit+0xe8>)
 8001470:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <SystemInit+0xd8>)
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <SystemInit+0xd8>)
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <SystemInit+0xe8>)
 800147c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <SystemInit+0xd8>)
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <SystemInit+0xd8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <SystemInit+0xd8>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <SystemInit+0xd8>)
 8001492:	2200      	movs	r2, #0
 8001494:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <SystemInit+0xec>)
 8001498:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800149c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00
 80014ac:	52002000 	.word	0x52002000
 80014b0:	58024400 	.word	0x58024400
 80014b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014b8:	02020200 	.word	0x02020200
 80014bc:	01ff0000 	.word	0x01ff0000
 80014c0:	01010280 	.word	0x01010280
 80014c4:	52004000 	.word	0x52004000

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014cc:	f7ff ff84 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	; (8001514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f00c fc81 	bl	800ddfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff f8bf 	bl	800067c <main>
  bx  lr
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001500:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001504:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001508:	24008078 	.word	0x24008078
  ldr r2, =_sidata
 800150c:	0800df4c 	.word	0x0800df4c
  ldr r2, =_sbss
 8001510:	24008138 	.word	0x24008138
  ldr r4, =_ebss
 8001514:	2400ccb8 	.word	0x2400ccb8

08001518 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC3_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001522:	2003      	movs	r0, #3
 8001524:	f000 f93b 	bl	800179e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001528:	f003 fc44 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_Init+0x68>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	4913      	ldr	r1, [pc, #76]	; (8001588 <HAL_Init+0x6c>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_Init+0x68>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_Init+0x6c>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <HAL_Init+0x70>)
 800155e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_Init+0x74>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001566:	200f      	movs	r0, #15
 8001568:	f7ff fe96 	bl	8001298 <HAL_InitTick>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e002      	b.n	800157c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001576:	f7ff fc0f 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	58024400 	.word	0x58024400
 8001588:	0800de88 	.word	0x0800de88
 800158c:	24008004 	.word	0x24008004
 8001590:	24008000 	.word	0x24008000

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	2400800c 	.word	0x2400800c
 80015b8:	2400c808 	.word	0x2400c808

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	2400c808 	.word	0x2400c808

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d005      	beq.n	80015fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_Delay+0x44>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fa:	bf00      	nop
 80015fc:	f7ff ffde 	bl	80015bc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d8f7      	bhi.n	80015fc <HAL_Delay+0x28>
  {
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2400800c 	.word	0x2400800c

0800161c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800162c:	4904      	ldr	r1, [pc, #16]	; (8001640 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	58000400 	.word	0x58000400

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <__NVIC_SetPriorityGrouping+0x40>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	4313      	orrs	r3, r2
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x40>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	05fa0000 	.word	0x05fa0000

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4907      	ldr	r1, [pc, #28]	; (80016e0 <__NVIC_EnableIRQ+0x38>)
 80016c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff4c 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c2:	f7ff ff63 	bl	800168c <__NVIC_GetPriorityGrouping>
 80017c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	6978      	ldr	r0, [r7, #20]
 80017ce:	f7ff ffb3 	bl	8001738 <NVIC_EncodePriority>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff82 	bl	80016e4 <__NVIC_SetPriority>
}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff56 	bl	80016a8 <__NVIC_EnableIRQ>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff fed6 	bl	80015bc <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e314      	b.n	8001e46 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a66      	ldr	r2, [pc, #408]	; (80019bc <HAL_DMA_Init+0x1b8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d04a      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a65      	ldr	r2, [pc, #404]	; (80019c0 <HAL_DMA_Init+0x1bc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d045      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_DMA_Init+0x1c0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d040      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a62      	ldr	r2, [pc, #392]	; (80019c8 <HAL_DMA_Init+0x1c4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d03b      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a60      	ldr	r2, [pc, #384]	; (80019cc <HAL_DMA_Init+0x1c8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d036      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5f      	ldr	r2, [pc, #380]	; (80019d0 <HAL_DMA_Init+0x1cc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d031      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a5d      	ldr	r2, [pc, #372]	; (80019d4 <HAL_DMA_Init+0x1d0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d02c      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a5c      	ldr	r2, [pc, #368]	; (80019d8 <HAL_DMA_Init+0x1d4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d027      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a5a      	ldr	r2, [pc, #360]	; (80019dc <HAL_DMA_Init+0x1d8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d022      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a59      	ldr	r2, [pc, #356]	; (80019e0 <HAL_DMA_Init+0x1dc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d01d      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_DMA_Init+0x1e0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d018      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_DMA_Init+0x1e4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d013      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a54      	ldr	r2, [pc, #336]	; (80019ec <HAL_DMA_Init+0x1e8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00e      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a53      	ldr	r2, [pc, #332]	; (80019f0 <HAL_DMA_Init+0x1ec>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a51      	ldr	r2, [pc, #324]	; (80019f4 <HAL_DMA_Init+0x1f0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <HAL_DMA_Init+0x1f4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Init+0xbc>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_DMA_Init+0xbe>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 813c 	beq.w	8001b40 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a37      	ldr	r2, [pc, #220]	; (80019bc <HAL_DMA_Init+0x1b8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d04a      	beq.n	8001978 <HAL_DMA_Init+0x174>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <HAL_DMA_Init+0x1bc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d045      	beq.n	8001978 <HAL_DMA_Init+0x174>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a34      	ldr	r2, [pc, #208]	; (80019c4 <HAL_DMA_Init+0x1c0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d040      	beq.n	8001978 <HAL_DMA_Init+0x174>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a33      	ldr	r2, [pc, #204]	; (80019c8 <HAL_DMA_Init+0x1c4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d03b      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a31      	ldr	r2, [pc, #196]	; (80019cc <HAL_DMA_Init+0x1c8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d036      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_DMA_Init+0x1cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d031      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <HAL_DMA_Init+0x1d0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02c      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <HAL_DMA_Init+0x1d4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d027      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <HAL_DMA_Init+0x1d8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d022      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2a      	ldr	r2, [pc, #168]	; (80019e0 <HAL_DMA_Init+0x1dc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d01d      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <HAL_DMA_Init+0x1e0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d018      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_DMA_Init+0x1e4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <HAL_DMA_Init+0x1e8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00e      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a24      	ldr	r2, [pc, #144]	; (80019f0 <HAL_DMA_Init+0x1ec>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <HAL_DMA_Init+0x1f0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_DMA_Init+0x1f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d108      	bne.n	800198a <HAL_DMA_Init+0x186>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e007      	b.n	800199a <HAL_DMA_Init+0x196>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800199a:	e02f      	b.n	80019fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199c:	f7ff fe0e 	bl	80015bc <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d928      	bls.n	80019fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e244      	b.n	8001e46 <HAL_DMA_Init+0x642>
 80019bc:	40020010 	.word	0x40020010
 80019c0:	40020028 	.word	0x40020028
 80019c4:	40020040 	.word	0x40020040
 80019c8:	40020058 	.word	0x40020058
 80019cc:	40020070 	.word	0x40020070
 80019d0:	40020088 	.word	0x40020088
 80019d4:	400200a0 	.word	0x400200a0
 80019d8:	400200b8 	.word	0x400200b8
 80019dc:	40020410 	.word	0x40020410
 80019e0:	40020428 	.word	0x40020428
 80019e4:	40020440 	.word	0x40020440
 80019e8:	40020458 	.word	0x40020458
 80019ec:	40020470 	.word	0x40020470
 80019f0:	40020488 	.word	0x40020488
 80019f4:	400204a0 	.word	0x400204a0
 80019f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1c8      	bne.n	800199c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4b84      	ldr	r3, [pc, #528]	; (8001c28 <HAL_DMA_Init+0x424>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a22:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b28      	cmp	r3, #40	; 0x28
 8001a66:	d903      	bls.n	8001a70 <HAL_DMA_Init+0x26c>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8001a6e:	d91f      	bls.n	8001ab0 <HAL_DMA_Init+0x2ac>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b3e      	cmp	r3, #62	; 0x3e
 8001a76:	d903      	bls.n	8001a80 <HAL_DMA_Init+0x27c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b42      	cmp	r3, #66	; 0x42
 8001a7e:	d917      	bls.n	8001ab0 <HAL_DMA_Init+0x2ac>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b46      	cmp	r3, #70	; 0x46
 8001a86:	d903      	bls.n	8001a90 <HAL_DMA_Init+0x28c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b48      	cmp	r3, #72	; 0x48
 8001a8e:	d90f      	bls.n	8001ab0 <HAL_DMA_Init+0x2ac>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b4e      	cmp	r3, #78	; 0x4e
 8001a96:	d903      	bls.n	8001aa0 <HAL_DMA_Init+0x29c>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b52      	cmp	r3, #82	; 0x52
 8001a9e:	d907      	bls.n	8001ab0 <HAL_DMA_Init+0x2ac>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b73      	cmp	r3, #115	; 0x73
 8001aa6:	d905      	bls.n	8001ab4 <HAL_DMA_Init+0x2b0>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b77      	cmp	r3, #119	; 0x77
 8001aae:	d801      	bhi.n	8001ab4 <HAL_DMA_Init+0x2b0>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_DMA_Init+0x2b2>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ac0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f023 0307 	bic.w	r3, r3, #7
 8001ad8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d117      	bne.n	8001b1c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00e      	beq.n	8001b1c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f001 f9b6 	bl	8002e70 <DMA_CheckFifoParam>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2240      	movs	r2, #64	; 0x40
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e194      	b.n	8001e46 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f001 f8f1 	bl	8002d0c <DMA_CalcBaseAndBitshift>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	223f      	movs	r2, #63	; 0x3f
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	e0ca      	b.n	8001cd6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a39      	ldr	r2, [pc, #228]	; (8001c2c <HAL_DMA_Init+0x428>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d022      	beq.n	8001b90 <HAL_DMA_Init+0x38c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <HAL_DMA_Init+0x42c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d01d      	beq.n	8001b90 <HAL_DMA_Init+0x38c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a36      	ldr	r2, [pc, #216]	; (8001c34 <HAL_DMA_Init+0x430>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d018      	beq.n	8001b90 <HAL_DMA_Init+0x38c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a35      	ldr	r2, [pc, #212]	; (8001c38 <HAL_DMA_Init+0x434>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d013      	beq.n	8001b90 <HAL_DMA_Init+0x38c>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a33      	ldr	r2, [pc, #204]	; (8001c3c <HAL_DMA_Init+0x438>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00e      	beq.n	8001b90 <HAL_DMA_Init+0x38c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a32      	ldr	r2, [pc, #200]	; (8001c40 <HAL_DMA_Init+0x43c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d009      	beq.n	8001b90 <HAL_DMA_Init+0x38c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a30      	ldr	r2, [pc, #192]	; (8001c44 <HAL_DMA_Init+0x440>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d004      	beq.n	8001b90 <HAL_DMA_Init+0x38c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2f      	ldr	r2, [pc, #188]	; (8001c48 <HAL_DMA_Init+0x444>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_DMA_Init+0x390>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_DMA_Init+0x392>
 8001b94:	2300      	movs	r3, #0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8094 	beq.w	8001cc4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <HAL_DMA_Init+0x428>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d021      	beq.n	8001bea <HAL_DMA_Init+0x3e6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <HAL_DMA_Init+0x42c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d01c      	beq.n	8001bea <HAL_DMA_Init+0x3e6>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1f      	ldr	r2, [pc, #124]	; (8001c34 <HAL_DMA_Init+0x430>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d017      	beq.n	8001bea <HAL_DMA_Init+0x3e6>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <HAL_DMA_Init+0x434>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d012      	beq.n	8001bea <HAL_DMA_Init+0x3e6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <HAL_DMA_Init+0x438>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_DMA_Init+0x3e6>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <HAL_DMA_Init+0x43c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d008      	beq.n	8001bea <HAL_DMA_Init+0x3e6>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_DMA_Init+0x440>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d003      	beq.n	8001bea <HAL_DMA_Init+0x3e6>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <HAL_DMA_Init+0x444>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_DMA_Init+0x448>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d01d      	beq.n	8001c50 <HAL_DMA_Init+0x44c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d102      	bne.n	8001c22 <HAL_DMA_Init+0x41e>
 8001c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c20:	e017      	b.n	8001c52 <HAL_DMA_Init+0x44e>
 8001c22:	2300      	movs	r3, #0
 8001c24:	e015      	b.n	8001c52 <HAL_DMA_Init+0x44e>
 8001c26:	bf00      	nop
 8001c28:	fe10803f 	.word	0xfe10803f
 8001c2c:	58025408 	.word	0x58025408
 8001c30:	5802541c 	.word	0x5802541c
 8001c34:	58025430 	.word	0x58025430
 8001c38:	58025444 	.word	0x58025444
 8001c3c:	58025458 	.word	0x58025458
 8001c40:	5802546c 	.word	0x5802546c
 8001c44:	58025480 	.word	0x58025480
 8001c48:	58025494 	.word	0x58025494
 8001c4c:	fffe000f 	.word	0xfffe000f
 8001c50:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68d2      	ldr	r2, [r2, #12]
 8001c56:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c80:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b6e      	ldr	r3, [pc, #440]	; (8001e50 <HAL_DMA_Init+0x64c>)
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <HAL_DMA_Init+0x650>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	009a      	lsls	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f001 f82f 	bl	8002d0c <DMA_CalcBaseAndBitshift>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2201      	movs	r2, #1
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	e008      	b.n	8001cd6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0b7      	b.n	8001e46 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <HAL_DMA_Init+0x654>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d072      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	; (8001e5c <HAL_DMA_Init+0x658>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d06d      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <HAL_DMA_Init+0x65c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d068      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_DMA_Init+0x660>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d063      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a59      	ldr	r2, [pc, #356]	; (8001e68 <HAL_DMA_Init+0x664>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d05e      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_DMA_Init+0x668>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d059      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a56      	ldr	r2, [pc, #344]	; (8001e70 <HAL_DMA_Init+0x66c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d054      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a54      	ldr	r2, [pc, #336]	; (8001e74 <HAL_DMA_Init+0x670>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d04f      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a53      	ldr	r2, [pc, #332]	; (8001e78 <HAL_DMA_Init+0x674>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d04a      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_DMA_Init+0x678>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d045      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a50      	ldr	r2, [pc, #320]	; (8001e80 <HAL_DMA_Init+0x67c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d040      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4e      	ldr	r2, [pc, #312]	; (8001e84 <HAL_DMA_Init+0x680>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d03b      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <HAL_DMA_Init+0x684>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d036      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	; (8001e8c <HAL_DMA_Init+0x688>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d031      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a4a      	ldr	r2, [pc, #296]	; (8001e90 <HAL_DMA_Init+0x68c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d02c      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a48      	ldr	r2, [pc, #288]	; (8001e94 <HAL_DMA_Init+0x690>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d027      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_DMA_Init+0x694>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a45      	ldr	r2, [pc, #276]	; (8001e9c <HAL_DMA_Init+0x698>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01d      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a44      	ldr	r2, [pc, #272]	; (8001ea0 <HAL_DMA_Init+0x69c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d018      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a42      	ldr	r2, [pc, #264]	; (8001ea4 <HAL_DMA_Init+0x6a0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <HAL_DMA_Init+0x6a4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3f      	ldr	r2, [pc, #252]	; (8001eac <HAL_DMA_Init+0x6a8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <HAL_DMA_Init+0x6ac>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_DMA_Init+0x5c2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3c      	ldr	r2, [pc, #240]	; (8001eb4 <HAL_DMA_Init+0x6b0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_DMA_Init+0x5c6>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_DMA_Init+0x5c8>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d032      	beq.n	8001e36 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f001 f8c9 	bl	8002f68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b80      	cmp	r3, #128	; 0x80
 8001ddc:	d102      	bne.n	8001de4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001df8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_DMA_Init+0x620>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d80c      	bhi.n	8001e24 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f001 f946 	bl	800309c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	e008      	b.n	8001e36 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	a7fdabf8 	.word	0xa7fdabf8
 8001e54:	cccccccd 	.word	0xcccccccd
 8001e58:	40020010 	.word	0x40020010
 8001e5c:	40020028 	.word	0x40020028
 8001e60:	40020040 	.word	0x40020040
 8001e64:	40020058 	.word	0x40020058
 8001e68:	40020070 	.word	0x40020070
 8001e6c:	40020088 	.word	0x40020088
 8001e70:	400200a0 	.word	0x400200a0
 8001e74:	400200b8 	.word	0x400200b8
 8001e78:	40020410 	.word	0x40020410
 8001e7c:	40020428 	.word	0x40020428
 8001e80:	40020440 	.word	0x40020440
 8001e84:	40020458 	.word	0x40020458
 8001e88:	40020470 	.word	0x40020470
 8001e8c:	40020488 	.word	0x40020488
 8001e90:	400204a0 	.word	0x400204a0
 8001e94:	400204b8 	.word	0x400204b8
 8001e98:	58025408 	.word	0x58025408
 8001e9c:	5802541c 	.word	0x5802541c
 8001ea0:	58025430 	.word	0x58025430
 8001ea4:	58025444 	.word	0x58025444
 8001ea8:	58025458 	.word	0x58025458
 8001eac:	5802546c 	.word	0x5802546c
 8001eb0:	58025480 	.word	0x58025480
 8001eb4:	58025494 	.word	0x58025494

08001eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec4:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_DMA_IRQHandler+0x1ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_DMA_IRQHandler+0x1b0>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5f      	ldr	r2, [pc, #380]	; (800206c <HAL_DMA_IRQHandler+0x1b4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d04a      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_DMA_IRQHandler+0x1b8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d045      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <HAL_DMA_IRQHandler+0x1bc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d040      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5a      	ldr	r2, [pc, #360]	; (8002078 <HAL_DMA_IRQHandler+0x1c0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d03b      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a59      	ldr	r2, [pc, #356]	; (800207c <HAL_DMA_IRQHandler+0x1c4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d036      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a57      	ldr	r2, [pc, #348]	; (8002080 <HAL_DMA_IRQHandler+0x1c8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_DMA_IRQHandler+0x1cc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d02c      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a54      	ldr	r2, [pc, #336]	; (8002088 <HAL_DMA_IRQHandler+0x1d0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d027      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a53      	ldr	r2, [pc, #332]	; (800208c <HAL_DMA_IRQHandler+0x1d4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_DMA_IRQHandler+0x1d8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_DMA_IRQHandler+0x1dc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d018      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a4e      	ldr	r2, [pc, #312]	; (8002098 <HAL_DMA_IRQHandler+0x1e0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_DMA_IRQHandler+0x1e4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00e      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <HAL_DMA_IRQHandler+0x1e8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a4a      	ldr	r2, [pc, #296]	; (80020a4 <HAL_DMA_IRQHandler+0x1ec>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_IRQHandler+0xd2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_IRQHandler+0xd6>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_DMA_IRQHandler+0xd8>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 842b 	beq.w	80027ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80a2 	beq.w	80020f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	; (800206c <HAL_DMA_IRQHandler+0x1b4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d04a      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2d      	ldr	r2, [pc, #180]	; (8002070 <HAL_DMA_IRQHandler+0x1b8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d045      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <HAL_DMA_IRQHandler+0x1bc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_DMA_IRQHandler+0x1c0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d03b      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_DMA_IRQHandler+0x1c4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d036      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_DMA_IRQHandler+0x1c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a25      	ldr	r2, [pc, #148]	; (8002084 <HAL_DMA_IRQHandler+0x1cc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02c      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <HAL_DMA_IRQHandler+0x1d0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d027      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_DMA_IRQHandler+0x1d4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d022      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_DMA_IRQHandler+0x1d8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d01d      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_DMA_IRQHandler+0x1dc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d018      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_DMA_IRQHandler+0x1e0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_DMA_IRQHandler+0x1e4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00e      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_DMA_IRQHandler+0x1e8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_DMA_IRQHandler+0x1ec>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d004      	beq.n	800204c <HAL_DMA_IRQHandler+0x194>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_DMA_IRQHandler+0x1f0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d12f      	bne.n	80020ac <HAL_DMA_IRQHandler+0x1f4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e02e      	b.n	80020c0 <HAL_DMA_IRQHandler+0x208>
 8002062:	bf00      	nop
 8002064:	24008000 	.word	0x24008000
 8002068:	1b4e81b5 	.word	0x1b4e81b5
 800206c:	40020010 	.word	0x40020010
 8002070:	40020028 	.word	0x40020028
 8002074:	40020040 	.word	0x40020040
 8002078:	40020058 	.word	0x40020058
 800207c:	40020070 	.word	0x40020070
 8002080:	40020088 	.word	0x40020088
 8002084:	400200a0 	.word	0x400200a0
 8002088:	400200b8 	.word	0x400200b8
 800208c:	40020410 	.word	0x40020410
 8002090:	40020428 	.word	0x40020428
 8002094:	40020440 	.word	0x40020440
 8002098:	40020458 	.word	0x40020458
 800209c:	40020470 	.word	0x40020470
 80020a0:	40020488 	.word	0x40020488
 80020a4:	400204a0 	.word	0x400204a0
 80020a8:	400204b8 	.word	0x400204b8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2208      	movs	r2, #8
 80020de:	409a      	lsls	r2, r3
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06e      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a69      	ldr	r2, [pc, #420]	; (80022b0 <HAL_DMA_IRQHandler+0x3f8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04a      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a67      	ldr	r2, [pc, #412]	; (80022b4 <HAL_DMA_IRQHandler+0x3fc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d045      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_DMA_IRQHandler+0x400>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d040      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a64      	ldr	r2, [pc, #400]	; (80022bc <HAL_DMA_IRQHandler+0x404>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d03b      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_DMA_IRQHandler+0x408>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d036      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_DMA_IRQHandler+0x40c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d031      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <HAL_DMA_IRQHandler+0x410>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d02c      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_DMA_IRQHandler+0x414>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d027      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <HAL_DMA_IRQHandler+0x418>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <HAL_DMA_IRQHandler+0x41c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01d      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_DMA_IRQHandler+0x420>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_DMA_IRQHandler+0x424>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_DMA_IRQHandler+0x428>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_DMA_IRQHandler+0x42c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d009      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_DMA_IRQHandler+0x430>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d004      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2ee>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a52      	ldr	r2, [pc, #328]	; (80022ec <HAL_DMA_IRQHandler+0x434>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10a      	bne.n	80021bc <HAL_DMA_IRQHandler+0x304>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e003      	b.n	80021c4 <HAL_DMA_IRQHandler+0x30c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2201      	movs	r2, #1
 80021d2:	409a      	lsls	r2, r3
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0202 	orr.w	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2204      	movs	r2, #4
 80021ee:	409a      	lsls	r2, r3
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 808f 	beq.w	8002318 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <HAL_DMA_IRQHandler+0x3f8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <HAL_DMA_IRQHandler+0x3fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <HAL_DMA_IRQHandler+0x400>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_DMA_IRQHandler+0x404>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <HAL_DMA_IRQHandler+0x408>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_DMA_IRQHandler+0x40c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <HAL_DMA_IRQHandler+0x410>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_DMA_IRQHandler+0x414>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_DMA_IRQHandler+0x418>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_DMA_IRQHandler+0x41c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_DMA_IRQHandler+0x420>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_DMA_IRQHandler+0x424>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_DMA_IRQHandler+0x428>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_DMA_IRQHandler+0x42c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_DMA_IRQHandler+0x430>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_IRQHandler+0x3e2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_DMA_IRQHandler+0x434>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12a      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x438>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e023      	b.n	80022f8 <HAL_DMA_IRQHandler+0x440>
 80022b0:	40020010 	.word	0x40020010
 80022b4:	40020028 	.word	0x40020028
 80022b8:	40020040 	.word	0x40020040
 80022bc:	40020058 	.word	0x40020058
 80022c0:	40020070 	.word	0x40020070
 80022c4:	40020088 	.word	0x40020088
 80022c8:	400200a0 	.word	0x400200a0
 80022cc:	400200b8 	.word	0x400200b8
 80022d0:	40020410 	.word	0x40020410
 80022d4:	40020428 	.word	0x40020428
 80022d8:	40020440 	.word	0x40020440
 80022dc:	40020458 	.word	0x40020458
 80022e0:	40020470 	.word	0x40020470
 80022e4:	40020488 	.word	0x40020488
 80022e8:	400204a0 	.word	0x400204a0
 80022ec:	400204b8 	.word	0x400204b8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2204      	movs	r2, #4
 8002306:	409a      	lsls	r2, r3
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f043 0204 	orr.w	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	2210      	movs	r2, #16
 8002322:	409a      	lsls	r2, r3
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a6 	beq.w	800247a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a85      	ldr	r2, [pc, #532]	; (8002548 <HAL_DMA_IRQHandler+0x690>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04a      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a83      	ldr	r2, [pc, #524]	; (800254c <HAL_DMA_IRQHandler+0x694>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d045      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a82      	ldr	r2, [pc, #520]	; (8002550 <HAL_DMA_IRQHandler+0x698>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d040      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a80      	ldr	r2, [pc, #512]	; (8002554 <HAL_DMA_IRQHandler+0x69c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d03b      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7f      	ldr	r2, [pc, #508]	; (8002558 <HAL_DMA_IRQHandler+0x6a0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7d      	ldr	r2, [pc, #500]	; (800255c <HAL_DMA_IRQHandler+0x6a4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d031      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7c      	ldr	r2, [pc, #496]	; (8002560 <HAL_DMA_IRQHandler+0x6a8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d02c      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_DMA_IRQHandler+0x6ac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d027      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a79      	ldr	r2, [pc, #484]	; (8002568 <HAL_DMA_IRQHandler+0x6b0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_DMA_IRQHandler+0x6b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01d      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_DMA_IRQHandler+0x6b8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d018      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a74      	ldr	r2, [pc, #464]	; (8002574 <HAL_DMA_IRQHandler+0x6bc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a73      	ldr	r2, [pc, #460]	; (8002578 <HAL_DMA_IRQHandler+0x6c0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_DMA_IRQHandler+0x6c4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a70      	ldr	r2, [pc, #448]	; (8002580 <HAL_DMA_IRQHandler+0x6c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <HAL_DMA_IRQHandler+0x516>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_DMA_IRQHandler+0x6cc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10a      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x52c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e009      	b.n	80023f8 <HAL_DMA_IRQHandler+0x540>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03e      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2210      	movs	r2, #16
 8002406:	409a      	lsls	r2, r3
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d024      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e01f      	b.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01b      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e016      	b.n	800247a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0208 	bic.w	r2, r2, #8
 8002468:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2220      	movs	r2, #32
 8002484:	409a      	lsls	r2, r3
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8110 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <HAL_DMA_IRQHandler+0x690>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04a      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_DMA_IRQHandler+0x694>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d045      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_DMA_IRQHandler+0x698>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d040      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <HAL_DMA_IRQHandler+0x69c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d03b      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <HAL_DMA_IRQHandler+0x6a0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d036      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <HAL_DMA_IRQHandler+0x6a4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d031      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	; (8002560 <HAL_DMA_IRQHandler+0x6a8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02c      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_DMA_IRQHandler+0x6ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d027      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_DMA_IRQHandler+0x6b0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_DMA_IRQHandler+0x6b4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d01d      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_DMA_IRQHandler+0x6b8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_DMA_IRQHandler+0x6bc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_DMA_IRQHandler+0x6c0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_DMA_IRQHandler+0x6c4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_DMA_IRQHandler+0x6c8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_DMA_IRQHandler+0x678>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_DMA_IRQHandler+0x6cc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d12b      	bne.n	8002588 <HAL_DMA_IRQHandler+0x6d0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	e02a      	b.n	800259c <HAL_DMA_IRQHandler+0x6e4>
 8002546:	bf00      	nop
 8002548:	40020010 	.word	0x40020010
 800254c:	40020028 	.word	0x40020028
 8002550:	40020040 	.word	0x40020040
 8002554:	40020058 	.word	0x40020058
 8002558:	40020070 	.word	0x40020070
 800255c:	40020088 	.word	0x40020088
 8002560:	400200a0 	.word	0x400200a0
 8002564:	400200b8 	.word	0x400200b8
 8002568:	40020410 	.word	0x40020410
 800256c:	40020428 	.word	0x40020428
 8002570:	40020440 	.word	0x40020440
 8002574:	40020458 	.word	0x40020458
 8002578:	40020470 	.word	0x40020470
 800257c:	40020488 	.word	0x40020488
 8002580:	400204a0 	.word	0x400204a0
 8002584:	400204b8 	.word	0x400204b8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8087 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2220      	movs	r2, #32
 80025ac:	409a      	lsls	r2, r3
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d139      	bne.n	8002632 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0216 	bic.w	r2, r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_DMA_IRQHandler+0x736>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	223f      	movs	r2, #63	; 0x3f
 8002608:	409a      	lsls	r2, r3
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 834a 	beq.w	8002cbc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
          }
          return;
 8002630:	e344      	b.n	8002cbc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d018      	beq.n	8002672 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02c      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e027      	b.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e01e      	b.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10f      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0210 	bic.w	r2, r2, #16
 800268e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8306 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8088 	beq.w	80027d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7a      	ldr	r2, [pc, #488]	; (80028c0 <HAL_DMA_IRQHandler+0xa08>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a79      	ldr	r2, [pc, #484]	; (80028c4 <HAL_DMA_IRQHandler+0xa0c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d045      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a77      	ldr	r2, [pc, #476]	; (80028c8 <HAL_DMA_IRQHandler+0xa10>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d040      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a76      	ldr	r2, [pc, #472]	; (80028cc <HAL_DMA_IRQHandler+0xa14>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03b      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a74      	ldr	r2, [pc, #464]	; (80028d0 <HAL_DMA_IRQHandler+0xa18>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d036      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a73      	ldr	r2, [pc, #460]	; (80028d4 <HAL_DMA_IRQHandler+0xa1c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d031      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a71      	ldr	r2, [pc, #452]	; (80028d8 <HAL_DMA_IRQHandler+0xa20>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_DMA_IRQHandler+0xa24>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d027      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6e      	ldr	r2, [pc, #440]	; (80028e0 <HAL_DMA_IRQHandler+0xa28>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d022      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6d      	ldr	r2, [pc, #436]	; (80028e4 <HAL_DMA_IRQHandler+0xa2c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d01d      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_DMA_IRQHandler+0xa30>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6a      	ldr	r2, [pc, #424]	; (80028ec <HAL_DMA_IRQHandler+0xa34>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_DMA_IRQHandler+0xa38>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a67      	ldr	r2, [pc, #412]	; (80028f4 <HAL_DMA_IRQHandler+0xa3c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <HAL_DMA_IRQHandler+0xa40>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_DMA_IRQHandler+0x8b8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a64      	ldr	r2, [pc, #400]	; (80028fc <HAL_DMA_IRQHandler+0xa44>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <HAL_DMA_IRQHandler+0x8ca>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e007      	b.n	8002792 <HAL_DMA_IRQHandler+0x8da>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	429a      	cmp	r2, r3
 800279c:	d307      	bcc.n	80027ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f2      	bne.n	8002792 <HAL_DMA_IRQHandler+0x8da>
 80027ac:	e000      	b.n	80027b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027c6:	e003      	b.n	80027d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8272 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
 80027ea:	e26c      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_DMA_IRQHandler+0xa48>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d022      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a42      	ldr	r2, [pc, #264]	; (8002904 <HAL_DMA_IRQHandler+0xa4c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d01d      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a40      	ldr	r2, [pc, #256]	; (8002908 <HAL_DMA_IRQHandler+0xa50>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d018      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3f      	ldr	r2, [pc, #252]	; (800290c <HAL_DMA_IRQHandler+0xa54>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3d      	ldr	r2, [pc, #244]	; (8002910 <HAL_DMA_IRQHandler+0xa58>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00e      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a3c      	ldr	r2, [pc, #240]	; (8002914 <HAL_DMA_IRQHandler+0xa5c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <HAL_DMA_IRQHandler+0xa60>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_DMA_IRQHandler+0x984>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_DMA_IRQHandler+0xa64>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_DMA_IRQHandler+0x988>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_DMA_IRQHandler+0x98a>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 823f 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2204      	movs	r2, #4
 800285a:	409a      	lsls	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80cd 	beq.w	8002a00 <HAL_DMA_IRQHandler+0xb48>
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80c7 	beq.w	8002a00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2204      	movs	r2, #4
 800287c:	409a      	lsls	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d049      	beq.n	8002920 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8210 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028a8:	e20a      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8206 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028bc:	e200      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
 80028be:	bf00      	nop
 80028c0:	40020010 	.word	0x40020010
 80028c4:	40020028 	.word	0x40020028
 80028c8:	40020040 	.word	0x40020040
 80028cc:	40020058 	.word	0x40020058
 80028d0:	40020070 	.word	0x40020070
 80028d4:	40020088 	.word	0x40020088
 80028d8:	400200a0 	.word	0x400200a0
 80028dc:	400200b8 	.word	0x400200b8
 80028e0:	40020410 	.word	0x40020410
 80028e4:	40020428 	.word	0x40020428
 80028e8:	40020440 	.word	0x40020440
 80028ec:	40020458 	.word	0x40020458
 80028f0:	40020470 	.word	0x40020470
 80028f4:	40020488 	.word	0x40020488
 80028f8:	400204a0 	.word	0x400204a0
 80028fc:	400204b8 	.word	0x400204b8
 8002900:	58025408 	.word	0x58025408
 8002904:	5802541c 	.word	0x5802541c
 8002908:	58025430 	.word	0x58025430
 800290c:	58025444 	.word	0x58025444
 8002910:	58025458 	.word	0x58025458
 8002914:	5802546c 	.word	0x5802546c
 8002918:	58025480 	.word	0x58025480
 800291c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d160      	bne.n	80029ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a8c      	ldr	r2, [pc, #560]	; (8002b60 <HAL_DMA_IRQHandler+0xca8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d04a      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a8a      	ldr	r2, [pc, #552]	; (8002b64 <HAL_DMA_IRQHandler+0xcac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d045      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a89      	ldr	r2, [pc, #548]	; (8002b68 <HAL_DMA_IRQHandler+0xcb0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d040      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a87      	ldr	r2, [pc, #540]	; (8002b6c <HAL_DMA_IRQHandler+0xcb4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d03b      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a86      	ldr	r2, [pc, #536]	; (8002b70 <HAL_DMA_IRQHandler+0xcb8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d036      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a84      	ldr	r2, [pc, #528]	; (8002b74 <HAL_DMA_IRQHandler+0xcbc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d031      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a83      	ldr	r2, [pc, #524]	; (8002b78 <HAL_DMA_IRQHandler+0xcc0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d02c      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <HAL_DMA_IRQHandler+0xcc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d027      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a80      	ldr	r2, [pc, #512]	; (8002b80 <HAL_DMA_IRQHandler+0xcc8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_DMA_IRQHandler+0xccc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7d      	ldr	r2, [pc, #500]	; (8002b88 <HAL_DMA_IRQHandler+0xcd0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d018      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7b      	ldr	r2, [pc, #492]	; (8002b8c <HAL_DMA_IRQHandler+0xcd4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_DMA_IRQHandler+0xcd8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_DMA_IRQHandler+0xcdc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_DMA_IRQHandler+0xce0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_DMA_IRQHandler+0xb12>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <HAL_DMA_IRQHandler+0xce4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d108      	bne.n	80029dc <HAL_DMA_IRQHandler+0xb24>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0208 	bic.w	r2, r2, #8
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_DMA_IRQHandler+0xb34>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8165 	beq.w	8002cc0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029fe:	e15f      	b.n	8002cc0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2202      	movs	r2, #2
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80c5 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0xce8>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80bf 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 813a 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a58:	e134      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8130 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a6c:	e12a      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d168      	bne.n	8002b4a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <HAL_DMA_IRQHandler+0xca8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a37      	ldr	r2, [pc, #220]	; (8002b64 <HAL_DMA_IRQHandler+0xcac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <HAL_DMA_IRQHandler+0xcb0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_DMA_IRQHandler+0xcb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_DMA_IRQHandler+0xcb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_DMA_IRQHandler+0xcbc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <HAL_DMA_IRQHandler+0xcc0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <HAL_DMA_IRQHandler+0xcc4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <HAL_DMA_IRQHandler+0xcc8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <HAL_DMA_IRQHandler+0xccc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_DMA_IRQHandler+0xcd0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <HAL_DMA_IRQHandler+0xcd4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_DMA_IRQHandler+0xcd8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <HAL_DMA_IRQHandler+0xcdc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_DMA_IRQHandler+0xce0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_IRQHandler+0xc60>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_DMA_IRQHandler+0xce4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <HAL_DMA_IRQHandler+0xc72>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0214 	bic.w	r2, r2, #20
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <HAL_DMA_IRQHandler+0xc82>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020a 	bic.w	r2, r2, #10
 8002b38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80b8 	beq.w	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b5c:	e0b2      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xe0c>
 8002b5e:	bf00      	nop
 8002b60:	40020010 	.word	0x40020010
 8002b64:	40020028 	.word	0x40020028
 8002b68:	40020040 	.word	0x40020040
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	40020070 	.word	0x40020070
 8002b74:	40020088 	.word	0x40020088
 8002b78:	400200a0 	.word	0x400200a0
 8002b7c:	400200b8 	.word	0x400200b8
 8002b80:	40020410 	.word	0x40020410
 8002b84:	40020428 	.word	0x40020428
 8002b88:	40020440 	.word	0x40020440
 8002b8c:	40020458 	.word	0x40020458
 8002b90:	40020470 	.word	0x40020470
 8002b94:	40020488 	.word	0x40020488
 8002b98:	400204a0 	.word	0x400204a0
 8002b9c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2208      	movs	r2, #8
 8002baa:	409a      	lsls	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8088 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8082 	beq.w	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a41      	ldr	r2, [pc, #260]	; (8002ccc <HAL_DMA_IRQHandler+0xe14>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04a      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_DMA_IRQHandler+0xe18>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d045      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3e      	ldr	r2, [pc, #248]	; (8002cd4 <HAL_DMA_IRQHandler+0xe1c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d040      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3c      	ldr	r2, [pc, #240]	; (8002cd8 <HAL_DMA_IRQHandler+0xe20>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d03b      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <HAL_DMA_IRQHandler+0xe24>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d036      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_DMA_IRQHandler+0xe28>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d031      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_DMA_IRQHandler+0xe2c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02c      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a36      	ldr	r2, [pc, #216]	; (8002ce8 <HAL_DMA_IRQHandler+0xe30>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a35      	ldr	r2, [pc, #212]	; (8002cec <HAL_DMA_IRQHandler+0xe34>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_DMA_IRQHandler+0xe38>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <HAL_DMA_IRQHandler+0xe3c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <HAL_DMA_IRQHandler+0xe40>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <HAL_DMA_IRQHandler+0xe44>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_DMA_IRQHandler+0xe48>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <HAL_DMA_IRQHandler+0xe4c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xdaa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <HAL_DMA_IRQHandler+0xe50>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <HAL_DMA_IRQHandler+0xdbc>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 021c 	bic.w	r2, r2, #28
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e007      	b.n	8002c84 <HAL_DMA_IRQHandler+0xdcc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 020e 	bic.w	r2, r2, #14
 8002c82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
 8002cba:	e004      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002cbc:	bf00      	nop
 8002cbe:	e002      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cc6:	3728      	adds	r7, #40	; 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40020010 	.word	0x40020010
 8002cd0:	40020028 	.word	0x40020028
 8002cd4:	40020040 	.word	0x40020040
 8002cd8:	40020058 	.word	0x40020058
 8002cdc:	40020070 	.word	0x40020070
 8002ce0:	40020088 	.word	0x40020088
 8002ce4:	400200a0 	.word	0x400200a0
 8002ce8:	400200b8 	.word	0x400200b8
 8002cec:	40020410 	.word	0x40020410
 8002cf0:	40020428 	.word	0x40020428
 8002cf4:	40020440 	.word	0x40020440
 8002cf8:	40020458 	.word	0x40020458
 8002cfc:	40020470 	.word	0x40020470
 8002d00:	40020488 	.word	0x40020488
 8002d04:	400204a0 	.word	0x400204a0
 8002d08:	400204b8 	.word	0x400204b8

08002d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <DMA_CalcBaseAndBitshift+0x118>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d04a      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d045      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <DMA_CalcBaseAndBitshift+0x120>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d040      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <DMA_CalcBaseAndBitshift+0x124>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d03b      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <DMA_CalcBaseAndBitshift+0x128>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d036      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d031      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a39      	ldr	r2, [pc, #228]	; (8002e3c <DMA_CalcBaseAndBitshift+0x130>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d02c      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <DMA_CalcBaseAndBitshift+0x134>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d027      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a36      	ldr	r2, [pc, #216]	; (8002e44 <DMA_CalcBaseAndBitshift+0x138>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d022      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a35      	ldr	r2, [pc, #212]	; (8002e48 <DMA_CalcBaseAndBitshift+0x13c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d01d      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <DMA_CalcBaseAndBitshift+0x140>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a32      	ldr	r2, [pc, #200]	; (8002e50 <DMA_CalcBaseAndBitshift+0x144>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a30      	ldr	r2, [pc, #192]	; (8002e54 <DMA_CalcBaseAndBitshift+0x148>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2f      	ldr	r2, [pc, #188]	; (8002e58 <DMA_CalcBaseAndBitshift+0x14c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2d      	ldr	r2, [pc, #180]	; (8002e5c <DMA_CalcBaseAndBitshift+0x150>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xa8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <DMA_CalcBaseAndBitshift+0x154>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d101      	bne.n	8002db8 <DMA_CalcBaseAndBitshift+0xac>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <DMA_CalcBaseAndBitshift+0xae>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d024      	beq.n	8002e08 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3b10      	subs	r3, #16
 8002dc6:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <DMA_CalcBaseAndBitshift+0x158>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <DMA_CalcBaseAndBitshift+0x15c>)
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d908      	bls.n	8002df8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <DMA_CalcBaseAndBitshift+0x160>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	1d1a      	adds	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	659a      	str	r2, [r3, #88]	; 0x58
 8002df6:	e00d      	b.n	8002e14 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <DMA_CalcBaseAndBitshift+0x160>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6593      	str	r3, [r2, #88]	; 0x58
 8002e06:	e005      	b.n	8002e14 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40020010 	.word	0x40020010
 8002e28:	40020028 	.word	0x40020028
 8002e2c:	40020040 	.word	0x40020040
 8002e30:	40020058 	.word	0x40020058
 8002e34:	40020070 	.word	0x40020070
 8002e38:	40020088 	.word	0x40020088
 8002e3c:	400200a0 	.word	0x400200a0
 8002e40:	400200b8 	.word	0x400200b8
 8002e44:	40020410 	.word	0x40020410
 8002e48:	40020428 	.word	0x40020428
 8002e4c:	40020440 	.word	0x40020440
 8002e50:	40020458 	.word	0x40020458
 8002e54:	40020470 	.word	0x40020470
 8002e58:	40020488 	.word	0x40020488
 8002e5c:	400204a0 	.word	0x400204a0
 8002e60:	400204b8 	.word	0x400204b8
 8002e64:	aaaaaaab 	.word	0xaaaaaaab
 8002e68:	0800de98 	.word	0x0800de98
 8002e6c:	fffffc00 	.word	0xfffffc00

08002e70 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d120      	bne.n	8002ec6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d858      	bhi.n	8002f3e <DMA_CheckFifoParam+0xce>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <DMA_CheckFifoParam+0x24>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb7 	.word	0x08002eb7
 8002e9c:	08002ea5 	.word	0x08002ea5
 8002ea0:	08002f3f 	.word	0x08002f3f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d048      	beq.n	8002f42 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002eb4:	e045      	b.n	8002f42 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ebe:	d142      	bne.n	8002f46 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ec4:	e03f      	b.n	8002f46 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ece:	d123      	bne.n	8002f18 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d838      	bhi.n	8002f4a <DMA_CheckFifoParam+0xda>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <DMA_CheckFifoParam+0x70>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002ef7 	.word	0x08002ef7
 8002ee8:	08002ef1 	.word	0x08002ef1
 8002eec:	08002f09 	.word	0x08002f09
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef4:	e030      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d025      	beq.n	8002f4e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f06:	e022      	b.n	8002f4e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f10:	d11f      	bne.n	8002f52 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f16:	e01c      	b.n	8002f52 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d902      	bls.n	8002f26 <DMA_CheckFifoParam+0xb6>
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d003      	beq.n	8002f2c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f24:	e018      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
        break;
 8002f2a:	e015      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00e      	beq.n	8002f56 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8002f3c:	e00b      	b.n	8002f56 <DMA_CheckFifoParam+0xe6>
        break;
 8002f3e:	bf00      	nop
 8002f40:	e00a      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
        break;
 8002f42:	bf00      	nop
 8002f44:	e008      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
        break;
 8002f46:	bf00      	nop
 8002f48:	e006      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
        break;
 8002f4a:	bf00      	nop
 8002f4c:	e004      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e002      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
        break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
    break;
 8002f56:	bf00      	nop
    }
  }

  return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a38      	ldr	r2, [pc, #224]	; (800305c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d022      	beq.n	8002fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a36      	ldr	r2, [pc, #216]	; (8003060 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01d      	beq.n	8002fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a35      	ldr	r2, [pc, #212]	; (8003064 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d018      	beq.n	8002fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a33      	ldr	r2, [pc, #204]	; (8003068 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a32      	ldr	r2, [pc, #200]	; (800306c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00e      	beq.n	8002fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a30      	ldr	r2, [pc, #192]	; (8003070 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01a      	beq.n	8003006 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3b08      	subs	r3, #8
 8002fd8:	4a28      	ldr	r2, [pc, #160]	; (800307c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	461a      	mov	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a24      	ldr	r2, [pc, #144]	; (8003084 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002ff4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	409a      	lsls	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003004:	e024      	b.n	8003050 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3b10      	subs	r3, #16
 800300e:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d806      	bhi.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d902      	bls.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3308      	adds	r3, #8
 800302c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4b18      	ldr	r3, [pc, #96]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	461a      	mov	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a16      	ldr	r2, [pc, #88]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003040:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2201      	movs	r2, #1
 800304a:	409a      	lsls	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	58025408 	.word	0x58025408
 8003060:	5802541c 	.word	0x5802541c
 8003064:	58025430 	.word	0x58025430
 8003068:	58025444 	.word	0x58025444
 800306c:	58025458 	.word	0x58025458
 8003070:	5802546c 	.word	0x5802546c
 8003074:	58025480 	.word	0x58025480
 8003078:	58025494 	.word	0x58025494
 800307c:	cccccccd 	.word	0xcccccccd
 8003080:	16009600 	.word	0x16009600
 8003084:	58025880 	.word	0x58025880
 8003088:	aaaaaaab 	.word	0xaaaaaaab
 800308c:	400204b8 	.word	0x400204b8
 8003090:	4002040f 	.word	0x4002040f
 8003094:	10008200 	.word	0x10008200
 8003098:	40020880 	.word	0x40020880

0800309c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d04a      	beq.n	8003148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d847      	bhi.n	8003148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d022      	beq.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a24      	ldr	r2, [pc, #144]	; (8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d01d      	beq.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d018      	beq.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a21      	ldr	r2, [pc, #132]	; (8003160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d013      	beq.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00e      	beq.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d009      	beq.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	461a      	mov	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003124:	671a      	str	r2, [r3, #112]	; 0x70
 8003126:	e009      	b.n	800313c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800313a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3b01      	subs	r3, #1
 8003140:	2201      	movs	r2, #1
 8003142:	409a      	lsls	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	58025408 	.word	0x58025408
 8003158:	5802541c 	.word	0x5802541c
 800315c:	58025430 	.word	0x58025430
 8003160:	58025444 	.word	0x58025444
 8003164:	58025458 	.word	0x58025458
 8003168:	5802546c 	.word	0x5802546c
 800316c:	58025480 	.word	0x58025480
 8003170:	58025494 	.word	0x58025494
 8003174:	1600963f 	.word	0x1600963f
 8003178:	58025940 	.word	0x58025940
 800317c:	1000823f 	.word	0x1000823f
 8003180:	40020940 	.word	0x40020940

08003184 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0c6      	b.n	8003324 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fe18 	bl	8000dd4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2223      	movs	r2, #35	; 0x23
 80031a8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031aa:	4b60      	ldr	r3, [pc, #384]	; (800332c <HAL_ETH_Init+0x1a8>)
 80031ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031b0:	4a5e      	ldr	r2, [pc, #376]	; (800332c <HAL_ETH_Init+0x1a8>)
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031ba:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_ETH_Init+0x1a8>)
 80031bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7a1b      	ldrb	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fe fa23 	bl	800161c <HAL_SYSCFG_ETHInterfaceSelect>
 80031d6:	e003      	b.n	80031e0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80031d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80031dc:	f7fe fa1e 	bl	800161c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f8:	f7fe f9e0 	bl	80015bc <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80031fe:	e00f      	b.n	8003220 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003200:	f7fe f9dc 	bl	80015bc <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800320e:	d907      	bls.n	8003220 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2204      	movs	r2, #4
 8003214:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	22e0      	movs	r2, #224	; 0xe0
 800321a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e081      	b.n	8003324 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e6      	bne.n	8003200 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fac0 	bl	80037b8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003238:	f001 ff36 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 800323c:	4603      	mov	r3, r0
 800323e:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <HAL_ETH_Init+0x1ac>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9a      	lsrs	r2, r3, #18
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3a01      	subs	r2, #1
 800324c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa13 	bl	800367c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800326c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003270:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	22e0      	movs	r2, #224	; 0xe0
 8003288:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e04a      	b.n	8003324 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	f241 1308 	movw	r3, #4360	; 0x1108
 8003296:	4413      	add	r3, r2
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_ETH_Init+0x1b0>)
 800329c:	4013      	ands	r3, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6952      	ldr	r2, [r2, #20]
 80032a2:	0052      	lsls	r2, r2, #1
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	6809      	ldr	r1, [r1, #0]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80032ae:	440b      	add	r3, r1
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fad8 	bl	8003868 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb1c 	bl	80038f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	3305      	adds	r3, #5
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	3303      	adds	r3, #3
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	061a      	lsls	r2, r3, #24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	3302      	adds	r3, #2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	3301      	adds	r3, #1
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80032fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800330a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800330c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2210      	movs	r2, #16
 800331a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2210      	movs	r2, #16
 8003320:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58024400 	.word	0x58024400
 8003330:	431bde83 	.word	0x431bde83
 8003334:	ffff8001 	.word	0xffff8001

08003338 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800334a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	791b      	ldrb	r3, [r3, #4]
 8003350:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003352:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	7b1b      	ldrb	r3, [r3, #12]
 8003358:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800335a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	7b5b      	ldrb	r3, [r3, #13]
 8003360:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003362:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	7b9b      	ldrb	r3, [r3, #14]
 8003368:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800336a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	7bdb      	ldrb	r3, [r3, #15]
 8003370:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003372:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	7c12      	ldrb	r2, [r2, #16]
 8003378:	2a00      	cmp	r2, #0
 800337a:	d102      	bne.n	8003382 <ETH_SetMACConfig+0x4a>
 800337c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003380:	e000      	b.n	8003384 <ETH_SetMACConfig+0x4c>
 8003382:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003384:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	7c52      	ldrb	r2, [r2, #17]
 800338a:	2a00      	cmp	r2, #0
 800338c:	d102      	bne.n	8003394 <ETH_SetMACConfig+0x5c>
 800338e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003392:	e000      	b.n	8003396 <ETH_SetMACConfig+0x5e>
 8003394:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003396:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	7c9b      	ldrb	r3, [r3, #18]
 800339c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800339e:	431a      	orrs	r2, r3
                                macconf->Speed |
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80033a4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80033aa:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	7f1b      	ldrb	r3, [r3, #28]
 80033b0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80033b2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	7f5b      	ldrb	r3, [r3, #29]
 80033b8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80033ba:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	7f92      	ldrb	r2, [r2, #30]
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d102      	bne.n	80033ca <ETH_SetMACConfig+0x92>
 80033c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c8:	e000      	b.n	80033cc <ETH_SetMACConfig+0x94>
 80033ca:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80033cc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	7fdb      	ldrb	r3, [r3, #31]
 80033d2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80033d4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80033dc:	2a00      	cmp	r2, #0
 80033de:	d102      	bne.n	80033e6 <ETH_SetMACConfig+0xae>
 80033e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e4:	e000      	b.n	80033e8 <ETH_SetMACConfig+0xb0>
 80033e6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80033e8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80033ee:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033f6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80033f8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b56      	ldr	r3, [pc, #344]	; (8003564 <ETH_SetMACConfig+0x22c>)
 800340a:	4013      	ands	r3, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	68f9      	ldr	r1, [r7, #12]
 8003412:	430b      	orrs	r3, r1
 8003414:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003422:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003424:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800342c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800342e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003436:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003438:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003440:	2a00      	cmp	r2, #0
 8003442:	d102      	bne.n	800344a <ETH_SetMACConfig+0x112>
 8003444:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003448:	e000      	b.n	800344c <ETH_SetMACConfig+0x114>
 800344a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800344c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4b42      	ldr	r3, [pc, #264]	; (8003568 <ETH_SetMACConfig+0x230>)
 800345e:	4013      	ands	r3, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	68f9      	ldr	r1, [r7, #12]
 8003466:	430b      	orrs	r3, r1
 8003468:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003470:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b3a      	ldr	r3, [pc, #232]	; (800356c <ETH_SetMACConfig+0x234>)
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	430b      	orrs	r3, r1
 800348c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003494:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800349a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80034a2:	2a00      	cmp	r2, #0
 80034a4:	d101      	bne.n	80034aa <ETH_SetMACConfig+0x172>
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	e000      	b.n	80034ac <ETH_SetMACConfig+0x174>
 80034aa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80034ac:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034be:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	68f9      	ldr	r1, [r7, #12]
 80034ca:	430b      	orrs	r3, r1
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80034d4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80034dc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f023 0103 	bic.w	r1, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003502:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800351e:	2a00      	cmp	r2, #0
 8003520:	d101      	bne.n	8003526 <ETH_SetMACConfig+0x1ee>
 8003522:	2240      	movs	r2, #64	; 0x40
 8003524:	e000      	b.n	8003528 <ETH_SetMACConfig+0x1f0>
 8003526:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003528:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003530:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003532:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800353a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003548:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	430a      	orrs	r2, r1
 8003554:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	00048083 	.word	0x00048083
 8003568:	c0f88000 	.word	0xc0f88000
 800356c:	fffffef0 	.word	0xfffffef0

08003570 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b38      	ldr	r3, [pc, #224]	; (8003668 <ETH_SetDMAConfig+0xf8>)
 8003586:	4013      	ands	r3, r2
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	6809      	ldr	r1, [r1, #0]
 8003590:	431a      	orrs	r2, r3
 8003592:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003596:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	791b      	ldrb	r3, [r3, #4]
 800359c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80035a2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	7b1b      	ldrb	r3, [r3, #12]
 80035a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80035b6:	4413      	add	r3, r2
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b2c      	ldr	r3, [pc, #176]	; (800366c <ETH_SetDMAConfig+0xfc>)
 80035bc:	4013      	ands	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6811      	ldr	r1, [r2, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	f241 0304 	movw	r3, #4100	; 0x1004
 80035ca:	440b      	add	r3, r1
 80035cc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	7b5b      	ldrb	r3, [r3, #13]
 80035d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <ETH_SetDMAConfig+0x100>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80035f6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	7d1b      	ldrb	r3, [r3, #20]
 8003600:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003602:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	7f5b      	ldrb	r3, [r3, #29]
 8003608:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	f241 1304 	movw	r3, #4356	; 0x1104
 8003616:	4413      	add	r3, r2
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <ETH_SetDMAConfig+0x104>)
 800361c:	4013      	ands	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6811      	ldr	r1, [r2, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	431a      	orrs	r2, r3
 8003626:	f241 1304 	movw	r3, #4356	; 0x1104
 800362a:	440b      	add	r3, r1
 800362c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	7f1b      	ldrb	r3, [r3, #28]
 8003632:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	f241 1308 	movw	r3, #4360	; 0x1108
 8003644:	4413      	add	r3, r2
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <ETH_SetDMAConfig+0x108>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6811      	ldr	r1, [r2, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	431a      	orrs	r2, r3
 8003654:	f241 1308 	movw	r3, #4360	; 0x1108
 8003658:	440b      	add	r3, r1
 800365a:	601a      	str	r2, [r3, #0]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	ffff87fd 	.word	0xffff87fd
 800366c:	ffff2ffe 	.word	0xffff2ffe
 8003670:	fffec000 	.word	0xfffec000
 8003674:	ffc0efef 	.word	0xffc0efef
 8003678:	7fc0ffff 	.word	0x7fc0ffff

0800367c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b0a4      	sub	sp, #144	; 0x90
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800368a:	2300      	movs	r3, #0
 800368c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80036b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036bc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80036be:	2300      	movs	r3, #0
 80036c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80036d4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80036d8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80036e0:	2300      	movs	r3, #0
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80036f6:	2300      	movs	r3, #0
 80036f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80036fe:	2300      	movs	r3, #0
 8003700:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003708:	2300      	movs	r3, #0
 800370a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003714:	2320      	movs	r3, #32
 8003716:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003726:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800372c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003738:	2302      	movs	r3, #2
 800373a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003756:	2300      	movs	r3, #0
 8003758:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fde6 	bl	8003338 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800376c:	2301      	movs	r3, #1
 800376e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003770:	2301      	movs	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003774:	2300      	movs	r3, #0
 8003776:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003778:	2300      	movs	r3, #0
 800377a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800377e:	2300      	movs	r3, #0
 8003780:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003782:	2300      	movs	r3, #0
 8003784:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003786:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800378a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003790:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003794:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800379c:	f44f 7306 	mov.w	r3, #536	; 0x218
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff fee1 	bl	8003570 <ETH_SetDMAConfig>
}
 80037ae:	bf00      	nop
 80037b0:	3790      	adds	r7, #144	; 0x90
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80037d2:	f001 fc69 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 80037d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d908      	bls.n	80037f2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d804      	bhi.n	80037f2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e027      	b.n	8003842 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4a18      	ldr	r2, [pc, #96]	; (8003858 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d908      	bls.n	800380c <ETH_MAC_MDIO_ClkConfig+0x54>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4a17      	ldr	r2, [pc, #92]	; (800385c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d204      	bcs.n	800380c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	e01a      	b.n	8003842 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a13      	ldr	r2, [pc, #76]	; (800385c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d303      	bcc.n	800381c <ETH_MAC_MDIO_ClkConfig+0x64>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d911      	bls.n	8003840 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d908      	bls.n	8003836 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d804      	bhi.n	8003836 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e005      	b.n	8003842 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e000      	b.n	8003842 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003840:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	01312cff 	.word	0x01312cff
 8003858:	02160ebf 	.word	0x02160ebf
 800385c:	03938700 	.word	0x03938700
 8003860:	05f5e0ff 	.word	0x05f5e0ff
 8003864:	08f0d17f 	.word	0x08f0d17f

08003868 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e01d      	b.n	80038b2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2200      	movs	r2, #0
 8003892:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2200      	movs	r2, #0
 800389e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	3206      	adds	r2, #6
 80038a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d9de      	bls.n	8003876 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	f241 132c 	movw	r3, #4396	; 0x112c
 80038c6:	4413      	add	r3, r2
 80038c8:	2203      	movs	r2, #3
 80038ca:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68d9      	ldr	r1, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	f241 1314 	movw	r3, #4372	; 0x1114
 80038d8:	4413      	add	r3, r2
 80038da:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e024      	b.n	800394e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6919      	ldr	r1, [r3, #16]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	440b      	add	r3, r1
 8003914:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3310      	adds	r3, #16
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d9d7      	bls.n	8003904 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	f241 1330 	movw	r3, #4400	; 0x1130
 800397a:	4413      	add	r3, r2
 800397c:	2203      	movs	r2, #3
 800397e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6919      	ldr	r1, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	f241 131c 	movw	r3, #4380	; 0x111c
 800398c:	4413      	add	r3, r2
 800398e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	f241 1328 	movw	r3, #4392	; 0x1128
 80039a0:	4413      	add	r3, r2
 80039a2:	6019      	str	r1, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80039be:	4b86      	ldr	r3, [pc, #536]	; (8003bd8 <HAL_GPIO_Init+0x228>)
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039c2:	e18c      	b.n	8003cde <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 817e 	beq.w	8003cd8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_GPIO_Init+0x44>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 0201 	and.w	r2, r3, #1
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d017      	beq.n	8003a92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d123      	bne.n	8003ae6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	08da      	lsrs	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3208      	adds	r2, #8
 8003aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3208      	adds	r2, #8
 8003ae0:	69b9      	ldr	r1, [r7, #24]
 8003ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0203 	and.w	r2, r3, #3
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80d8 	beq.w	8003cd8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b28:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <HAL_GPIO_Init+0x22c>)
 8003b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_GPIO_Init+0x22c>)
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_GPIO_Init+0x22c>)
 8003b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b46:	4a26      	ldr	r2, [pc, #152]	; (8003be0 <HAL_GPIO_Init+0x230>)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <HAL_GPIO_Init+0x234>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d04a      	beq.n	8003c08 <HAL_GPIO_Init+0x258>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1c      	ldr	r2, [pc, #112]	; (8003be8 <HAL_GPIO_Init+0x238>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d02b      	beq.n	8003bd2 <HAL_GPIO_Init+0x222>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <HAL_GPIO_Init+0x23c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d025      	beq.n	8003bce <HAL_GPIO_Init+0x21e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_GPIO_Init+0x240>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01f      	beq.n	8003bca <HAL_GPIO_Init+0x21a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_GPIO_Init+0x244>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d019      	beq.n	8003bc6 <HAL_GPIO_Init+0x216>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <HAL_GPIO_Init+0x248>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_GPIO_Init+0x212>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <HAL_GPIO_Init+0x24c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00d      	beq.n	8003bbe <HAL_GPIO_Init+0x20e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <HAL_GPIO_Init+0x250>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <HAL_GPIO_Init+0x20a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <HAL_GPIO_Init+0x254>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_GPIO_Init+0x206>
 8003bb2:	2309      	movs	r3, #9
 8003bb4:	e029      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bb6:	230a      	movs	r3, #10
 8003bb8:	e027      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bba:	2307      	movs	r3, #7
 8003bbc:	e025      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bbe:	2306      	movs	r3, #6
 8003bc0:	e023      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bc2:	2305      	movs	r3, #5
 8003bc4:	e021      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	e01f      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e01d      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e01b      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e019      	b.n	8003c0a <HAL_GPIO_Init+0x25a>
 8003bd6:	bf00      	nop
 8003bd8:	58000080 	.word	0x58000080
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	58000400 	.word	0x58000400
 8003be4:	58020000 	.word	0x58020000
 8003be8:	58020400 	.word	0x58020400
 8003bec:	58020800 	.word	0x58020800
 8003bf0:	58020c00 	.word	0x58020c00
 8003bf4:	58021000 	.word	0x58021000
 8003bf8:	58021400 	.word	0x58021400
 8003bfc:	58021800 	.word	0x58021800
 8003c00:	58021c00 	.word	0x58021c00
 8003c04:	58022400 	.word	0x58022400
 8003c08:	2300      	movs	r3, #0
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	f002 0203 	and.w	r2, r2, #3
 8003c10:	0092      	lsls	r2, r2, #2
 8003c12:	4093      	lsls	r3, r2
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c1a:	4938      	ldr	r1, [pc, #224]	; (8003cfc <HAL_GPIO_Init+0x34c>)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	089b      	lsrs	r3, r3, #2
 8003c20:	3302      	adds	r3, #2
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f ae6b 	bne.w	80039c4 <HAL_GPIO_Init+0x14>
  }
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	3724      	adds	r7, #36	; 0x24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	58000400 	.word	0x58000400

08003d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	887b      	ldrh	r3, [r7, #2]
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e001      	b.n	8003d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d4c:	e003      	b.n	8003d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d6a:	f7fd fc27 	bl	80015bc <HAL_GetTick>
 8003d6e:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e03b      	b.n	8003df2 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003d9a:	e00f      	b.n	8003dbc <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003d9c:	f7fd fc0e 	bl	80015bc <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b05      	cmp	r3, #5
 8003da8:	d908      	bls.n	8003dbc <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2240      	movs	r2, #64	; 0x40
 8003dae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2203      	movs	r2, #3
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e01a      	b.n	8003df2 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e8      	bne.n	8003d9c <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9be 	bl	800414c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b087      	sub	sp, #28
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e03e      	b.n	8003e92 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e037      	b.n	8003e92 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d126      	bne.n	8003e84 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d11c      	bne.n	8003e7e <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d108      	bne.n	8003e6c <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e68:	611a      	str	r2, [r3, #16]
 8003e6a:	e00d      	b.n	8003e88 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e7a:	611a      	str	r2, [r3, #16]
 8003e7c:	e004      	b.n	8003e88 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	75fb      	strb	r3, [r7, #23]
 8003e82:	e001      	b.n	8003e88 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eac:	4b9a      	ldr	r3, [pc, #616]	; (8004118 <HAL_MDMA_IRQHandler+0x278>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a9a      	ldr	r2, [pc, #616]	; (800411c <HAL_MDMA_IRQHandler+0x27c>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	0a9b      	lsrs	r3, r3, #10
 8003eb8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b97      	ldr	r3, [pc, #604]	; (8004120 <HAL_MDMA_IRQHandler+0x280>)
 8003ec2:	4413      	add	r3, r2
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2201      	movs	r2, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003ed2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 812e 	beq.w	800413e <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d054      	beq.n	8003f9a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04d      	beq.n	8003f9a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0202 	bic.w	r2, r2, #2
 8003f0c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	669a      	str	r2, [r3, #104]	; 0x68
 8003f2c:	e005      	b.n	8003f3a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f48:	f043 0204 	orr.w	r2, r3, #4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5e:	f043 0208 	orr.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f74:	f043 0210 	orr.w	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d012      	beq.n	8003fce <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2210      	movs	r2, #16
 8003fbc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d012      	beq.n	8004002 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2208      	movs	r2, #8
 8003ff0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d012      	beq.n	8004036 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2204      	movs	r2, #4
 8004024:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d039      	beq.n	80040b8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d032      	beq.n	80040b8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8004060:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b04      	cmp	r3, #4
 800406c:	d110      	bne.n	8004090 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004082:	2b00      	cmp	r3, #0
 8004084:	d05d      	beq.n	8004142 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
        }
        return;
 800408e:	e058      	b.n	8004142 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2202      	movs	r2, #2
 8004096:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d041      	beq.n	8004144 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2204      	movs	r2, #4
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	3301      	adds	r3, #1
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d307      	bcc.n	80040f4 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f2      	bne.n	80040d8 <HAL_MDMA_IRQHandler+0x238>
 80040f2:	e000      	b.n	80040f6 <HAL_MDMA_IRQHandler+0x256>
        break;
 80040f4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2203      	movs	r2, #3
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004114:	e00a      	b.n	800412c <HAL_MDMA_IRQHandler+0x28c>
 8004116:	bf00      	nop
 8004118:	24008000 	.word	0x24008000
 800411c:	1b4e81b5 	.word	0x1b4e81b5
 8004120:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
 800413c:	e002      	b.n	8004144 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_MDMA_IRQHandler+0x2a4>
        return;
 8004142:	bf00      	nop
    }
  }
}
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop

0800414c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68d9      	ldr	r1, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004172:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800417e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800418a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004194:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80041a0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80041a2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d107      	bne.n	80041be <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80041bc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2200      	movs	r2, #0
 80041c4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da11      	bge.n	80041f2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041dc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	425b      	negs	r3, r3
 80041e4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	b292      	uxth	r2, r2
 80041ee:	621a      	str	r2, [r3, #32]
 80041f0:	e006      	b.n	8004200 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	b292      	uxth	r2, r2
 80041fe:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	2b00      	cmp	r3, #0
 8004206:	da15      	bge.n	8004234 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004216:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	425b      	negs	r3, r3
 800421e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a19      	ldr	r1, [r3, #32]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	041a      	lsls	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	621a      	str	r2, [r3, #32]
 8004232:	e009      	b.n	8004248 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6a19      	ldr	r1, [r3, #32]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	041a      	lsls	r2, r3, #16
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d006      	beq.n	8004260 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
 800425e:	e003      	b.n	8004268 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2200      	movs	r2, #0
 8004266:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2200      	movs	r2, #0
 800426e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_PWREx_ConfigSupply+0x70>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d00a      	beq.n	80042a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004290:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_PWREx_ConfigSupply+0x70>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d001      	beq.n	80042a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e01f      	b.n	80042e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e01d      	b.n	80042e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_PWREx_ConfigSupply+0x70>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f023 0207 	bic.w	r2, r3, #7
 80042ae:	490f      	ldr	r1, [pc, #60]	; (80042ec <HAL_PWREx_ConfigSupply+0x70>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042b6:	f7fd f981 	bl	80015bc <HAL_GetTick>
 80042ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042bc:	e009      	b.n	80042d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042be:	f7fd f97d 	bl	80015bc <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042cc:	d901      	bls.n	80042d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e007      	b.n	80042e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_PWREx_ConfigSupply+0x70>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042de:	d1ee      	bne.n	80042be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	58024800 	.word	0x58024800

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	; 0x30
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e397      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8087 	beq.w	800441e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004310:	4b9e      	ldr	r3, [pc, #632]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800431a:	4b9c      	ldr	r3, [pc, #624]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	2b10      	cmp	r3, #16
 8004324:	d007      	beq.n	8004336 <HAL_RCC_OscConfig+0x46>
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2b18      	cmp	r3, #24
 800432a:	d110      	bne.n	800434e <HAL_RCC_OscConfig+0x5e>
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d10b      	bne.n	800434e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004336:	4b95      	ldr	r3, [pc, #596]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d06c      	beq.n	800441c <HAL_RCC_OscConfig+0x12c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d168      	bne.n	800441c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e371      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004356:	d106      	bne.n	8004366 <HAL_RCC_OscConfig+0x76>
 8004358:	4b8c      	ldr	r3, [pc, #560]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a8b      	ldr	r2, [pc, #556]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e02e      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x98>
 800436e:	4b87      	ldr	r3, [pc, #540]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a86      	ldr	r2, [pc, #536]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b84      	ldr	r3, [pc, #528]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a83      	ldr	r2, [pc, #524]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e01d      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0xbc>
 8004392:	4b7e      	ldr	r3, [pc, #504]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a7d      	ldr	r2, [pc, #500]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b7b      	ldr	r3, [pc, #492]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7a      	ldr	r2, [pc, #488]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xd4>
 80043ac:	4b77      	ldr	r3, [pc, #476]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a76      	ldr	r2, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b74      	ldr	r3, [pc, #464]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a73      	ldr	r2, [pc, #460]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd f8f6 	bl	80015bc <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fd f8f2 	bl	80015bc <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e325      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043e6:	4b69      	ldr	r3, [pc, #420]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xe4>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fd f8e2 	bl	80015bc <HAL_GetTick>
 80043f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fd f8de 	bl	80015bc <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e311      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800440e:	4b5f      	ldr	r3, [pc, #380]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x10c>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 808a 	beq.w	8004540 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442c:	4b57      	ldr	r3, [pc, #348]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004434:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004436:	4b55      	ldr	r3, [pc, #340]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_RCC_OscConfig+0x162>
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	2b18      	cmp	r3, #24
 8004446:	d137      	bne.n	80044b8 <HAL_RCC_OscConfig+0x1c8>
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d132      	bne.n	80044b8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004452:	4b4e      	ldr	r3, [pc, #312]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_RCC_OscConfig+0x17a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e2e3      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800446a:	4b48      	ldr	r3, [pc, #288]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 0219 	bic.w	r2, r3, #25
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	4945      	ldr	r1, [pc, #276]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800447c:	f7fd f89e 	bl	80015bc <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004484:	f7fd f89a 	bl	80015bc <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e2cd      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004496:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a2:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	4936      	ldr	r1, [pc, #216]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b6:	e043      	b.n	8004540 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d026      	beq.n	800450e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044c0:	4b32      	ldr	r3, [pc, #200]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 0219 	bic.w	r2, r3, #25
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	492f      	ldr	r1, [pc, #188]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d2:	f7fd f873 	bl	80015bc <HAL_GetTick>
 80044d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044da:	f7fd f86f 	bl	80015bc <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e2a2      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	061b      	lsls	r3, r3, #24
 8004506:	4921      	ldr	r1, [pc, #132]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	604b      	str	r3, [r1, #4]
 800450c:	e018      	b.n	8004540 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450e:	4b1f      	ldr	r3, [pc, #124]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1e      	ldr	r2, [pc, #120]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fd f84f 	bl	80015bc <HAL_GetTick>
 800451e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004522:	f7fd f84b 	bl	80015bc <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e27e      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004534:	4b15      	ldr	r3, [pc, #84]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d06d      	beq.n	8004628 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004554:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b08      	cmp	r3, #8
 8004560:	d007      	beq.n	8004572 <HAL_RCC_OscConfig+0x282>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b18      	cmp	r3, #24
 8004566:	d11e      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2b6>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d119      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_RCC_OscConfig+0x2a0>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2b80      	cmp	r3, #128	; 0x80
 8004584:	d004      	beq.n	8004590 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e253      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
 800458a:	bf00      	nop
 800458c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004590:	4ba3      	ldr	r3, [pc, #652]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	49a0      	ldr	r1, [pc, #640]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045a4:	e040      	b.n	8004628 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d023      	beq.n	80045f6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045ae:	4b9c      	ldr	r3, [pc, #624]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a9b      	ldr	r2, [pc, #620]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80045b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fc ffff 	bl	80015bc <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80045c2:	f7fc fffb 	bl	80015bc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e22e      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045d4:	4b92      	ldr	r3, [pc, #584]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045e0:	4b8f      	ldr	r3, [pc, #572]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	498c      	ldr	r1, [pc, #560]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60cb      	str	r3, [r1, #12]
 80045f4:	e018      	b.n	8004628 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045f6:	4b8a      	ldr	r3, [pc, #552]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a89      	ldr	r2, [pc, #548]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80045fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fc ffdb 	bl	80015bc <HAL_GetTick>
 8004606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800460a:	f7fc ffd7 	bl	80015bc <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e20a      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800461c:	4b80      	ldr	r3, [pc, #512]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d036      	beq.n	80046a2 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d019      	beq.n	8004670 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463c:	4b78      	ldr	r3, [pc, #480]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	4a77      	ldr	r2, [pc, #476]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fc ffb8 	bl	80015bc <HAL_GetTick>
 800464c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004650:	f7fc ffb4 	bl	80015bc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1e7      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004662:	4b6f      	ldr	r3, [pc, #444]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x360>
 800466e:	e018      	b.n	80046a2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004670:	4b6b      	ldr	r3, [pc, #428]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	4a6a      	ldr	r2, [pc, #424]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fc ff9e 	bl	80015bc <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004684:	f7fc ff9a 	bl	80015bc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e1cd      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004696:	4b62      	ldr	r3, [pc, #392]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d036      	beq.n	800471c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d019      	beq.n	80046ea <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046b6:	4b5a      	ldr	r3, [pc, #360]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a59      	ldr	r2, [pc, #356]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80046bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046c2:	f7fc ff7b 	bl	80015bc <HAL_GetTick>
 80046c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046ca:	f7fc ff77 	bl	80015bc <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e1aa      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046dc:	4b50      	ldr	r3, [pc, #320]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x3da>
 80046e8:	e018      	b.n	800471c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046ea:	4b4d      	ldr	r3, [pc, #308]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a4c      	ldr	r2, [pc, #304]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80046f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046f6:	f7fc ff61 	bl	80015bc <HAL_GetTick>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046fe:	f7fc ff5d 	bl	80015bc <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e190      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004710:	4b43      	ldr	r3, [pc, #268]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8085 	beq.w	8004834 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800472a:	4b3e      	ldr	r3, [pc, #248]	; (8004824 <HAL_RCC_OscConfig+0x534>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a3d      	ldr	r2, [pc, #244]	; (8004824 <HAL_RCC_OscConfig+0x534>)
 8004730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004734:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004736:	f7fc ff41 	bl	80015bc <HAL_GetTick>
 800473a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800473e:	f7fc ff3d 	bl	80015bc <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b64      	cmp	r3, #100	; 0x64
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e170      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004750:	4b34      	ldr	r3, [pc, #208]	; (8004824 <HAL_RCC_OscConfig+0x534>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d106      	bne.n	8004772 <HAL_RCC_OscConfig+0x482>
 8004764:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6713      	str	r3, [r2, #112]	; 0x70
 8004770:	e02d      	b.n	80047ce <HAL_RCC_OscConfig+0x4de>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10c      	bne.n	8004794 <HAL_RCC_OscConfig+0x4a4>
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a28      	ldr	r2, [pc, #160]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004780:	f023 0301 	bic.w	r3, r3, #1
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
 8004786:	4b26      	ldr	r3, [pc, #152]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	4a25      	ldr	r2, [pc, #148]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	6713      	str	r3, [r2, #112]	; 0x70
 8004792:	e01c      	b.n	80047ce <HAL_RCC_OscConfig+0x4de>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b05      	cmp	r3, #5
 800479a:	d10c      	bne.n	80047b6 <HAL_RCC_OscConfig+0x4c6>
 800479c:	4b20      	ldr	r3, [pc, #128]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6713      	str	r3, [r2, #112]	; 0x70
 80047b4:	e00b      	b.n	80047ce <HAL_RCC_OscConfig+0x4de>
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a19      	ldr	r2, [pc, #100]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	4a16      	ldr	r2, [pc, #88]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d015      	beq.n	8004802 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d6:	f7fc fef1 	bl	80015bc <HAL_GetTick>
 80047da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047dc:	e00a      	b.n	80047f4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fc feed 	bl	80015bc <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e11e      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_RCC_OscConfig+0x530>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ee      	beq.n	80047de <HAL_RCC_OscConfig+0x4ee>
 8004800:	e018      	b.n	8004834 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004802:	f7fc fedb 	bl	80015bc <HAL_GetTick>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004808:	e00e      	b.n	8004828 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fc fed7 	bl	80015bc <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d905      	bls.n	8004828 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e108      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
 8004820:	58024400 	.word	0x58024400
 8004824:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004828:	4b84      	ldr	r3, [pc, #528]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ea      	bne.n	800480a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80f9 	beq.w	8004a30 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800483e:	4b7f      	ldr	r3, [pc, #508]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004846:	2b18      	cmp	r3, #24
 8004848:	f000 80b4 	beq.w	80049b4 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b02      	cmp	r3, #2
 8004852:	f040 8095 	bne.w	8004980 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004856:	4b79      	ldr	r3, [pc, #484]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a78      	ldr	r2, [pc, #480]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800485c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fc feab 	bl	80015bc <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800486a:	f7fc fea7 	bl	80015bc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0da      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800487c:	4b6f      	ldr	r3, [pc, #444]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f0      	bne.n	800486a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004888:	4b6c      	ldr	r3, [pc, #432]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800488a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488c:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <HAL_RCC_OscConfig+0x750>)
 800488e:	4013      	ands	r3, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004898:	0112      	lsls	r2, r2, #4
 800489a:	430a      	orrs	r2, r1
 800489c:	4967      	ldr	r1, [pc, #412]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	628b      	str	r3, [r1, #40]	; 0x28
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	3b01      	subs	r3, #1
 80048a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	3b01      	subs	r3, #1
 80048b2:	025b      	lsls	r3, r3, #9
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	3b01      	subs	r3, #1
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	3b01      	subs	r3, #1
 80048cc:	061b      	lsls	r3, r3, #24
 80048ce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048d2:	495a      	ldr	r1, [pc, #360]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80048d8:	4b58      	ldr	r3, [pc, #352]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4a57      	ldr	r2, [pc, #348]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048e4:	4b55      	ldr	r3, [pc, #340]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80048e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e8:	4b56      	ldr	r3, [pc, #344]	; (8004a44 <HAL_RCC_OscConfig+0x754>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048f0:	00d2      	lsls	r2, r2, #3
 80048f2:	4952      	ldr	r1, [pc, #328]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048f8:	4b50      	ldr	r3, [pc, #320]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	f023 020c 	bic.w	r2, r3, #12
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	494d      	ldr	r1, [pc, #308]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800490a:	4b4c      	ldr	r3, [pc, #304]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	f023 0202 	bic.w	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	4949      	ldr	r1, [pc, #292]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800491c:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	4a46      	ldr	r2, [pc, #280]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004928:	4b44      	ldr	r3, [pc, #272]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	4a43      	ldr	r2, [pc, #268]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800492e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4a40      	ldr	r2, [pc, #256]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800493a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800493e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4a3d      	ldr	r2, [pc, #244]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3a      	ldr	r2, [pc, #232]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fc fe30 	bl	80015bc <HAL_GetTick>
 800495c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004960:	f7fc fe2c 	bl	80015bc <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e05f      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004972:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x670>
 800497e:	e057      	b.n	8004a30 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004980:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2d      	ldr	r2, [pc, #180]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 8004986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800498a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fc fe16 	bl	80015bc <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004994:	f7fc fe12 	bl	80015bc <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e045      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049a6:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x6a4>
 80049b2:	e03d      	b.n	8004a30 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049b4:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <HAL_RCC_OscConfig+0x74c>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d031      	beq.n	8004a2c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f003 0203 	and.w	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d12a      	bne.n	8004a2c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d122      	bne.n	8004a2c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d11a      	bne.n	8004a2c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	0a5b      	lsrs	r3, r3, #9
 80049fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a02:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d111      	bne.n	8004a2c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d108      	bne.n	8004a2c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	0e1b      	lsrs	r3, r3, #24
 8004a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3730      	adds	r7, #48	; 0x30
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	fffffc0c 	.word	0xfffffc0c
 8004a44:	ffff0007 	.word	0xffff0007

08004a48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e19c      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b8a      	ldr	r3, [pc, #552]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d910      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b87      	ldr	r3, [pc, #540]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 020f 	bic.w	r2, r3, #15
 8004a72:	4985      	ldr	r1, [pc, #532]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b83      	ldr	r3, [pc, #524]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e184      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d010      	beq.n	8004aba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	4b7b      	ldr	r3, [pc, #492]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d908      	bls.n	8004aba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004aa8:	4b78      	ldr	r3, [pc, #480]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	4975      	ldr	r1, [pc, #468]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d010      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	4b70      	ldr	r3, [pc, #448]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d908      	bls.n	8004ae8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	496a      	ldr	r1, [pc, #424]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	4b64      	ldr	r3, [pc, #400]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d908      	bls.n	8004b16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b04:	4b61      	ldr	r3, [pc, #388]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	495e      	ldr	r1, [pc, #376]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d010      	beq.n	8004b44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69da      	ldr	r2, [r3, #28]
 8004b26:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d908      	bls.n	8004b44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b32:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4953      	ldr	r1, [pc, #332]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d010      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d908      	bls.n	8004b72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b60:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f023 020f 	bic.w	r2, r3, #15
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4947      	ldr	r1, [pc, #284]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d055      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b7e:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	4940      	ldr	r1, [pc, #256]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b98:	4b3c      	ldr	r3, [pc, #240]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d121      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0f6      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bb0:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d115      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0ea      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bc8:	4b30      	ldr	r3, [pc, #192]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0de      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bd8:	4b2c      	ldr	r3, [pc, #176]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0d6      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be8:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f023 0207 	bic.w	r2, r3, #7
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4925      	ldr	r1, [pc, #148]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfa:	f7fc fcdf 	bl	80015bc <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c00:	e00a      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c02:	f7fc fcdb 	bl	80015bc <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0be      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c18:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d1eb      	bne.n	8004c02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d208      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f023 020f 	bic.w	r2, r3, #15
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	490e      	ldr	r1, [pc, #56]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d214      	bcs.n	8004c90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 020f 	bic.w	r2, r3, #15
 8004c6e:	4906      	ldr	r1, [pc, #24]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e086      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
 8004c88:	52002000 	.word	0x52002000
 8004c8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d208      	bcs.n	8004cbe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cac:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	4939      	ldr	r1, [pc, #228]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d208      	bcs.n	8004cec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	492e      	ldr	r1, [pc, #184]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d208      	bcs.n	8004d1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d08:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	4922      	ldr	r1, [pc, #136]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d208      	bcs.n	8004d48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4917      	ldr	r1, [pc, #92]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d48:	f000 f834 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	4912      	ldr	r1, [pc, #72]	; (8004da4 <HAL_RCC_ClockConfig+0x35c>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <HAL_RCC_ClockConfig+0x35c>)
 8004d70:	5cd3      	ldrb	r3, [r2, r3]
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <HAL_RCC_ClockConfig+0x360>)
 8004d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d80:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <HAL_RCC_ClockConfig+0x364>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_RCC_ClockConfig+0x368>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fc fa84 	bl	8001298 <HAL_InitTick>
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	58024400 	.word	0x58024400
 8004da4:	0800de88 	.word	0x0800de88
 8004da8:	24008004 	.word	0x24008004
 8004dac:	24008000 	.word	0x24008000
 8004db0:	24008008 	.word	0x24008008

08004db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dba:	4bb3      	ldr	r3, [pc, #716]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dc2:	2b18      	cmp	r3, #24
 8004dc4:	f200 8155 	bhi.w	8005072 <HAL_RCC_GetSysClockFreq+0x2be>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e35 	.word	0x08004e35
 8004dd4:	08005073 	.word	0x08005073
 8004dd8:	08005073 	.word	0x08005073
 8004ddc:	08005073 	.word	0x08005073
 8004de0:	08005073 	.word	0x08005073
 8004de4:	08005073 	.word	0x08005073
 8004de8:	08005073 	.word	0x08005073
 8004dec:	08005073 	.word	0x08005073
 8004df0:	08004e5b 	.word	0x08004e5b
 8004df4:	08005073 	.word	0x08005073
 8004df8:	08005073 	.word	0x08005073
 8004dfc:	08005073 	.word	0x08005073
 8004e00:	08005073 	.word	0x08005073
 8004e04:	08005073 	.word	0x08005073
 8004e08:	08005073 	.word	0x08005073
 8004e0c:	08005073 	.word	0x08005073
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	08005073 	.word	0x08005073
 8004e18:	08005073 	.word	0x08005073
 8004e1c:	08005073 	.word	0x08005073
 8004e20:	08005073 	.word	0x08005073
 8004e24:	08005073 	.word	0x08005073
 8004e28:	08005073 	.word	0x08005073
 8004e2c:	08005073 	.word	0x08005073
 8004e30:	08004e67 	.word	0x08004e67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e34:	4b94      	ldr	r3, [pc, #592]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e40:	4b91      	ldr	r3, [pc, #580]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	4a90      	ldr	r2, [pc, #576]	; (800508c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004e52:	e111      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e54:	4b8d      	ldr	r3, [pc, #564]	; (800508c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e56:	61bb      	str	r3, [r7, #24]
    break;
 8004e58:	e10e      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e5a:	4b8d      	ldr	r3, [pc, #564]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e5c:	61bb      	str	r3, [r7, #24]
    break;
 8004e5e:	e10b      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004e60:	4b8c      	ldr	r3, [pc, #560]	; (8005094 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e62:	61bb      	str	r3, [r7, #24]
    break;
 8004e64:	e108      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e66:	4b88      	ldr	r3, [pc, #544]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004e70:	4b85      	ldr	r3, [pc, #532]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e7c:	4b82      	ldr	r3, [pc, #520]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004e86:	4b80      	ldr	r3, [pc, #512]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	08db      	lsrs	r3, r3, #3
 8004e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80e1 	beq.w	800506c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	f000 8083 	beq.w	8004fb8 <HAL_RCC_GetSysClockFreq+0x204>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	f200 80a1 	bhi.w	8004ffc <HAL_RCC_GetSysClockFreq+0x248>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x114>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d056      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ec6:	e099      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ec8:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02d      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ed4:	4b6c      	ldr	r3, [pc, #432]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	4a6b      	ldr	r2, [pc, #428]	; (800508c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efe:	4b62      	ldr	r3, [pc, #392]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004f2e:	e087      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800509c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b51      	ldr	r3, [pc, #324]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f72:	e065      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f86:	4b40      	ldr	r3, [pc, #256]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb6:	e043      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80050a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fca:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffa:	e021      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500e:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005022:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800503e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005040:	4b11      	ldr	r3, [pc, #68]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	0a5b      	lsrs	r3, r3, #9
 8005046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800504a:	3301      	adds	r3, #1
 800504c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	ee07 3a90 	vmov	s15, r3
 8005054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005058:	edd7 6a07 	vldr	s13, [r7, #28]
 800505c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005064:	ee17 3a90 	vmov	r3, s15
 8005068:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800506a:	e005      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
    break;
 8005070:	e002      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005074:	61bb      	str	r3, [r7, #24]
    break;
 8005076:	bf00      	nop
  }

  return sysclockfreq;
 8005078:	69bb      	ldr	r3, [r7, #24]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3724      	adds	r7, #36	; 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
 800508c:	03d09000 	.word	0x03d09000
 8005090:	003d0900 	.word	0x003d0900
 8005094:	007a1200 	.word	0x007a1200
 8005098:	46000000 	.word	0x46000000
 800509c:	4c742400 	.word	0x4c742400
 80050a0:	4a742400 	.word	0x4a742400
 80050a4:	4af42400 	.word	0x4af42400

080050a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050ae:	f7ff fe81 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	0a1b      	lsrs	r3, r3, #8
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	490f      	ldr	r1, [pc, #60]	; (80050fc <HAL_RCC_GetHCLKFreq+0x54>)
 80050c0:	5ccb      	ldrb	r3, [r1, r3]
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <HAL_RCC_GetHCLKFreq+0x54>)
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <HAL_RCC_GetHCLKFreq+0x58>)
 80050e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050e6:	4a07      	ldr	r2, [pc, #28]	; (8005104 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_RCC_GetHCLKFreq+0x58>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	58024400 	.word	0x58024400
 80050fc:	0800de88 	.word	0x0800de88
 8005100:	24008004 	.word	0x24008004
 8005104:	24008000 	.word	0x24008000

08005108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800510c:	f7ff ffcc 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4904      	ldr	r1, [pc, #16]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	58024400 	.word	0x58024400
 8005130:	0800de88 	.word	0x0800de88

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005138:	f7ff ffb6 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4904      	ldr	r1, [pc, #16]	; (800515c <HAL_RCC_GetPCLK2Freq+0x28>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	58024400 	.word	0x58024400
 800515c:	0800de88 	.word	0x0800de88

08005160 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	223f      	movs	r2, #63	; 0x3f
 800516e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <HAL_RCC_GetClockConfig+0x7c>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0207 	and.w	r2, r3, #7
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800517c:	4b17      	ldr	r3, [pc, #92]	; (80051dc <HAL_RCC_GetClockConfig+0x7c>)
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <HAL_RCC_GetClockConfig+0x7c>)
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <HAL_RCC_GetClockConfig+0x7c>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <HAL_RCC_GetClockConfig+0x7c>)
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_GetClockConfig+0x7c>)
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_RCC_GetClockConfig+0x7c>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <HAL_RCC_GetClockConfig+0x80>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 020f 	and.w	r2, r3, #15
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	601a      	str	r2, [r3, #0]
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	58024400 	.word	0x58024400
 80051e0:	52002000 	.word	0x52002000

080051e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051f0:	2300      	movs	r3, #0
 80051f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d03f      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005208:	d02a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800520a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800520e:	d824      	bhi.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005214:	d018      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800521a:	d81e      	bhi.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005224:	d007      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005226:	e018      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005228:	4bab      	ldr	r3, [pc, #684]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	4aaa      	ldr	r2, [pc, #680]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800522e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005234:	e015      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	2102      	movs	r1, #2
 800523c:	4618      	mov	r0, r3
 800523e:	f001 feff 	bl	8007040 <RCCEx_PLL2_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005246:	e00c      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3324      	adds	r3, #36	; 0x24
 800524c:	2102      	movs	r1, #2
 800524e:	4618      	mov	r0, r3
 8005250:	f001 ffa8 	bl	80071a4 <RCCEx_PLL3_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005258:	e003      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
      break;
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005268:	4b9b      	ldr	r3, [pc, #620]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800526a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005274:	4998      	ldr	r1, [pc, #608]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005276:	4313      	orrs	r3, r2
 8005278:	650b      	str	r3, [r1, #80]	; 0x50
 800527a:	e001      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d03d      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	2b04      	cmp	r3, #4
 8005292:	d826      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052b1 	.word	0x080052b1
 80052a0:	080052bf 	.word	0x080052bf
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e9 	.word	0x080052e9
 80052ac:	080052e9 	.word	0x080052e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b0:	4b89      	ldr	r3, [pc, #548]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	4a88      	ldr	r2, [pc, #544]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052bc:	e015      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 febb 	bl	8007040 <RCCEx_PLL2_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052ce:	e00c      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3324      	adds	r3, #36	; 0x24
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 ff64 	bl	80071a4 <RCCEx_PLL3_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052e0:	e003      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
      break;
 80052e6:	e000      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80052e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f0:	4b79      	ldr	r3, [pc, #484]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f4:	f023 0207 	bic.w	r2, r3, #7
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	4976      	ldr	r1, [pc, #472]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	650b      	str	r3, [r1, #80]	; 0x50
 8005302:	e001      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005310:	2b00      	cmp	r3, #0
 8005312:	d051      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800531a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800531e:	d036      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005320:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005324:	d830      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005326:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800532a:	d032      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800532c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005330:	d82a      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005332:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005336:	d02e      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005338:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800533c:	d824      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800533e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005342:	d018      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005348:	d81e      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800534e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005352:	d007      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005354:	e018      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005356:	4b60      	ldr	r3, [pc, #384]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	4a5f      	ldr	r2, [pc, #380]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800535c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005360:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005362:	e019      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f001 fe68 	bl	8007040 <RCCEx_PLL2_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005374:	e010      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3324      	adds	r3, #36	; 0x24
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f001 ff11 	bl	80071a4 <RCCEx_PLL3_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005386:	e007      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]
      break;
 800538c:	e004      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800538e:	bf00      	nop
 8005390:	e002      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800539e:	4b4e      	ldr	r3, [pc, #312]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053ac:	494a      	ldr	r1, [pc, #296]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	658b      	str	r3, [r1, #88]	; 0x58
 80053b2:	e001      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d051      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053ca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80053ce:	d036      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80053d0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80053d4:	d830      	bhi.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80053d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053da:	d032      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80053dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e0:	d82a      	bhi.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80053e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053e6:	d02e      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80053e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053ec:	d824      	bhi.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80053ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f2:	d018      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80053f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f8:	d81e      	bhi.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80053fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005402:	d007      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005404:	e018      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005406:	4b34      	ldr	r3, [pc, #208]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	4a33      	ldr	r2, [pc, #204]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800540c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005412:	e019      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fe10 	bl	8007040 <RCCEx_PLL2_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005424:	e010      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3324      	adds	r3, #36	; 0x24
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f001 feb9 	bl	80071a4 <RCCEx_PLL3_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005436:	e007      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
      break;
 800543c:	e004      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800543e:	bf00      	nop
 8005440:	e002      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005442:	bf00      	nop
 8005444:	e000      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800544e:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800545c:	491e      	ldr	r1, [pc, #120]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	658b      	str	r3, [r1, #88]	; 0x58
 8005462:	e001      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d035      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005478:	2b30      	cmp	r3, #48	; 0x30
 800547a:	d01c      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d817      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d00c      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d813      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d016      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800548c:	2b10      	cmp	r3, #16
 800548e:	d10f      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	4a10      	ldr	r2, [pc, #64]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800549c:	e00e      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	2102      	movs	r1, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fdcb 	bl	8007040 <RCCEx_PLL2_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80054ae:	e005      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	e002      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80054b6:	bf00      	nop
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80054ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10c      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ce:	4902      	ldr	r1, [pc, #8]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80054d4:	e004      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d047      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f4:	d030      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80054f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054fa:	d82a      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80054fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005500:	d02c      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005506:	d824      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550c:	d018      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800550e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005512:	d81e      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551c:	d007      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800551e:	e018      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005520:	4bac      	ldr	r3, [pc, #688]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	4aab      	ldr	r2, [pc, #684]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800552c:	e017      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3304      	adds	r3, #4
 8005532:	2100      	movs	r1, #0
 8005534:	4618      	mov	r0, r3
 8005536:	f001 fd83 	bl	8007040 <RCCEx_PLL2_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800553e:	e00e      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3324      	adds	r3, #36	; 0x24
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fe2c 	bl	80071a4 <RCCEx_PLL3_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005550:	e005      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
      break;
 8005556:	e002      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800555c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005564:	4b9b      	ldr	r3, [pc, #620]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005568:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	4998      	ldr	r1, [pc, #608]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	650b      	str	r3, [r1, #80]	; 0x50
 8005576:	e001      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d049      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005590:	d02e      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005596:	d828      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800559c:	d02a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800559e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055a2:	d822      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x406>
 80055a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055a8:	d026      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80055aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ae:	d81c      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x406>
 80055b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b4:	d010      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80055b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ba:	d816      	bhi.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x406>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01d      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x418>
 80055c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c4:	d111      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3304      	adds	r3, #4
 80055ca:	2101      	movs	r1, #1
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 fd37 	bl	8007040 <RCCEx_PLL2_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055d6:	e012      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3324      	adds	r3, #36	; 0x24
 80055dc:	2101      	movs	r1, #1
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 fde0 	bl	80071a4 <RCCEx_PLL3_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055e8:	e009      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
      break;
 80055ee:	e006      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80055f0:	bf00      	nop
 80055f2:	e004      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80055f4:	bf00      	nop
 80055f6:	e002      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80055f8:	bf00      	nop
 80055fa:	e000      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80055fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005604:	4b73      	ldr	r3, [pc, #460]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005608:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	4970      	ldr	r1, [pc, #448]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005612:	4313      	orrs	r3, r2
 8005614:	650b      	str	r3, [r1, #80]	; 0x50
 8005616:	e001      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d04b      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800562e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005632:	d02e      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005638:	d828      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d02a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005644:	d822      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800564a:	d026      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800564c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005650:	d81c      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005656:	d010      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800565c:	d816      	bhi.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d01d      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005666:	d111      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	2101      	movs	r1, #1
 800566e:	4618      	mov	r0, r3
 8005670:	f001 fce6 	bl	8007040 <RCCEx_PLL2_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005678:	e012      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3324      	adds	r3, #36	; 0x24
 800567e:	2101      	movs	r1, #1
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fd8f 	bl	80071a4 <RCCEx_PLL3_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800568a:	e009      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	75fb      	strb	r3, [r7, #23]
      break;
 8005690:	e006      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005692:	bf00      	nop
 8005694:	e004      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800569e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056a6:	4b4b      	ldr	r3, [pc, #300]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056b4:	4947      	ldr	r1, [pc, #284]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	658b      	str	r3, [r1, #88]	; 0x58
 80056ba:	e001      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d02f      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d4:	d00e      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80056d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056da:	d814      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80056e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056e4:	d10f      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e6:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	4a3a      	ldr	r2, [pc, #232]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80056ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80056f2:	e00c      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3304      	adds	r3, #4
 80056f8:	2101      	movs	r1, #1
 80056fa:	4618      	mov	r0, r3
 80056fc:	f001 fca0 	bl	8007040 <RCCEx_PLL2_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005704:	e003      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	75fb      	strb	r3, [r7, #23]
      break;
 800570a:	e000      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800570c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005714:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005718:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005720:	492c      	ldr	r1, [pc, #176]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005722:	4313      	orrs	r3, r2
 8005724:	650b      	str	r3, [r1, #80]	; 0x50
 8005726:	e001      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d032      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	2b03      	cmp	r3, #3
 800573e:	d81b      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800577f 	.word	0x0800577f
 800574c:	08005759 	.word	0x08005759
 8005750:	08005767 	.word	0x08005767
 8005754:	0800577f 	.word	0x0800577f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005764:	e00c      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	2102      	movs	r1, #2
 800576c:	4618      	mov	r0, r3
 800576e:	f001 fc67 	bl	8007040 <RCCEx_PLL2_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005776:	e003      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
      break;
 800577c:	e000      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800577e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	f023 0203 	bic.w	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	4910      	ldr	r1, [pc, #64]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005794:	4313      	orrs	r3, r2
 8005796:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005798:	e001      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 808a 	beq.w	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b8:	f7fb ff00 	bl	80015bc <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057be:	e00d      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c0:	f7fb fefc 	bl	80015bc <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d906      	bls.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	75fb      	strb	r3, [r7, #23]
        break;
 80057d2:	e009      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80057d4:	58024400 	.word	0x58024400
 80057d8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057dc:	4bb9      	ldr	r3, [pc, #740]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0eb      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d166      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80057ee:	4bb6      	ldr	r3, [pc, #728]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80057f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057f8:	4053      	eors	r3, r2
 80057fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d013      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005802:	4bb1      	ldr	r3, [pc, #708]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800580c:	4bae      	ldr	r3, [pc, #696]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4aad      	ldr	r2, [pc, #692]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005816:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005818:	4bab      	ldr	r3, [pc, #684]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4aaa      	ldr	r2, [pc, #680]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005824:	4aa8      	ldr	r2, [pc, #672]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005834:	d115      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005836:	f7fb fec1 	bl	80015bc <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800583c:	e00b      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583e:	f7fb febd 	bl	80015bc <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	; 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d902      	bls.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	75fb      	strb	r3, [r7, #23]
            break;
 8005854:	e005      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005856:	4b9c      	ldr	r3, [pc, #624]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0ed      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d126      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005876:	d10d      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005878:	4b93      	ldr	r3, [pc, #588]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005886:	0919      	lsrs	r1, r3, #4
 8005888:	4b90      	ldr	r3, [pc, #576]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800588a:	400b      	ands	r3, r1
 800588c:	498e      	ldr	r1, [pc, #568]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	610b      	str	r3, [r1, #16]
 8005892:	e005      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005894:	4b8c      	ldr	r3, [pc, #560]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	4a8b      	ldr	r2, [pc, #556]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800589a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800589e:	6113      	str	r3, [r2, #16]
 80058a0:	4b89      	ldr	r3, [pc, #548]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80058a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ae:	4986      	ldr	r1, [pc, #536]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	670b      	str	r3, [r1, #112]	; 0x70
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	75bb      	strb	r3, [r7, #22]
 80058ba:	e001      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
 80058be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d07e      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d0:	2b28      	cmp	r3, #40	; 0x28
 80058d2:	d867      	bhi.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	080059ab 	.word	0x080059ab
 80058e0:	080059a5 	.word	0x080059a5
 80058e4:	080059a5 	.word	0x080059a5
 80058e8:	080059a5 	.word	0x080059a5
 80058ec:	080059a5 	.word	0x080059a5
 80058f0:	080059a5 	.word	0x080059a5
 80058f4:	080059a5 	.word	0x080059a5
 80058f8:	080059a5 	.word	0x080059a5
 80058fc:	08005981 	.word	0x08005981
 8005900:	080059a5 	.word	0x080059a5
 8005904:	080059a5 	.word	0x080059a5
 8005908:	080059a5 	.word	0x080059a5
 800590c:	080059a5 	.word	0x080059a5
 8005910:	080059a5 	.word	0x080059a5
 8005914:	080059a5 	.word	0x080059a5
 8005918:	080059a5 	.word	0x080059a5
 800591c:	08005993 	.word	0x08005993
 8005920:	080059a5 	.word	0x080059a5
 8005924:	080059a5 	.word	0x080059a5
 8005928:	080059a5 	.word	0x080059a5
 800592c:	080059a5 	.word	0x080059a5
 8005930:	080059a5 	.word	0x080059a5
 8005934:	080059a5 	.word	0x080059a5
 8005938:	080059a5 	.word	0x080059a5
 800593c:	080059ab 	.word	0x080059ab
 8005940:	080059a5 	.word	0x080059a5
 8005944:	080059a5 	.word	0x080059a5
 8005948:	080059a5 	.word	0x080059a5
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059a5 	.word	0x080059a5
 8005954:	080059a5 	.word	0x080059a5
 8005958:	080059a5 	.word	0x080059a5
 800595c:	080059ab 	.word	0x080059ab
 8005960:	080059a5 	.word	0x080059a5
 8005964:	080059a5 	.word	0x080059a5
 8005968:	080059a5 	.word	0x080059a5
 800596c:	080059a5 	.word	0x080059a5
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059a5 	.word	0x080059a5
 8005978:	080059a5 	.word	0x080059a5
 800597c:	080059ab 	.word	0x080059ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	2101      	movs	r1, #1
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fb5a 	bl	8007040 <RCCEx_PLL2_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005990:	e00c      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3324      	adds	r3, #36	; 0x24
 8005996:	2101      	movs	r1, #1
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fc03 	bl	80071a4 <RCCEx_PLL3_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80059a2:	e003      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
      break;
 80059a8:	e000      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80059aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059b2:	4b45      	ldr	r3, [pc, #276]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059be:	4942      	ldr	r1, [pc, #264]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	654b      	str	r3, [r1, #84]	; 0x54
 80059c4:	e001      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
 80059c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d037      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	2b05      	cmp	r3, #5
 80059dc:	d820      	bhi.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a27 	.word	0x08005a27
 80059e8:	080059fd 	.word	0x080059fd
 80059ec:	08005a0f 	.word	0x08005a0f
 80059f0:	08005a27 	.word	0x08005a27
 80059f4:	08005a27 	.word	0x08005a27
 80059f8:	08005a27 	.word	0x08005a27
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fb1c 	bl	8007040 <RCCEx_PLL2_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a0c:	e00c      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3324      	adds	r3, #36	; 0x24
 8005a12:	2101      	movs	r1, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 fbc5 	bl	80071a4 <RCCEx_PLL3_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a1e:	e003      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
      break;
 8005a24:	e000      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a2e:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	f023 0207 	bic.w	r2, r3, #7
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3a:	4923      	ldr	r1, [pc, #140]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8005a40:	e001      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d040      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d821      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005aa7 	.word	0x08005aa7
 8005a68:	08005a7d 	.word	0x08005a7d
 8005a6c:	08005a8f 	.word	0x08005a8f
 8005a70:	08005aa7 	.word	0x08005aa7
 8005a74:	08005aa7 	.word	0x08005aa7
 8005a78:	08005aa7 	.word	0x08005aa7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	2101      	movs	r1, #1
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fadc 	bl	8007040 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a8c:	e00c      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3324      	adds	r3, #36	; 0x24
 8005a92:	2101      	movs	r1, #1
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 fb85 	bl	80071a4 <RCCEx_PLL3_Config>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005a9e:	e003      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8005aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab2:	f023 0207 	bic.w	r2, r3, #7
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005abc:	4902      	ldr	r1, [pc, #8]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ac2:	e007      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005ac4:	58024800 	.word	0x58024800
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d04b      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aea:	d02e      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005af0:	d828      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d02a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afc:	d822      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005afe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b02:	d026      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005b04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b08:	d81c      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0e:	d010      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b14:	d816      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01d      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b1e:	d111      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3304      	adds	r3, #4
 8005b24:	2100      	movs	r1, #0
 8005b26:	4618      	mov	r0, r3
 8005b28:	f001 fa8a 	bl	8007040 <RCCEx_PLL2_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b30:	e012      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3324      	adds	r3, #36	; 0x24
 8005b36:	2102      	movs	r1, #2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fb33 	bl	80071a4 <RCCEx_PLL3_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b42:	e009      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	75fb      	strb	r3, [r7, #23]
      break;
 8005b48:	e006      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e004      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b5e:	4bb2      	ldr	r3, [pc, #712]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	49ae      	ldr	r1, [pc, #696]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	654b      	str	r3, [r1, #84]	; 0x54
 8005b72:	e001      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d04b      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b8e:	d02e      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005b90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b94:	d828      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9a:	d02a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba0:	d822      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba6:	d026      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005ba8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bac:	d81c      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb2:	d010      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb8:	d816      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01d      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc2:	d111      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fa38 	bl	8007040 <RCCEx_PLL2_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005bd4:	e012      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3324      	adds	r3, #36	; 0x24
 8005bda:	2102      	movs	r1, #2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 fae1 	bl	80071a4 <RCCEx_PLL3_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005be6:	e009      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	75fb      	strb	r3, [r7, #23]
      break;
 8005bec:	e006      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e004      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e002      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e000      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c02:	4b89      	ldr	r3, [pc, #548]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c10:	4985      	ldr	r1, [pc, #532]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	658b      	str	r3, [r1, #88]	; 0x58
 8005c16:	e001      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
 8005c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d04b      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c32:	d02e      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005c34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005c38:	d828      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3e:	d02a      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c44:	d822      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005c46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c4a:	d026      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005c4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005c50:	d81c      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c56:	d010      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8005c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c5c:	d816      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01d      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c66:	d111      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 f9e6 	bl	8007040 <RCCEx_PLL2_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c78:	e012      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3324      	adds	r3, #36	; 0x24
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fa8f 	bl	80071a4 <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c8a:	e009      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005c92:	bf00      	nop
 8005c94:	e004      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ca6:	4b60      	ldr	r3, [pc, #384]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cb4:	495c      	ldr	r1, [pc, #368]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	658b      	str	r3, [r1, #88]	; 0x58
 8005cba:	e001      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d018      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd4:	d10a      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3324      	adds	r3, #36	; 0x24
 8005cda:	2102      	movs	r1, #2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f001 fa61 	bl	80071a4 <RCCEx_PLL3_Config>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005cec:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf8:	494b      	ldr	r1, [pc, #300]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d14:	d10a      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 fa41 	bl	80071a4 <RCCEx_PLL3_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d2c:	4b3e      	ldr	r3, [pc, #248]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	493b      	ldr	r1, [pc, #236]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d034      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d56:	d01d      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d5c:	d817      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d66:	d009      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d68:	e011      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f965 	bl	8007040 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d7a:	e00c      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3324      	adds	r3, #36	; 0x24
 8005d80:	2102      	movs	r1, #2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 fa0e 	bl	80071a4 <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d8c:	e003      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
      break;
 8005d92:	e000      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d9c:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005daa:	491f      	ldr	r1, [pc, #124]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	658b      	str	r3, [r1, #88]	; 0x58
 8005db0:	e001      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d036      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dcc:	d01c      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005dce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dd2:	d816      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd8:	d003      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dde:	d007      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8005de0:	e00f      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	4a10      	ldr	r2, [pc, #64]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005dee:	e00c      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3324      	adds	r3, #36	; 0x24
 8005df4:	2101      	movs	r1, #1
 8005df6:	4618      	mov	r0, r3
 8005df8:	f001 f9d4 	bl	80071a4 <RCCEx_PLL3_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e00:	e003      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	75fb      	strb	r3, [r7, #23]
      break;
 8005e06:	e000      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10d      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e1e:	4902      	ldr	r1, [pc, #8]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	654b      	str	r3, [r1, #84]	; 0x54
 8005e24:	e004      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8005e26:	bf00      	nop
 8005e28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
 8005e2e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d029      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e48:	d007      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005e4a:	e00f      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e4c:	4b61      	ldr	r3, [pc, #388]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	4a60      	ldr	r2, [pc, #384]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e58:	e00b      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2102      	movs	r1, #2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 f8ed 	bl	8007040 <RCCEx_PLL2_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e6a:	e002      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e78:	4b56      	ldr	r3, [pc, #344]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e84:	4953      	ldr	r1, [pc, #332]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e8a:	e001      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3324      	adds	r3, #36	; 0x24
 8005ea0:	2102      	movs	r1, #2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 f97e 	bl	80071a4 <RCCEx_PLL3_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d030      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec6:	d017      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ecc:	d811      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed2:	d013      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed8:	d80b      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d010      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee4:	4b3b      	ldr	r3, [pc, #236]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a3a      	ldr	r2, [pc, #232]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005ef0:	e007      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef6:	e004      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005ef8:	bf00      	nop
 8005efa:	e002      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005efc:	bf00      	nop
 8005efe:	e000      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f08:	4b32      	ldr	r3, [pc, #200]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f14:	492f      	ldr	r1, [pc, #188]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	654b      	str	r3, [r1, #84]	; 0x54
 8005f1a:	e001      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f2c:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f38:	4926      	ldr	r1, [pc, #152]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f4a:	4b22      	ldr	r3, [pc, #136]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f56:	491f      	ldr	r1, [pc, #124]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f68:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f72:	6113      	str	r3, [r2, #16]
 8005f74:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f7e:	4915      	ldr	r1, [pc, #84]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da08      	bge.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f98:	490e      	ldr	r1, [pc, #56]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005faa:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb8:	4906      	ldr	r1, [pc, #24]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005fbe:	7dbb      	ldrb	r3, [r7, #22]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e000      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	58024400 	.word	0x58024400

08005fd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b090      	sub	sp, #64	; 0x40
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe6:	f040 8089 	bne.w	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005fea:	4b95      	ldr	r3, [pc, #596]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d87d      	bhi.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006015 	.word	0x08006015
 8006004:	08006039 	.word	0x08006039
 8006008:	0800605d 	.word	0x0800605d
 800600c:	080060f1 	.word	0x080060f1
 8006010:	08006081 	.word	0x08006081

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006014:	4b8a      	ldr	r3, [pc, #552]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006020:	d107      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006026:	4618      	mov	r0, r3
 8006028:	f000 feb8 	bl	8006d9c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006030:	e3ed      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006036:	e3ea      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006038:	4b81      	ldr	r3, [pc, #516]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006044:	d107      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006046:	f107 0318 	add.w	r3, r7, #24
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fbfe 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006054:	e3db      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800605a:	e3d8      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800605c:	4b78      	ldr	r3, [pc, #480]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006068:	d107      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606a:	f107 030c 	add.w	r3, r7, #12
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fd40 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006078:	e3c9      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800607e:	e3c6      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006080:	4b6f      	ldr	r3, [pc, #444]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006088:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800608a:	4b6d      	ldr	r3, [pc, #436]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b04      	cmp	r3, #4
 8006094:	d10c      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800609c:	4b68      	ldr	r3, [pc, #416]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	08db      	lsrs	r3, r3, #3
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	4a67      	ldr	r2, [pc, #412]	; (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ae:	e01e      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060b0:	4b63      	ldr	r3, [pc, #396]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060bc:	d106      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060c4:	d102      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80060c6:	4b60      	ldr	r3, [pc, #384]	; (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ca:	e010      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060cc:	4b5c      	ldr	r3, [pc, #368]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060d8:	d106      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80060da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060e0:	d102      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80060e2:	4b5a      	ldr	r3, [pc, #360]	; (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80060e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e6:	e002      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80060ec:	e38f      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80060ee:	e38e      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80060f0:	4b57      	ldr	r3, [pc, #348]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060f4:	e38b      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060fa:	e388      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006102:	f040 80a7 	bne.w	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006106:	4b4e      	ldr	r3, [pc, #312]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800610e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006116:	d054      	beq.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800611e:	f200 808b 	bhi.w	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006128:	f000 8083 	beq.w	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006132:	f200 8081 	bhi.w	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800613c:	d02f      	beq.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006144:	d878      	bhi.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006152:	d012      	beq.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8006154:	e070      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006156:	4b3a      	ldr	r3, [pc, #232]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006162:	d107      	bne.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fe17 	bl	8006d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006172:	e34c      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006178:	e349      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800617a:	4b31      	ldr	r3, [pc, #196]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006186:	d107      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006188:	f107 0318 	add.w	r3, r7, #24
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fb5d 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006196:	e33a      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800619c:	e337      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800619e:	4b28      	ldr	r3, [pc, #160]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061aa:	d107      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ac:	f107 030c 	add.w	r3, r7, #12
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fc9f 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061ba:	e328      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061c0:	e325      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80061c2:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80061c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061cc:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d10c      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80061d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d109      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061de:	4b18      	ldr	r3, [pc, #96]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	08db      	lsrs	r3, r3, #3
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	4a16      	ldr	r2, [pc, #88]	; (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80061ea:	fa22 f303 	lsr.w	r3, r2, r3
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f0:	e01e      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061f2:	4b13      	ldr	r3, [pc, #76]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061fe:	d106      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006206:	d102      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620c:	e010      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800621a:	d106      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800621c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006222:	d102      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006224:	4b09      	ldr	r3, [pc, #36]	; (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006228:	e002      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800622e:	e2ee      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006230:	e2ed      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006236:	e2ea      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800623c:	e2e7      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800623e:	bf00      	nop
 8006240:	58024400 	.word	0x58024400
 8006244:	03d09000 	.word	0x03d09000
 8006248:	003d0900 	.word	0x003d0900
 800624c:	007a1200 	.word	0x007a1200
 8006250:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625a:	f040 809c 	bne.w	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800625e:	4b9e      	ldr	r3, [pc, #632]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006262:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006266:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800626e:	d054      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006276:	f200 808b 	bhi.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006280:	f000 8083 	beq.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800628a:	f200 8081 	bhi.w	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006294:	d02f      	beq.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800629c:	d878      	bhi.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062aa:	d012      	beq.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80062ac:	e070      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062ae:	4b8a      	ldr	r3, [pc, #552]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062ba:	d107      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fd6b 	bl	8006d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062ca:	e2a0      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062d0:	e29d      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062d2:	4b81      	ldr	r3, [pc, #516]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062de:	d107      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e0:	f107 0318 	add.w	r3, r7, #24
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fab1 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80062ee:	e28e      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062f4:	e28b      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062f6:	4b78      	ldr	r3, [pc, #480]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006302:	d107      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006304:	f107 030c 	add.w	r3, r7, #12
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fbf3 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006312:	e27c      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006318:	e279      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800631a:	4b6f      	ldr	r3, [pc, #444]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800631c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006322:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006324:	4b6c      	ldr	r3, [pc, #432]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b04      	cmp	r3, #4
 800632e:	d10c      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006336:	4b68      	ldr	r3, [pc, #416]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	08db      	lsrs	r3, r3, #3
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	4a66      	ldr	r2, [pc, #408]	; (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006342:	fa22 f303 	lsr.w	r3, r2, r3
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006348:	e01e      	b.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800634a:	4b63      	ldr	r3, [pc, #396]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006356:	d106      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800635e:	d102      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006360:	4b5f      	ldr	r3, [pc, #380]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	e010      	b.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006366:	4b5c      	ldr	r3, [pc, #368]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006372:	d106      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637a:	d102      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800637c:	4b59      	ldr	r3, [pc, #356]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006380:	e002      	b.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006386:	e242      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006388:	e241      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800638a:	4b57      	ldr	r3, [pc, #348]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800638e:	e23e      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006394:	e23b      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639c:	f040 80a6 	bne.w	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80063a0:	4b4d      	ldr	r3, [pc, #308]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80063a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063b0:	d054      	beq.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063b8:	f200 808b 	bhi.w	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063c2:	f000 8083 	beq.w	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063cc:	f200 8081 	bhi.w	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d6:	d02f      	beq.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063de:	d878      	bhi.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ec:	d012      	beq.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80063ee:	e070      	b.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063f0:	4b39      	ldr	r3, [pc, #228]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fc:	d107      	bne.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fcca 	bl	8006d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800640c:	e1ff      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006412:	e1fc      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006414:	4b30      	ldr	r3, [pc, #192]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800641c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006420:	d107      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006422:	f107 0318 	add.w	r3, r7, #24
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fa10 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006430:	e1ed      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006436:	e1ea      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006438:	4b27      	ldr	r3, [pc, #156]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006444:	d107      	bne.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006446:	f107 030c 	add.w	r3, r7, #12
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fb52 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006454:	e1db      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006456:	2300      	movs	r3, #0
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800645a:	e1d8      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800645c:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800645e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006460:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006464:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006466:	4b1c      	ldr	r3, [pc, #112]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b04      	cmp	r3, #4
 8006470:	d10c      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006478:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	08db      	lsrs	r3, r3, #3
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	4a16      	ldr	r2, [pc, #88]	; (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800648a:	e01e      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800648c:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006498:	d106      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a0:	d102      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80064a2:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80064a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a6:	e010      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064a8:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b4:	d106      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064bc:	d102      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c2:	e002      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064c8:	e1a1      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80064ca:	e1a0      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064d0:	e19d      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064d6:	e19a      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80064d8:	58024400 	.word	0x58024400
 80064dc:	03d09000 	.word	0x03d09000
 80064e0:	003d0900 	.word	0x003d0900
 80064e4:	007a1200 	.word	0x007a1200
 80064e8:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064f2:	d173      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80064f4:	4b9a      	ldr	r3, [pc, #616]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80064f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006504:	d02f      	beq.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800650c:	d863      	bhi.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651a:	d012      	beq.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800651c:	e05b      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800651e:	4b90      	ldr	r3, [pc, #576]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800652a:	d107      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652c:	f107 0318 	add.w	r3, r7, #24
 8006530:	4618      	mov	r0, r3
 8006532:	f000 f98b 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800653a:	e168      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006540:	e165      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006542:	4b87      	ldr	r3, [pc, #540]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800654a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654e:	d107      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006550:	f107 030c 	add.w	r3, r7, #12
 8006554:	4618      	mov	r0, r3
 8006556:	f000 facd 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800655e:	e156      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006564:	e153      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006566:	4b7e      	ldr	r3, [pc, #504]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800656e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006570:	4b7b      	ldr	r3, [pc, #492]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b04      	cmp	r3, #4
 800657a:	d10c      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006582:	4b77      	ldr	r3, [pc, #476]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	08db      	lsrs	r3, r3, #3
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	4a75      	ldr	r2, [pc, #468]	; (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006594:	e01e      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006596:	4b72      	ldr	r3, [pc, #456]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	d106      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065aa:	d102      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80065ac:	4b6e      	ldr	r3, [pc, #440]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b0:	e010      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065b2:	4b6b      	ldr	r3, [pc, #428]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065be:	d106      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c6:	d102      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065c8:	4b68      	ldr	r3, [pc, #416]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065cc:	e002      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065d2:	e11c      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80065d4:	e11b      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065da:	e118      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e2:	d133      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80065e4:	4b5e      	ldr	r3, [pc, #376]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80065e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fa:	d012      	beq.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80065fc:	e023      	b.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065fe:	4b58      	ldr	r3, [pc, #352]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800660a:	d107      	bne.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800660c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fbc3 	bl	8006d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800661a:	e0f8      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006620:	e0f5      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006622:	4b4f      	ldr	r3, [pc, #316]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800662a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800662e:	d107      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006630:	f107 0318 	add.w	r3, r7, #24
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f909 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800663e:	e0e6      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006644:	e0e3      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664a:	e0e0      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006652:	f040 808d 	bne.w	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006656:	4b42      	ldr	r3, [pc, #264]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800665e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006666:	d06b      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800666e:	d874      	bhi.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006676:	d056      	beq.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667e:	d86c      	bhi.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006686:	d03b      	beq.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800668e:	d864      	bhi.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006696:	d021      	beq.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669e:	d85c      	bhi.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d004      	beq.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ac:	d004      	beq.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80066ae:	e054      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80066b0:	f000 f8b6 	bl	8006820 <HAL_RCCEx_GetD3PCLK1Freq>
 80066b4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80066b6:	e0aa      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066b8:	4b29      	ldr	r3, [pc, #164]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066c4:	d107      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066c6:	f107 0318 	add.w	r3, r7, #24
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f8be 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066d4:	e09b      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066da:	e098      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066dc:	4b20      	ldr	r3, [pc, #128]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066e8:	d107      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ea:	f107 030c 	add.w	r3, r7, #12
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fa00 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066f8:	e089      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066fe:	e086      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006700:	4b17      	ldr	r3, [pc, #92]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d109      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	08db      	lsrs	r3, r3, #3
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	4a13      	ldr	r2, [pc, #76]	; (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800671e:	e076      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006724:	e073      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006726:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006732:	d102      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006736:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006738:	e069      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800673e:	e066      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800674c:	d102      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006752:	e05c      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006758:	e059      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800675e:	e056      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006760:	58024400 	.word	0x58024400
 8006764:	03d09000 	.word	0x03d09000
 8006768:	003d0900 	.word	0x003d0900
 800676c:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006776:	d148      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006778:	4b27      	ldr	r3, [pc, #156]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800677a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006780:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006788:	d02a      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006790:	d838      	bhi.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800679e:	d00d      	beq.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80067a0:	e030      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067a2:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ae:	d102      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80067b0:	4b1a      	ldr	r3, [pc, #104]	; (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067b4:	e02b      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ba:	e028      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c8:	d107      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fae4 	bl	8006d9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067d8:	e019      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067de:	e016      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067e0:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ec:	d107      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ee:	f107 0318 	add.w	r3, r7, #24
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f82a 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067fc:	e007      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006802:	e004      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006808:	e001      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006810:	4618      	mov	r0, r3
 8006812:	3740      	adds	r7, #64	; 0x40
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	58024400 	.word	0x58024400
 800681c:	007a1200 	.word	0x007a1200

08006820 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006824:	f7fe fc40 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 8006828:	4602      	mov	r2, r0
 800682a:	4b06      	ldr	r3, [pc, #24]	; (8006844 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	091b      	lsrs	r3, r3, #4
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	4904      	ldr	r1, [pc, #16]	; (8006848 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006836:	5ccb      	ldrb	r3, [r1, r3]
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006840:	4618      	mov	r0, r3
 8006842:	bd80      	pop	{r7, pc}
 8006844:	58024400 	.word	0x58024400
 8006848:	0800de88 	.word	0x0800de88

0800684c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800684c:	b480      	push	{r7}
 800684e:	b089      	sub	sp, #36	; 0x24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006854:	4ba1      	ldr	r3, [pc, #644]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	f003 0303 	and.w	r3, r3, #3
 800685c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800685e:	4b9f      	ldr	r3, [pc, #636]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	0b1b      	lsrs	r3, r3, #12
 8006864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006868:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800686a:	4b9c      	ldr	r3, [pc, #624]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	091b      	lsrs	r3, r3, #4
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006876:	4b99      	ldr	r3, [pc, #612]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	08db      	lsrs	r3, r3, #3
 800687c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8111 	beq.w	8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2b02      	cmp	r3, #2
 800689e:	f000 8083 	beq.w	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	f200 80a1 	bhi.w	80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d056      	beq.n	8006964 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068b6:	e099      	b.n	80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068b8:	4b88      	ldr	r3, [pc, #544]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d02d      	beq.n	8006920 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068c4:	4b85      	ldr	r3, [pc, #532]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	08db      	lsrs	r3, r3, #3
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	4a84      	ldr	r2, [pc, #528]	; (8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
 80068d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	ee07 3a90 	vmov	s15, r3
 80068dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ee:	4b7b      	ldr	r3, [pc, #492]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006902:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800690a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800691a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800691e:	e087      	b.n	8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800692e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006932:	4b6a      	ldr	r3, [pc, #424]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693a:	ee07 3a90 	vmov	s15, r3
 800693e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006942:	ed97 6a03 	vldr	s12, [r7, #12]
 8006946:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006962:	e065      	b.n	8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006976:	4b59      	ldr	r3, [pc, #356]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006986:	ed97 6a03 	vldr	s12, [r7, #12]
 800698a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800698e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800699a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069a6:	e043      	b.n	8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ba:	4b48      	ldr	r3, [pc, #288]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069ea:	e021      	b.n	8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fe:	4b37      	ldr	r3, [pc, #220]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a30:	4b2a      	ldr	r3, [pc, #168]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	0a5b      	lsrs	r3, r3, #9
 8006a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a56:	ee17 2a90 	vmov	r2, s15
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a5e:	4b1f      	ldr	r3, [pc, #124]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a84:	ee17 2a90 	vmov	r2, s15
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a8c:	4b13      	ldr	r3, [pc, #76]	; (8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	0e1b      	lsrs	r3, r3, #24
 8006a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab2:	ee17 2a90 	vmov	r2, s15
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006aba:	e008      	b.n	8006ace <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]
}
 8006ace:	bf00      	nop
 8006ad0:	3724      	adds	r7, #36	; 0x24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	58024400 	.word	0x58024400
 8006ae0:	03d09000 	.word	0x03d09000
 8006ae4:	46000000 	.word	0x46000000
 8006ae8:	4c742400 	.word	0x4c742400
 8006aec:	4a742400 	.word	0x4a742400
 8006af0:	4af42400 	.word	0x4af42400

08006af4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	; 0x24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006afc:	4ba1      	ldr	r3, [pc, #644]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006b06:	4b9f      	ldr	r3, [pc, #636]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	0d1b      	lsrs	r3, r3, #20
 8006b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b12:	4b9c      	ldr	r3, [pc, #624]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006b1e:	4b99      	ldr	r3, [pc, #612]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8111 	beq.w	8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	f000 8083 	beq.w	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	f200 80a1 	bhi.w	8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d056      	beq.n	8006c0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b5e:	e099      	b.n	8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b60:	4b88      	ldr	r3, [pc, #544]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02d      	beq.n	8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b6c:	4b85      	ldr	r3, [pc, #532]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	08db      	lsrs	r3, r3, #3
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	4a84      	ldr	r2, [pc, #528]	; (8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b7b      	ldr	r3, [pc, #492]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006baa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006bc6:	e087      	b.n	8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b6a      	ldr	r3, [pc, #424]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0a:	e065      	b.n	8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b59      	ldr	r3, [pc, #356]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c4e:	e043      	b.n	8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c62:	4b48      	ldr	r3, [pc, #288]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c92:	e021      	b.n	8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca6:	4b37      	ldr	r3, [pc, #220]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	0a5b      	lsrs	r3, r3, #9
 8006cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfe:	ee17 2a90 	vmov	r2, s15
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006d06:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2c:	ee17 2a90 	vmov	r2, s15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d34:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	0e1b      	lsrs	r3, r3, #24
 8006d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5a:	ee17 2a90 	vmov	r2, s15
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d62:	e008      	b.n	8006d76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	609a      	str	r2, [r3, #8]
}
 8006d76:	bf00      	nop
 8006d78:	3724      	adds	r7, #36	; 0x24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	58024400 	.word	0x58024400
 8006d88:	03d09000 	.word	0x03d09000
 8006d8c:	46000000 	.word	0x46000000
 8006d90:	4c742400 	.word	0x4c742400
 8006d94:	4a742400 	.word	0x4a742400
 8006d98:	4af42400 	.word	0x4af42400

08006d9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b089      	sub	sp, #36	; 0x24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006da4:	4ba0      	ldr	r3, [pc, #640]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006dae:	4b9e      	ldr	r3, [pc, #632]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	091b      	lsrs	r3, r3, #4
 8006db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006dba:	4b9b      	ldr	r3, [pc, #620]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006dc4:	4b98      	ldr	r3, [pc, #608]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	fb02 f303 	mul.w	r3, r2, r3
 8006dd4:	ee07 3a90 	vmov	s15, r3
 8006dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ddc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8111 	beq.w	800700a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	f000 8083 	beq.w	8006ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	f200 80a1 	bhi.w	8006f3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d056      	beq.n	8006eb2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006e04:	e099      	b.n	8006f3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e06:	4b88      	ldr	r3, [pc, #544]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d02d      	beq.n	8006e6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e12:	4b85      	ldr	r3, [pc, #532]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	08db      	lsrs	r3, r3, #3
 8006e18:	f003 0303 	and.w	r3, r3, #3
 8006e1c:	4a83      	ldr	r2, [pc, #524]	; (800702c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e22:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	ee07 3a90 	vmov	s15, r3
 8006e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3c:	4b7a      	ldr	r3, [pc, #488]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e50:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e68:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e6c:	e087      	b.n	8006f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e78:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007034 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e80:	4b69      	ldr	r3, [pc, #420]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e94:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eb0:	e065      	b.n	8006f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007038 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec4:	4b58      	ldr	r3, [pc, #352]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ed8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ef4:	e043      	b.n	8006f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	ee07 3a90 	vmov	s15, r3
 8006efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f00:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800703c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f08:	4b47      	ldr	r3, [pc, #284]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f10:	ee07 3a90 	vmov	s15, r3
 8006f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f1c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f38:	e021      	b.n	8006f7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	ee07 3a90 	vmov	s15, r3
 8006f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f44:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007034 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4c:	4b36      	ldr	r3, [pc, #216]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f54:	ee07 3a90 	vmov	s15, r3
 8006f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f60:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007030 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f7c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006f7e:	4b2a      	ldr	r3, [pc, #168]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	0a5b      	lsrs	r3, r3, #9
 8006f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f88:	ee07 3a90 	vmov	s15, r3
 8006f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa4:	ee17 2a90 	vmov	r2, s15
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006fac:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd2:	ee17 2a90 	vmov	r2, s15
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006fda:	4b13      	ldr	r3, [pc, #76]	; (8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fde:	0e1b      	lsrs	r3, r3, #24
 8006fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007000:	ee17 2a90 	vmov	r2, s15
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007008:	e008      	b.n	800701c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	609a      	str	r2, [r3, #8]
}
 800701c:	bf00      	nop
 800701e:	3724      	adds	r7, #36	; 0x24
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	58024400 	.word	0x58024400
 800702c:	03d09000 	.word	0x03d09000
 8007030:	46000000 	.word	0x46000000
 8007034:	4c742400 	.word	0x4c742400
 8007038:	4a742400 	.word	0x4a742400
 800703c:	4af42400 	.word	0x4af42400

08007040 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800704e:	4b53      	ldr	r3, [pc, #332]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b03      	cmp	r3, #3
 8007058:	d101      	bne.n	800705e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e099      	b.n	8007192 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800705e:	4b4f      	ldr	r3, [pc, #316]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a4e      	ldr	r2, [pc, #312]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800706a:	f7fa faa7 	bl	80015bc <HAL_GetTick>
 800706e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007070:	e008      	b.n	8007084 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007072:	f7fa faa3 	bl	80015bc <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e086      	b.n	8007192 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007084:	4b45      	ldr	r3, [pc, #276]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f0      	bne.n	8007072 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007090:	4b42      	ldr	r3, [pc, #264]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	031b      	lsls	r3, r3, #12
 800709e:	493f      	ldr	r1, [pc, #252]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	628b      	str	r3, [r1, #40]	; 0x28
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	025b      	lsls	r3, r3, #9
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	3b01      	subs	r3, #1
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070d4:	4931      	ldr	r1, [pc, #196]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80070da:	4b30      	ldr	r3, [pc, #192]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	492d      	ldr	r1, [pc, #180]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80070ec:	4b2b      	ldr	r3, [pc, #172]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	f023 0220 	bic.w	r2, r3, #32
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	4928      	ldr	r1, [pc, #160]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80070fe:	4b27      	ldr	r3, [pc, #156]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	4a26      	ldr	r2, [pc, #152]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007104:	f023 0310 	bic.w	r3, r3, #16
 8007108:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800710a:	4b24      	ldr	r3, [pc, #144]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 800710c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800710e:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <RCCEx_PLL2_Config+0x160>)
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	69d2      	ldr	r2, [r2, #28]
 8007116:	00d2      	lsls	r2, r2, #3
 8007118:	4920      	ldr	r1, [pc, #128]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 800711a:	4313      	orrs	r3, r2
 800711c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800711e:	4b1f      	ldr	r3, [pc, #124]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	4a1e      	ldr	r2, [pc, #120]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007124:	f043 0310 	orr.w	r3, r3, #16
 8007128:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007130:	4b1a      	ldr	r3, [pc, #104]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	4a19      	ldr	r2, [pc, #100]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007136:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800713a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800713c:	e00f      	b.n	800715e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d106      	bne.n	8007152 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007144:	4b15      	ldr	r3, [pc, #84]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	4a14      	ldr	r2, [pc, #80]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 800714a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800714e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007150:	e005      	b.n	800715e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007152:	4b12      	ldr	r3, [pc, #72]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	4a11      	ldr	r2, [pc, #68]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800715c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a0e      	ldr	r2, [pc, #56]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800716a:	f7fa fa27 	bl	80015bc <HAL_GetTick>
 800716e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007170:	e008      	b.n	8007184 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007172:	f7fa fa23 	bl	80015bc <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e006      	b.n	8007192 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007184:	4b05      	ldr	r3, [pc, #20]	; (800719c <RCCEx_PLL2_Config+0x15c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f0      	beq.n	8007172 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	58024400 	.word	0x58024400
 80071a0:	ffff0007 	.word	0xffff0007

080071a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071b2:	4b53      	ldr	r3, [pc, #332]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d101      	bne.n	80071c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e099      	b.n	80072f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071c2:	4b4f      	ldr	r3, [pc, #316]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a4e      	ldr	r2, [pc, #312]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80071c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ce:	f7fa f9f5 	bl	80015bc <HAL_GetTick>
 80071d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071d4:	e008      	b.n	80071e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071d6:	f7fa f9f1 	bl	80015bc <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e086      	b.n	80072f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071e8:	4b45      	ldr	r3, [pc, #276]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1f0      	bne.n	80071d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80071f4:	4b42      	ldr	r3, [pc, #264]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	051b      	lsls	r3, r3, #20
 8007202:	493f      	ldr	r1, [pc, #252]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007204:	4313      	orrs	r3, r2
 8007206:	628b      	str	r3, [r1, #40]	; 0x28
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	3b01      	subs	r3, #1
 800720e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	3b01      	subs	r3, #1
 8007218:	025b      	lsls	r3, r3, #9
 800721a:	b29b      	uxth	r3, r3
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	3b01      	subs	r3, #1
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	3b01      	subs	r3, #1
 8007232:	061b      	lsls	r3, r3, #24
 8007234:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007238:	4931      	ldr	r1, [pc, #196]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 800723a:	4313      	orrs	r3, r2
 800723c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800723e:	4b30      	ldr	r3, [pc, #192]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	492d      	ldr	r1, [pc, #180]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 800724c:	4313      	orrs	r3, r2
 800724e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007250:	4b2b      	ldr	r3, [pc, #172]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	4928      	ldr	r1, [pc, #160]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 800725e:	4313      	orrs	r3, r2
 8007260:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007262:	4b27      	ldr	r3, [pc, #156]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	4a26      	ldr	r2, [pc, #152]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800726c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800726e:	4b24      	ldr	r3, [pc, #144]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <RCCEx_PLL3_Config+0x160>)
 8007274:	4013      	ands	r3, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	69d2      	ldr	r2, [r2, #28]
 800727a:	00d2      	lsls	r2, r2, #3
 800727c:	4920      	ldr	r1, [pc, #128]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 800727e:	4313      	orrs	r3, r2
 8007280:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007282:	4b1f      	ldr	r3, [pc, #124]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007294:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	4a19      	ldr	r2, [pc, #100]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 800729a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800729e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072a0:	e00f      	b.n	80072c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d106      	bne.n	80072b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	4a14      	ldr	r2, [pc, #80]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80072ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072b4:	e005      	b.n	80072c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	4a11      	ldr	r2, [pc, #68]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80072bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a0e      	ldr	r2, [pc, #56]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80072c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ce:	f7fa f975 	bl	80015bc <HAL_GetTick>
 80072d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072d4:	e008      	b.n	80072e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80072d6:	f7fa f971 	bl	80015bc <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e006      	b.n	80072f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <RCCEx_PLL3_Config+0x15c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	58024400 	.word	0x58024400
 8007304:	ffff0007 	.word	0xffff0007

08007308 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	; 0x28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e075      	b.n	8007406 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7f9 fe1f 	bl	8000f70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2204      	movs	r2, #4
 8007336:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f868 	bl	8007410 <HAL_SD_InitCard>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e05d      	b.n	8007406 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800734a:	f107 0308 	add.w	r3, r7, #8
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fda7 	bl	8007ea4 <HAL_SD_GetCardStatus>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e052      	b.n	8007406 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007360:	7e3b      	ldrb	r3, [r7, #24]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007366:	7e7b      	ldrb	r3, [r7, #25]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	2b01      	cmp	r3, #1
 8007372:	d10a      	bne.n	800738a <HAL_SD_Init+0x82>
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <HAL_SD_Init+0x78>
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007386:	659a      	str	r2, [r3, #88]	; 0x58
 8007388:	e00b      	b.n	80073a2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	2b01      	cmp	r3, #1
 8007390:	d104      	bne.n	800739c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007398:	659a      	str	r2, [r3, #88]	; 0x58
 800739a:	e002      	b.n	80073a2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fe65 	bl	8008078 <HAL_SD_ConfigWideBusOperation>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e026      	b.n	8007406 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80073b8:	f7fa f900 	bl	80015bc <HAL_GetTick>
 80073bc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80073be:	e011      	b.n	80073e4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80073c0:	f7fa f8fc 	bl	80015bc <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d109      	bne.n	80073e4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073d6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e010      	b.n	8007406 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 ff59 	bl	800829c <HAL_SD_GetCardState>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d1e7      	bne.n	80073c0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3728      	adds	r7, #40	; 0x28
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b08d      	sub	sp, #52	; 0x34
 8007414:	af02      	add	r7, sp, #8
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007428:	2300      	movs	r3, #0
 800742a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800742c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007430:	f7fe fdd2 	bl	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007434:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	d109      	bne.n	8007450 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800744a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e06a      	b.n	8007526 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	4a36      	ldr	r2, [pc, #216]	; (8007530 <HAL_SD_InitCard+0x120>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681c      	ldr	r4, [r3, #0]
 8007462:	466a      	mov	r2, sp
 8007464:	f107 0318 	add.w	r3, r7, #24
 8007468:	e893 0003 	ldmia.w	r3, {r0, r1}
 800746c:	e882 0003 	stmia.w	r2, {r0, r1}
 8007470:	f107 030c 	add.w	r3, r7, #12
 8007474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007476:	4620      	mov	r0, r4
 8007478:	f003 fe1c 	bl	800b0b4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f003 fe5f 	bl	800b144 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007492:	4a28      	ldr	r2, [pc, #160]	; (8007534 <HAL_SD_InitCard+0x124>)
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	fbb2 f3f3 	udiv	r3, r2, r3
 800749a:	3301      	adds	r3, #1
 800749c:	4618      	mov	r0, r3
 800749e:	f7fa f899 	bl	80015d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 ffe8 	bl	8008478 <SD_PowerON>
 80074a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e02e      	b.n	8007526 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 ff07 	bl	80082dc <SD_InitCard>
 80074ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00b      	beq.n	80074ee <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e01b      	b.n	8007526 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074f6:	4618      	mov	r0, r3
 80074f8:	f003 feba 	bl	800b270 <SDMMC_CmdBlockLength>
 80074fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00f      	beq.n	8007524 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a0b      	ldr	r2, [pc, #44]	; (8007538 <HAL_SD_InitCard+0x128>)
 800750a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	372c      	adds	r7, #44	; 0x2c
 800752a:	46bd      	mov	sp, r7
 800752c:	bd90      	pop	{r4, r7, pc}
 800752e:	bf00      	nop
 8007530:	014f8b59 	.word	0x014f8b59
 8007534:	00012110 	.word	0x00012110
 8007538:	1fe00fff 	.word	0x1fe00fff

0800753c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08c      	sub	sp, #48	; 0x30
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d107      	bne.n	8007564 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007558:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e08d      	b.n	8007680 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	f040 8086 	bne.w	800767e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	441a      	add	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007582:	429a      	cmp	r2, r3
 8007584:	d907      	bls.n	8007596 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e074      	b.n	8007680 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2203      	movs	r2, #3
 800759a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	025a      	lsls	r2, r3, #9
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d002      	beq.n	80075c2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	025b      	lsls	r3, r3, #9
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075c2:	f04f 33ff 	mov.w	r3, #4294967295
 80075c6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	025b      	lsls	r3, r3, #9
 80075cc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80075ce:	2390      	movs	r3, #144	; 0x90
 80075d0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80075d2:	2302      	movs	r3, #2
 80075d4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80075da:	2300      	movs	r3, #0
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f107 0210 	add.w	r2, r7, #16
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f003 fe15 	bl	800b218 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075fc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2201      	movs	r2, #1
 800760c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d90a      	bls.n	800762a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2282      	movs	r2, #130	; 0x82
 8007618:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007620:	4618      	mov	r0, r3
 8007622:	f003 fe6b 	bl	800b2fc <SDMMC_CmdReadMultiBlock>
 8007626:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007628:	e009      	b.n	800763e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2281      	movs	r2, #129	; 0x81
 800762e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007636:	4618      	mov	r0, r3
 8007638:	f003 fe3d 	bl	800b2b6 <SDMMC_CmdReadSingleBlock>
 800763c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d012      	beq.n	800766a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a0f      	ldr	r2, [pc, #60]	; (8007688 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800764a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e00a      	b.n	8007680 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007678:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e000      	b.n	8007680 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800767e:	2302      	movs	r3, #2
  }
}
 8007680:	4618      	mov	r0, r3
 8007682:	3730      	adds	r7, #48	; 0x30
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	1fe00fff 	.word	0x1fe00fff

0800768c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08c      	sub	sp, #48	; 0x30
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d107      	bne.n	80076b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e08d      	b.n	80077d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	f040 8086 	bne.w	80077ce <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80076c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	441a      	add	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d907      	bls.n	80076e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e074      	b.n	80077d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2203      	movs	r2, #3
 80076ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2200      	movs	r2, #0
 80076f4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	025a      	lsls	r2, r3, #9
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	2b01      	cmp	r3, #1
 800770a:	d002      	beq.n	8007712 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	025b      	lsls	r3, r3, #9
 8007710:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007712:	f04f 33ff 	mov.w	r3, #4294967295
 8007716:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	025b      	lsls	r3, r3, #9
 800771c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800771e:	2390      	movs	r3, #144	; 0x90
 8007720:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007726:	2300      	movs	r3, #0
 8007728:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800772a:	2300      	movs	r3, #0
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f107 0210 	add.w	r2, r7, #16
 8007736:	4611      	mov	r1, r2
 8007738:	4618      	mov	r0, r3
 800773a:	f003 fd6d 	bl	800b218 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800774c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2201      	movs	r2, #1
 800775c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d90a      	bls.n	800777a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	22a0      	movs	r2, #160	; 0xa0
 8007768:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007770:	4618      	mov	r0, r3
 8007772:	f003 fe09 	bl	800b388 <SDMMC_CmdWriteMultiBlock>
 8007776:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007778:	e009      	b.n	800778e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2290      	movs	r2, #144	; 0x90
 800777e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007786:	4618      	mov	r0, r3
 8007788:	f003 fddb 	bl	800b342 <SDMMC_CmdWriteSingleBlock>
 800778c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d012      	beq.n	80077ba <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a0f      	ldr	r2, [pc, #60]	; (80077d8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800779a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	431a      	orrs	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e00a      	b.n	80077d0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80077c8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	e000      	b.n	80077d0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3730      	adds	r7, #48	; 0x30
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	1fe00fff 	.word	0x1fe00fff

080077dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <HAL_SD_IRQHandler+0x2e>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 f924 	bl	8008a50 <SD_Read_IT>
 8007808:	e19a      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80ac 	beq.w	8007972 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007822:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4b9d      	ldr	r3, [pc, #628]	; (8007aa4 <HAL_SD_IRQHandler+0x2c8>)
 8007830:	400b      	ands	r3, r1
 8007832:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007842:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007852:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d038      	beq.n	80078d0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <HAL_SD_IRQHandler+0x96>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d011      	beq.n	8007896 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f003 fdaa 	bl	800b3d0 <SDMMC_CmdStopTransfer>
 800787c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f959 	bl	8007b48 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a83      	ldr	r2, [pc, #524]	; (8007aa8 <HAL_SD_IRQHandler+0x2cc>)
 800789c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <HAL_SD_IRQHandler+0xe4>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f004 fa55 	bl	800bd70 <HAL_SD_RxCpltCallback>
 80078c6:	e13b      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f004 fa47 	bl	800bd5c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80078ce:	e137      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 8132 	beq.w	8007b40 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2200      	movs	r2, #0
 80078e2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2200      	movs	r2, #0
 80078ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2200      	movs	r2, #0
 80078f2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <HAL_SD_IRQHandler+0x12c>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d011      	beq.n	800792c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f003 fd5f 	bl	800b3d0 <SDMMC_CmdStopTransfer>
 8007912:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f90e 	bl	8007b48 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <HAL_SD_IRQHandler+0x172>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f004 fa04 	bl	800bd5c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <HAL_SD_IRQHandler+0x18e>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80eb 	beq.w	8007b40 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f004 fa00 	bl	800bd70 <HAL_SD_RxCpltCallback>
}
 8007970:	e0e6      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <HAL_SD_IRQHandler+0x1b6>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f003 0308 	and.w	r3, r3, #8
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f8a6 	bl	8008adc <SD_Write_IT>
 8007990:	e0d6      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007998:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 80a2 	beq.w	8007ae6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d005      	beq.n	80079bc <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b4:	f043 0202 	orr.w	r2, r3, #2
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ce:	f043 0208 	orr.w	r2, r3, #8
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e8:	f043 0220 	orr.w	r2, r3, #32
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	f003 0310 	and.w	r3, r3, #16
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d005      	beq.n	8007a0a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a02:	f043 0210 	orr.w	r2, r3, #16
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a26      	ldr	r2, [pc, #152]	; (8007aa8 <HAL_SD_IRQHandler+0x2cc>)
 8007a10:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007a20:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a30:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a40:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a50:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f003 fcba 	bl	800b3d0 <SDMMC_CmdStopTransfer>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a76:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00f      	beq.n	8007aac <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f854 	bl	8007b48 <HAL_SD_ErrorCallback>
}
 8007aa0:	e04e      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
 8007aa2:	bf00      	nop
 8007aa4:	ffff3ec5 	.word	0xffff3ec5
 8007aa8:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d044      	beq.n	8007b40 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d040      	beq.n	8007b40 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007acc:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f832 	bl	8007b48 <HAL_SD_ErrorCallback>
}
 8007ae4:	e02c      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d025      	beq.n	8007b40 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afc:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b04:	f003 0304 	and.w	r3, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10c      	bne.n	8007b26 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 f848 	bl	8008bac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007b1c:	e010      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 f830 	bl	8008b84 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007b24:	e00c      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f831 	bl	8008b98 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007b36:	e003      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f819 	bl	8008b70 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007b3e:	e7ff      	b.n	8007b40 <HAL_SD_IRQHandler+0x364>
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b6a:	0f9b      	lsrs	r3, r3, #30
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b76:	0e9b      	lsrs	r3, r3, #26
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b88:	0e1b      	lsrs	r3, r3, #24
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 0303 	and.w	r3, r3, #3
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b9a:	0c1b      	lsrs	r3, r3, #16
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba6:	0a1b      	lsrs	r3, r3, #8
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bbc:	0d1b      	lsrs	r3, r3, #20
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bda:	0bdb      	lsrs	r3, r3, #15
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bec:	0b9b      	lsrs	r3, r3, #14
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfe:	0b5b      	lsrs	r3, r3, #13
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c10:	0b1b      	lsrs	r3, r3, #12
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2200      	movs	r2, #0
 8007c22:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d163      	bne.n	8007cf4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c30:	009a      	lsls	r2, r3, #2
 8007c32:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c36:	4013      	ands	r3, r2
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007c3c:	0f92      	lsrs	r2, r2, #30
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c48:	0edb      	lsrs	r3, r3, #27
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 0307 	and.w	r3, r3, #7
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c5a:	0e1b      	lsrs	r3, r3, #24
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6c:	0d5b      	lsrs	r3, r3, #21
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c7e:	0c9b      	lsrs	r3, r3, #18
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c90:	0bdb      	lsrs	r3, r3, #15
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	7e1b      	ldrb	r3, [r3, #24]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	3302      	adds	r3, #2
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cbe:	fb02 f203 	mul.w	r2, r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	7a1b      	ldrb	r3, [r3, #8]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	409a      	lsls	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ce0:	0a52      	lsrs	r2, r2, #9
 8007ce2:	fb02 f203 	mul.w	r2, r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
 8007cf2:	e031      	b.n	8007d58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d11d      	bne.n	8007d38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d0a:	0c1b      	lsrs	r3, r3, #16
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	3301      	adds	r3, #1
 8007d18:	029a      	lsls	r2, r3, #10
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d2c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	655a      	str	r2, [r3, #84]	; 0x54
 8007d36:	e00f      	b.n	8007d58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a58      	ldr	r2, [pc, #352]	; (8007ea0 <HAL_SD_GetCardCSD+0x344>)
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e09d      	b.n	8007e94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d5c:	0b9b      	lsrs	r3, r3, #14
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6e:	09db      	lsrs	r3, r3, #7
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d90:	0fdb      	lsrs	r3, r3, #31
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9c:	0f5b      	lsrs	r3, r3, #29
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dae:	0e9b      	lsrs	r3, r3, #26
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc0:	0d9b      	lsrs	r3, r3, #22
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 030f 	and.w	r3, r3, #15
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd2:	0d5b      	lsrs	r3, r3, #21
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dee:	0c1b      	lsrs	r3, r3, #16
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e02:	0bdb      	lsrs	r3, r3, #15
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e16:	0b9b      	lsrs	r3, r3, #14
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e2a:	0b5b      	lsrs	r3, r3, #13
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e3e:	0b1b      	lsrs	r3, r3, #12
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e52:	0a9b      	lsrs	r3, r3, #10
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e66:	0a1b      	lsrs	r3, r3, #8
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	1fe00fff 	.word	0x1fe00fff

08007ea4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b094      	sub	sp, #80	; 0x50
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d101      	bne.n	8007ec4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e0a7      	b.n	8008014 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007ec4:	f107 0308 	add.w	r3, r7, #8
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fb62 	bl	8008594 <SD_SendSDStatus>
 8007ed0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d011      	beq.n	8007efc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a4f      	ldr	r2, [pc, #316]	; (800801c <HAL_SD_GetCardStatus+0x178>)
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007efa:	e070      	b.n	8007fde <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	099b      	lsrs	r3, r3, #6
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	0e1b      	lsrs	r3, r3, #24
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	061a      	lsls	r2, r3, #24
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f42:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	0a1b      	lsrs	r3, r3, #8
 8007f48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f4c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	0e1b      	lsrs	r3, r3, #24
 8007f52:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	0d1b      	lsrs	r3, r3, #20
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	0c1b      	lsrs	r3, r3, #16
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	0a9b      	lsrs	r3, r3, #10
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	0a1b      	lsrs	r3, r3, #8
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	091b      	lsrs	r3, r3, #4
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	0e1b      	lsrs	r3, r3, #24
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f003 f942 	bl	800b270 <SDMMC_CmdBlockLength>
 8007fec:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00d      	beq.n	8008010 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a08      	ldr	r2, [pc, #32]	; (800801c <HAL_SD_GetCardStatus+0x178>)
 8007ffa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008000:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008010:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008014:	4618      	mov	r0, r3
 8008016:	3750      	adds	r7, #80	; 0x50
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	1fe00fff 	.word	0x1fe00fff

08008020 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008078:	b590      	push	{r4, r7, lr}
 800807a:	b08d      	sub	sp, #52	; 0x34
 800807c:	af02      	add	r7, sp, #8
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2203      	movs	r2, #3
 8008090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008098:	2b03      	cmp	r3, #3
 800809a:	d02e      	beq.n	80080fa <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a2:	d106      	bne.n	80080b2 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	635a      	str	r2, [r3, #52]	; 0x34
 80080b0:	e029      	b.n	8008106 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080b8:	d10a      	bne.n	80080d0 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fb62 	bl	8008784 <SD_WideBus_Enable>
 80080c0:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	635a      	str	r2, [r3, #52]	; 0x34
 80080ce:	e01a      	b.n	8008106 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10a      	bne.n	80080ec <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fb9f 	bl	800881a <SD_WideBus_Disable>
 80080dc:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	431a      	orrs	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	635a      	str	r2, [r3, #52]	; 0x34
 80080ea:	e00c      	b.n	8008106 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	635a      	str	r2, [r3, #52]	; 0x34
 80080f8:	e005      	b.n	8008106 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a5e      	ldr	r2, [pc, #376]	; (800828c <HAL_SD_ConfigWideBusOperation+0x214>)
 8008114:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800811c:	e094      	b.n	8008248 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800811e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008122:	f7fd ff59 	bl	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008126:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8083 	beq.w	8008236 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	695a      	ldr	r2, [r3, #20]
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	4950      	ldr	r1, [pc, #320]	; (8008290 <HAL_SD_ConfigWideBusOperation+0x218>)
 800814e:	fba1 1303 	umull	r1, r3, r1, r3
 8008152:	0e1b      	lsrs	r3, r3, #24
 8008154:	429a      	cmp	r2, r3
 8008156:	d303      	bcc.n	8008160 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	e05a      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008168:	d103      	bne.n	8008172 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	61bb      	str	r3, [r7, #24]
 8008170:	e051      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817a:	d126      	bne.n	80081ca <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10e      	bne.n	80081a2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	4a43      	ldr	r2, [pc, #268]	; (8008294 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d906      	bls.n	800819a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	4a40      	ldr	r2, [pc, #256]	; (8008290 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008190:	fba2 2303 	umull	r2, r3, r2, r3
 8008194:	0e5b      	lsrs	r3, r3, #25
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e03d      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	e039      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	6a3a      	ldr	r2, [r7, #32]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	4a39      	ldr	r2, [pc, #228]	; (8008294 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d906      	bls.n	80081c2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	4a36      	ldr	r2, [pc, #216]	; (8008290 <HAL_SD_ConfigWideBusOperation+0x218>)
 80081b8:	fba2 2303 	umull	r2, r3, r2, r3
 80081bc:	0e5b      	lsrs	r3, r3, #25
 80081be:	61bb      	str	r3, [r7, #24]
 80081c0:	e029      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	61bb      	str	r3, [r7, #24]
 80081c8:	e025      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10e      	bne.n	80081f0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	4a30      	ldr	r2, [pc, #192]	; (8008298 <HAL_SD_ConfigWideBusOperation+0x220>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d906      	bls.n	80081e8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	4a2c      	ldr	r2, [pc, #176]	; (8008290 <HAL_SD_ConfigWideBusOperation+0x218>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	0e1b      	lsrs	r3, r3, #24
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	e016      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	61bb      	str	r3, [r7, #24]
 80081ee:	e012      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	6a3a      	ldr	r2, [r7, #32]
 80081f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fc:	4a26      	ldr	r2, [pc, #152]	; (8008298 <HAL_SD_ConfigWideBusOperation+0x220>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d906      	bls.n	8008210 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	4a22      	ldr	r2, [pc, #136]	; (8008290 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	0e1b      	lsrs	r3, r3, #24
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	e002      	b.n	8008216 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681c      	ldr	r4, [r3, #0]
 800821a:	466a      	mov	r2, sp
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008224:	e882 0003 	stmia.w	r2, {r0, r1}
 8008228:	f107 0308 	add.w	r3, r7, #8
 800822c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800822e:	4620      	mov	r0, r4
 8008230:	f002 ff40 	bl	800b0b4 <SDMMC_Init>
 8008234:	e008      	b.n	8008248 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008250:	4618      	mov	r0, r3
 8008252:	f003 f80d 	bl	800b270 <SDMMC_CmdBlockLength>
 8008256:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00c      	beq.n	8008278 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a0a      	ldr	r2, [pc, #40]	; (800828c <HAL_SD_ConfigWideBusOperation+0x214>)
 8008264:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008284:	4618      	mov	r0, r3
 8008286:	372c      	adds	r7, #44	; 0x2c
 8008288:	46bd      	mov	sp, r7
 800828a:	bd90      	pop	{r4, r7, pc}
 800828c:	1fe00fff 	.word	0x1fe00fff
 8008290:	55e63b89 	.word	0x55e63b89
 8008294:	02faf080 	.word	0x02faf080
 8008298:	017d7840 	.word	0x017d7840

0800829c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80082a8:	f107 030c 	add.w	r3, r7, #12
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa40 	bl	8008734 <SD_SendStatus>
 80082b4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	0a5b      	lsrs	r3, r3, #9
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80082d2:	693b      	ldr	r3, [r7, #16]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b090      	sub	sp, #64	; 0x40
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80082e8:	f7f9 f968 	bl	80015bc <HAL_GetTick>
 80082ec:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f002 ff37 	bl	800b166 <SDMMC_GetPowerState>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008302:	e0b5      	b.n	8008470 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	2b03      	cmp	r3, #3
 800830a:	d02e      	beq.n	800836a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4618      	mov	r0, r3
 8008312:	f003 f982 	bl	800b61a <SDMMC_CmdSendCID>
 8008316:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <SD_InitCard+0x46>
    {
      return errorstate;
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	e0a6      	b.n	8008470 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2100      	movs	r1, #0
 8008328:	4618      	mov	r0, r3
 800832a:	f002 ff62 	bl	800b1f2 <SDMMC_GetResponse>
 800832e:	4602      	mov	r2, r0
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2104      	movs	r1, #4
 800833a:	4618      	mov	r0, r3
 800833c:	f002 ff59 	bl	800b1f2 <SDMMC_GetResponse>
 8008340:	4602      	mov	r2, r0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2108      	movs	r1, #8
 800834c:	4618      	mov	r0, r3
 800834e:	f002 ff50 	bl	800b1f2 <SDMMC_GetResponse>
 8008352:	4602      	mov	r2, r0
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	210c      	movs	r1, #12
 800835e:	4618      	mov	r0, r3
 8008360:	f002 ff47 	bl	800b1f2 <SDMMC_GetResponse>
 8008364:	4602      	mov	r2, r0
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	2b03      	cmp	r3, #3
 8008370:	d01d      	beq.n	80083ae <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008372:	e019      	b.n	80083a8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f107 020a 	add.w	r2, r7, #10
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f003 f98a 	bl	800b698 <SDMMC_CmdSetRelAdd>
 8008384:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <SD_InitCard+0xb4>
      {
        return errorstate;
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	e06f      	b.n	8008470 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008390:	f7f9 f914 	bl	80015bc <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	f241 3287 	movw	r2, #4999	; 0x1387
 800839e:	4293      	cmp	r3, r2
 80083a0:	d902      	bls.n	80083a8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80083a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083a6:	e063      	b.n	8008470 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80083a8:	897b      	ldrh	r3, [r7, #10]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0e2      	beq.n	8008374 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d036      	beq.n	8008424 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80083b6:	897b      	ldrh	r3, [r7, #10]
 80083b8:	461a      	mov	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f003 f944 	bl	800b658 <SDMMC_CmdSendCSD>
 80083d0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <SD_InitCard+0x100>
    {
      return errorstate;
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	e049      	b.n	8008470 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f002 ff05 	bl	800b1f2 <SDMMC_GetResponse>
 80083e8:	4602      	mov	r2, r0
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2104      	movs	r1, #4
 80083f4:	4618      	mov	r0, r3
 80083f6:	f002 fefc 	bl	800b1f2 <SDMMC_GetResponse>
 80083fa:	4602      	mov	r2, r0
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2108      	movs	r1, #8
 8008406:	4618      	mov	r0, r3
 8008408:	f002 fef3 	bl	800b1f2 <SDMMC_GetResponse>
 800840c:	4602      	mov	r2, r0
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	210c      	movs	r1, #12
 8008418:	4618      	mov	r0, r3
 800841a:	f002 feea 	bl	800b1f2 <SDMMC_GetResponse>
 800841e:	4602      	mov	r2, r0
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2104      	movs	r1, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f002 fee1 	bl	800b1f2 <SDMMC_GetResponse>
 8008430:	4603      	mov	r3, r0
 8008432:	0d1a      	lsrs	r2, r3, #20
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008438:	f107 030c 	add.w	r3, r7, #12
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff fb8c 	bl	8007b5c <HAL_SD_GetCardCSD>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800844a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800844e:	e00f      	b.n	8008470 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008458:	041b      	lsls	r3, r3, #16
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f002 fff3 	bl	800b448 <SDMMC_CmdSelDesel>
 8008462:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <SD_InitCard+0x192>
  {
    return errorstate;
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	e000      	b.n	8008470 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3740      	adds	r7, #64	; 0x40
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f002 fffc 	bl	800b48e <SDMMC_CmdGoIdleState>
 8008496:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	e072      	b.n	8008588 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f003 f80f 	bl	800b4ca <SDMMC_CmdOperCond>
 80084ac:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084b4:	d10d      	bne.n	80084d2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f002 ffe4 	bl	800b48e <SDMMC_CmdGoIdleState>
 80084c6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d004      	beq.n	80084d8 <SD_PowerON+0x60>
    {
      return errorstate;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	e05a      	b.n	8008588 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d137      	bne.n	8008550 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2100      	movs	r1, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f003 f80f 	bl	800b50a <SDMMC_CmdAppCommand>
 80084ec:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d02d      	beq.n	8008550 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084f8:	e046      	b.n	8008588 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2100      	movs	r1, #0
 8008500:	4618      	mov	r0, r3
 8008502:	f003 f802 	bl	800b50a <SDMMC_CmdAppCommand>
 8008506:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <SD_PowerON+0x9a>
    {
      return errorstate;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	e03a      	b.n	8008588 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	491e      	ldr	r1, [pc, #120]	; (8008590 <SD_PowerON+0x118>)
 8008518:	4618      	mov	r0, r3
 800851a:	f003 f819 	bl	800b550 <SDMMC_CmdAppOperCommand>
 800851e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008526:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800852a:	e02d      	b.n	8008588 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2100      	movs	r1, #0
 8008532:	4618      	mov	r0, r3
 8008534:	f002 fe5d 	bl	800b1f2 <SDMMC_GetResponse>
 8008538:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	0fdb      	lsrs	r3, r3, #31
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <SD_PowerON+0xce>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <SD_PowerON+0xd0>
 8008546:	2300      	movs	r3, #0
 8008548:	613b      	str	r3, [r7, #16]

    count++;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3301      	adds	r3, #1
 800854e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008556:	4293      	cmp	r3, r2
 8008558:	d802      	bhi.n	8008560 <SD_PowerON+0xe8>
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0cc      	beq.n	80084fa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008566:	4293      	cmp	r3, r2
 8008568:	d902      	bls.n	8008570 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800856a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800856e:	e00b      	b.n	8008588 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	c1100000 	.word	0xc1100000

08008594 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08c      	sub	sp, #48	; 0x30
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800859e:	f7f9 f80d 	bl	80015bc <HAL_GetTick>
 80085a2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f002 fe1f 	bl	800b1f2 <SDMMC_GetResponse>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085be:	d102      	bne.n	80085c6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80085c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085c4:	e0b0      	b.n	8008728 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2140      	movs	r1, #64	; 0x40
 80085cc:	4618      	mov	r0, r3
 80085ce:	f002 fe4f 	bl	800b270 <SDMMC_CmdBlockLength>
 80085d2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	e0a0      	b.n	8008728 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	041b      	lsls	r3, r3, #16
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f002 ff89 	bl	800b50a <SDMMC_CmdAppCommand>
 80085f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	e08d      	b.n	8008728 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800860c:	f04f 33ff 	mov.w	r3, #4294967295
 8008610:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008612:	2340      	movs	r3, #64	; 0x40
 8008614:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008616:	2360      	movs	r3, #96	; 0x60
 8008618:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800861a:	2302      	movs	r3, #2
 800861c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008622:	2301      	movs	r3, #1
 8008624:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f107 0208 	add.w	r2, r7, #8
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f002 fdf1 	bl	800b218 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f003 f871 	bl	800b722 <SDMMC_CmdStatusRegister>
 8008640:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02b      	beq.n	80086a0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	e069      	b.n	8008728 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d013      	beq.n	800868a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008662:	2300      	movs	r3, #0
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008666:	e00d      	b.n	8008684 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f002 fd4b 	bl	800b108 <SDMMC_ReadFIFO>
 8008672:	4602      	mov	r2, r0
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	601a      	str	r2, [r3, #0]
        pData++;
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	3304      	adds	r3, #4
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	3301      	adds	r3, #1
 8008682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	2b07      	cmp	r3, #7
 8008688:	d9ee      	bls.n	8008668 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800868a:	f7f8 ff97 	bl	80015bc <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008698:	d102      	bne.n	80086a0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800869a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800869e:	e043      	b.n	8008728 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0d2      	beq.n	8008654 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80086bc:	2308      	movs	r3, #8
 80086be:	e033      	b.n	8008728 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80086ce:	2302      	movs	r3, #2
 80086d0:	e02a      	b.n	8008728 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d017      	beq.n	8008710 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80086e0:	2320      	movs	r3, #32
 80086e2:	e021      	b.n	8008728 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f002 fd0d 	bl	800b108 <SDMMC_ReadFIFO>
 80086ee:	4602      	mov	r2, r0
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	601a      	str	r2, [r3, #0]
    pData++;
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	3304      	adds	r3, #4
 80086f8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80086fa:	f7f8 ff5f 	bl	80015bc <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008708:	d102      	bne.n	8008710 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800870a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800870e:	e00b      	b.n	8008728 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e2      	bne.n	80086e4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a03      	ldr	r2, [pc, #12]	; (8008730 <SD_SendSDStatus+0x19c>)
 8008724:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3730      	adds	r7, #48	; 0x30
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	18000f3a 	.word	0x18000f3a

08008734 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008748:	e018      	b.n	800877c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008752:	041b      	lsls	r3, r3, #16
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f002 ffc0 	bl	800b6dc <SDMMC_CmdSendStatus>
 800875c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	e009      	b.n	800877c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2100      	movs	r1, #0
 800876e:	4618      	mov	r0, r3
 8008770:	f002 fd3f 	bl	800b1f2 <SDMMC_GetResponse>
 8008774:	4602      	mov	r2, r0
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	2300      	movs	r3, #0
 8008792:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2100      	movs	r1, #0
 800879a:	4618      	mov	r0, r3
 800879c:	f002 fd29 	bl	800b1f2 <SDMMC_GetResponse>
 80087a0:	4603      	mov	r3, r0
 80087a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087aa:	d102      	bne.n	80087b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087b0:	e02f      	b.n	8008812 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087b2:	f107 030c 	add.w	r3, r7, #12
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f879 	bl	80088b0 <SD_FindSCR>
 80087be:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	e023      	b.n	8008812 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01c      	beq.n	800880e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	4619      	mov	r1, r3
 80087e0:	4610      	mov	r0, r2
 80087e2:	f002 fe92 	bl	800b50a <SDMMC_CmdAppCommand>
 80087e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	e00f      	b.n	8008812 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2102      	movs	r1, #2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f002 fec9 	bl	800b590 <SDMMC_CmdBusWidth>
 80087fe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	e003      	b.n	8008812 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800880a:	2300      	movs	r3, #0
 800880c:	e001      	b.n	8008812 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800880e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2100      	movs	r1, #0
 8008830:	4618      	mov	r0, r3
 8008832:	f002 fcde 	bl	800b1f2 <SDMMC_GetResponse>
 8008836:	4603      	mov	r3, r0
 8008838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800883c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008840:	d102      	bne.n	8008848 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008846:	e02f      	b.n	80088a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008848:	f107 030c 	add.w	r3, r7, #12
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f82e 	bl	80088b0 <SD_FindSCR>
 8008854:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	e023      	b.n	80088a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d01c      	beq.n	80088a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008872:	041b      	lsls	r3, r3, #16
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f002 fe47 	bl	800b50a <SDMMC_CmdAppCommand>
 800887c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	e00f      	b.n	80088a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f002 fe7e 	bl	800b590 <SDMMC_CmdBusWidth>
 8008894:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	e003      	b.n	80088a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088a0:	2300      	movs	r3, #0
 80088a2:	e001      	b.n	80088a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08e      	sub	sp, #56	; 0x38
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ba:	f7f8 fe7f 	bl	80015bc <HAL_GetTick>
 80088be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80088c4:	2300      	movs	r3, #0
 80088c6:	60bb      	str	r3, [r7, #8]
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2108      	movs	r1, #8
 80088d6:	4618      	mov	r0, r3
 80088d8:	f002 fcca 	bl	800b270 <SDMMC_CmdBlockLength>
 80088dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	e0ad      	b.n	8008a44 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f0:	041b      	lsls	r3, r3, #16
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f002 fe08 	bl	800b50a <SDMMC_CmdAppCommand>
 80088fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	e09e      	b.n	8008a44 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008906:	f04f 33ff 	mov.w	r3, #4294967295
 800890a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800890c:	2308      	movs	r3, #8
 800890e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008910:	2330      	movs	r3, #48	; 0x30
 8008912:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008914:	2302      	movs	r3, #2
 8008916:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008918:	2300      	movs	r3, #0
 800891a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800891c:	2301      	movs	r3, #1
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f107 0210 	add.w	r2, r7, #16
 8008928:	4611      	mov	r1, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f002 fc74 	bl	800b218 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4618      	mov	r0, r3
 8008936:	f002 fe4e 	bl	800b5d6 <SDMMC_CmdSendSCR>
 800893a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d027      	beq.n	8008992 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	e07e      	b.n	8008a44 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d113      	bne.n	800897c <SD_FindSCR+0xcc>
 8008954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008956:	2b00      	cmp	r3, #0
 8008958:	d110      	bne.n	800897c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f002 fbd2 	bl	800b108 <SDMMC_ReadFIFO>
 8008964:	4603      	mov	r3, r0
 8008966:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4618      	mov	r0, r3
 800896e:	f002 fbcb 	bl	800b108 <SDMMC_ReadFIFO>
 8008972:	4603      	mov	r3, r0
 8008974:	60fb      	str	r3, [r7, #12]
      index++;
 8008976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008978:	3301      	adds	r3, #1
 800897a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800897c:	f7f8 fe1e 	bl	80015bc <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898a:	d102      	bne.n	8008992 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800898c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008990:	e058      	b.n	8008a44 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008998:	f240 532a 	movw	r3, #1322	; 0x52a
 800899c:	4013      	ands	r3, r2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0d1      	beq.n	8008946 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2208      	movs	r2, #8
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089b8:	2308      	movs	r3, #8
 80089ba:	e043      	b.n	8008a44 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2202      	movs	r2, #2
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089d2:	2302      	movs	r3, #2
 80089d4:	e036      	b.n	8008a44 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2220      	movs	r2, #32
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80089ec:	2320      	movs	r3, #32
 80089ee:	e029      	b.n	8008a44 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a15      	ldr	r2, [pc, #84]	; (8008a4c <SD_FindSCR+0x19c>)
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	061a      	lsls	r2, r3, #24
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a04:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	0a1b      	lsrs	r3, r3, #8
 8008a0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008a0e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	0e1b      	lsrs	r3, r3, #24
 8008a14:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	601a      	str	r2, [r3, #0]
    scr++;
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	061a      	lsls	r2, r3, #24
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	021b      	lsls	r3, r3, #8
 8008a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a2c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	0a1b      	lsrs	r3, r3, #8
 8008a32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008a36:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	0e1b      	lsrs	r3, r3, #24
 8008a3c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3738      	adds	r7, #56	; 0x38
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	18000f3a 	.word	0x18000f3a

08008a50 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a62:	2b1f      	cmp	r3, #31
 8008a64:	d936      	bls.n	8008ad4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	e027      	b.n	8008abc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f002 fb49 	bl	800b108 <SDMMC_ReadFIFO>
 8008a76:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	3301      	adds	r3, #1
 8008a84:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	3301      	adds	r3, #1
 8008a94:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	0c1b      	lsrs	r3, r3, #16
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	0e1b      	lsrs	r3, r3, #24
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b07      	cmp	r3, #7
 8008ac0:	d9d4      	bls.n	8008a6c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	f1a3 0220 	sub.w	r2, r3, #32
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	2b1f      	cmp	r3, #31
 8008af0:	d93a      	bls.n	8008b68 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]
 8008af6:	e02b      	b.n	8008b50 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	3301      	adds	r3, #1
 8008b02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	021a      	lsls	r2, r3, #8
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	3301      	adds	r3, #1
 8008b14:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	041a      	lsls	r2, r3, #16
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3301      	adds	r3, #1
 8008b26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	061a      	lsls	r2, r3, #24
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	3301      	adds	r3, #1
 8008b38:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f107 020c 	add.w	r2, r7, #12
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f002 faec 	bl	800b122 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b07      	cmp	r3, #7
 8008b54:	d9d0      	bls.n	8008af8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f1a3 0220 	sub.w	r2, r3, #32
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	621a      	str	r2, [r3, #32]
  }
}
 8008b68:	bf00      	nop
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e049      	b.n	8008c66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f841 	bl	8008c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f000 fc96 	bl	8009530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
	...

08008c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d001      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e05e      	b.n	8008d5a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a2b      	ldr	r2, [pc, #172]	; (8008d68 <HAL_TIM_Base_Start_IT+0xe4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d02c      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cc6:	d027      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a27      	ldr	r2, [pc, #156]	; (8008d6c <HAL_TIM_Base_Start_IT+0xe8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d022      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a26      	ldr	r2, [pc, #152]	; (8008d70 <HAL_TIM_Base_Start_IT+0xec>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d01d      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a24      	ldr	r2, [pc, #144]	; (8008d74 <HAL_TIM_Base_Start_IT+0xf0>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d018      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a23      	ldr	r2, [pc, #140]	; (8008d78 <HAL_TIM_Base_Start_IT+0xf4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a21      	ldr	r2, [pc, #132]	; (8008d7c <HAL_TIM_Base_Start_IT+0xf8>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00e      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a20      	ldr	r2, [pc, #128]	; (8008d80 <HAL_TIM_Base_Start_IT+0xfc>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d009      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a1e      	ldr	r2, [pc, #120]	; (8008d84 <HAL_TIM_Base_Start_IT+0x100>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d004      	beq.n	8008d18 <HAL_TIM_Base_Start_IT+0x94>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a1d      	ldr	r2, [pc, #116]	; (8008d88 <HAL_TIM_Base_Start_IT+0x104>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d115      	bne.n	8008d44 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <HAL_TIM_Base_Start_IT+0x108>)
 8008d20:	4013      	ands	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b06      	cmp	r3, #6
 8008d28:	d015      	beq.n	8008d56 <HAL_TIM_Base_Start_IT+0xd2>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d30:	d011      	beq.n	8008d56 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f042 0201 	orr.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d42:	e008      	b.n	8008d56 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0201 	orr.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e000      	b.n	8008d58 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	40000400 	.word	0x40000400
 8008d70:	40000800 	.word	0x40000800
 8008d74:	40000c00 	.word	0x40000c00
 8008d78:	40010400 	.word	0x40010400
 8008d7c:	40001800 	.word	0x40001800
 8008d80:	40014000 	.word	0x40014000
 8008d84:	4000e000 	.word	0x4000e000
 8008d88:	4000e400 	.word	0x4000e400
 8008d8c:	00010007 	.word	0x00010007

08008d90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e049      	b.n	8008e36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7f8 f97e 	bl	80010b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f000 fbae 	bl	8009530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d109      	bne.n	8008e64 <HAL_TIM_PWM_Start+0x24>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	bf14      	ite	ne
 8008e5c:	2301      	movne	r3, #1
 8008e5e:	2300      	moveq	r3, #0
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	e03c      	b.n	8008ede <HAL_TIM_PWM_Start+0x9e>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d109      	bne.n	8008e7e <HAL_TIM_PWM_Start+0x3e>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	bf14      	ite	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	2300      	moveq	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	e02f      	b.n	8008ede <HAL_TIM_PWM_Start+0x9e>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d109      	bne.n	8008e98 <HAL_TIM_PWM_Start+0x58>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	bf14      	ite	ne
 8008e90:	2301      	movne	r3, #1
 8008e92:	2300      	moveq	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	e022      	b.n	8008ede <HAL_TIM_PWM_Start+0x9e>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b0c      	cmp	r3, #12
 8008e9c:	d109      	bne.n	8008eb2 <HAL_TIM_PWM_Start+0x72>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	bf14      	ite	ne
 8008eaa:	2301      	movne	r3, #1
 8008eac:	2300      	moveq	r3, #0
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	e015      	b.n	8008ede <HAL_TIM_PWM_Start+0x9e>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b10      	cmp	r3, #16
 8008eb6:	d109      	bne.n	8008ecc <HAL_TIM_PWM_Start+0x8c>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	bf14      	ite	ne
 8008ec4:	2301      	movne	r3, #1
 8008ec6:	2300      	moveq	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	e008      	b.n	8008ede <HAL_TIM_PWM_Start+0x9e>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	bf14      	ite	ne
 8008ed8:	2301      	movne	r3, #1
 8008eda:	2300      	moveq	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e0ab      	b.n	800903e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <HAL_TIM_PWM_Start+0xb6>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ef4:	e023      	b.n	8008f3e <HAL_TIM_PWM_Start+0xfe>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d104      	bne.n	8008f06 <HAL_TIM_PWM_Start+0xc6>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f04:	e01b      	b.n	8008f3e <HAL_TIM_PWM_Start+0xfe>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d104      	bne.n	8008f16 <HAL_TIM_PWM_Start+0xd6>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f14:	e013      	b.n	8008f3e <HAL_TIM_PWM_Start+0xfe>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b0c      	cmp	r3, #12
 8008f1a:	d104      	bne.n	8008f26 <HAL_TIM_PWM_Start+0xe6>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f24:	e00b      	b.n	8008f3e <HAL_TIM_PWM_Start+0xfe>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b10      	cmp	r3, #16
 8008f2a:	d104      	bne.n	8008f36 <HAL_TIM_PWM_Start+0xf6>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f34:	e003      	b.n	8008f3e <HAL_TIM_PWM_Start+0xfe>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2201      	movs	r2, #1
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fe6e 	bl	8009c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a3d      	ldr	r2, [pc, #244]	; (8009048 <HAL_TIM_PWM_Start+0x208>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d013      	beq.n	8008f7e <HAL_TIM_PWM_Start+0x13e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a3c      	ldr	r2, [pc, #240]	; (800904c <HAL_TIM_PWM_Start+0x20c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00e      	beq.n	8008f7e <HAL_TIM_PWM_Start+0x13e>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a3a      	ldr	r2, [pc, #232]	; (8009050 <HAL_TIM_PWM_Start+0x210>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d009      	beq.n	8008f7e <HAL_TIM_PWM_Start+0x13e>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a39      	ldr	r2, [pc, #228]	; (8009054 <HAL_TIM_PWM_Start+0x214>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d004      	beq.n	8008f7e <HAL_TIM_PWM_Start+0x13e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a37      	ldr	r2, [pc, #220]	; (8009058 <HAL_TIM_PWM_Start+0x218>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d101      	bne.n	8008f82 <HAL_TIM_PWM_Start+0x142>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <HAL_TIM_PWM_Start+0x144>
 8008f82:	2300      	movs	r3, #0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d007      	beq.n	8008f98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a2a      	ldr	r2, [pc, #168]	; (8009048 <HAL_TIM_PWM_Start+0x208>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d02c      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008faa:	d027      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a2a      	ldr	r2, [pc, #168]	; (800905c <HAL_TIM_PWM_Start+0x21c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d022      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a29      	ldr	r2, [pc, #164]	; (8009060 <HAL_TIM_PWM_Start+0x220>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d01d      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a27      	ldr	r2, [pc, #156]	; (8009064 <HAL_TIM_PWM_Start+0x224>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d018      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a1f      	ldr	r2, [pc, #124]	; (800904c <HAL_TIM_PWM_Start+0x20c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d013      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a23      	ldr	r2, [pc, #140]	; (8009068 <HAL_TIM_PWM_Start+0x228>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00e      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a1b      	ldr	r2, [pc, #108]	; (8009050 <HAL_TIM_PWM_Start+0x210>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d009      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a1f      	ldr	r2, [pc, #124]	; (800906c <HAL_TIM_PWM_Start+0x22c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d004      	beq.n	8008ffc <HAL_TIM_PWM_Start+0x1bc>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a1e      	ldr	r2, [pc, #120]	; (8009070 <HAL_TIM_PWM_Start+0x230>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d115      	bne.n	8009028 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689a      	ldr	r2, [r3, #8]
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <HAL_TIM_PWM_Start+0x234>)
 8009004:	4013      	ands	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b06      	cmp	r3, #6
 800900c:	d015      	beq.n	800903a <HAL_TIM_PWM_Start+0x1fa>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009014:	d011      	beq.n	800903a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0201 	orr.w	r2, r2, #1
 8009024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009026:	e008      	b.n	800903a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 0201 	orr.w	r2, r2, #1
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	e000      	b.n	800903c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	40010000 	.word	0x40010000
 800904c:	40010400 	.word	0x40010400
 8009050:	40014000 	.word	0x40014000
 8009054:	40014400 	.word	0x40014400
 8009058:	40014800 	.word	0x40014800
 800905c:	40000400 	.word	0x40000400
 8009060:	40000800 	.word	0x40000800
 8009064:	40000c00 	.word	0x40000c00
 8009068:	40001800 	.word	0x40001800
 800906c:	4000e000 	.word	0x4000e000
 8009070:	4000e400 	.word	0x4000e400
 8009074:	00010007 	.word	0x00010007

08009078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b02      	cmp	r3, #2
 800908c:	d122      	bne.n	80090d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b02      	cmp	r3, #2
 800909a:	d11b      	bne.n	80090d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f06f 0202 	mvn.w	r2, #2
 80090a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa1a 	bl	80094f4 <HAL_TIM_IC_CaptureCallback>
 80090c0:	e005      	b.n	80090ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa0c 	bl	80094e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fa1d 	bl	8009508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	f003 0304 	and.w	r3, r3, #4
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d122      	bne.n	8009128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d11b      	bne.n	8009128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f06f 0204 	mvn.w	r2, #4
 80090f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2202      	movs	r2, #2
 80090fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9f0 	bl	80094f4 <HAL_TIM_IC_CaptureCallback>
 8009114:	e005      	b.n	8009122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9e2 	bl	80094e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f9f3 	bl	8009508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f003 0308 	and.w	r3, r3, #8
 8009132:	2b08      	cmp	r3, #8
 8009134:	d122      	bne.n	800917c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b08      	cmp	r3, #8
 8009142:	d11b      	bne.n	800917c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f06f 0208 	mvn.w	r2, #8
 800914c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2204      	movs	r2, #4
 8009152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9c6 	bl	80094f4 <HAL_TIM_IC_CaptureCallback>
 8009168:	e005      	b.n	8009176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f9b8 	bl	80094e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f9c9 	bl	8009508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f003 0310 	and.w	r3, r3, #16
 8009186:	2b10      	cmp	r3, #16
 8009188:	d122      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b10      	cmp	r3, #16
 8009196:	d11b      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f06f 0210 	mvn.w	r2, #16
 80091a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2208      	movs	r2, #8
 80091a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f99c 	bl	80094f4 <HAL_TIM_IC_CaptureCallback>
 80091bc:	e005      	b.n	80091ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f98e 	bl	80094e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f99f 	bl	8009508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d10e      	bne.n	80091fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d107      	bne.n	80091fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f06f 0201 	mvn.w	r2, #1
 80091f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7f7 fda2 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009206:	2b80      	cmp	r3, #128	; 0x80
 8009208:	d10e      	bne.n	8009228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009214:	2b80      	cmp	r3, #128	; 0x80
 8009216:	d107      	bne.n	8009228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fdcc 	bl	8009dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009236:	d10e      	bne.n	8009256 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009242:	2b80      	cmp	r3, #128	; 0x80
 8009244:	d107      	bne.n	8009256 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800924e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fdbf 	bl	8009dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009260:	2b40      	cmp	r3, #64	; 0x40
 8009262:	d10e      	bne.n	8009282 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926e:	2b40      	cmp	r3, #64	; 0x40
 8009270:	d107      	bne.n	8009282 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800927a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f94d 	bl	800951c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b20      	cmp	r3, #32
 800928e:	d10e      	bne.n	80092ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b20      	cmp	r3, #32
 800929c:	d107      	bne.n	80092ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f06f 0220 	mvn.w	r2, #32
 80092a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fd7f 	bl	8009dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092d2:	2302      	movs	r3, #2
 80092d4:	e0ff      	b.n	80094d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b14      	cmp	r3, #20
 80092e2:	f200 80f0 	bhi.w	80094c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092e6:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	08009341 	.word	0x08009341
 80092f0:	080094c7 	.word	0x080094c7
 80092f4:	080094c7 	.word	0x080094c7
 80092f8:	080094c7 	.word	0x080094c7
 80092fc:	08009381 	.word	0x08009381
 8009300:	080094c7 	.word	0x080094c7
 8009304:	080094c7 	.word	0x080094c7
 8009308:	080094c7 	.word	0x080094c7
 800930c:	080093c3 	.word	0x080093c3
 8009310:	080094c7 	.word	0x080094c7
 8009314:	080094c7 	.word	0x080094c7
 8009318:	080094c7 	.word	0x080094c7
 800931c:	08009403 	.word	0x08009403
 8009320:	080094c7 	.word	0x080094c7
 8009324:	080094c7 	.word	0x080094c7
 8009328:	080094c7 	.word	0x080094c7
 800932c:	08009445 	.word	0x08009445
 8009330:	080094c7 	.word	0x080094c7
 8009334:	080094c7 	.word	0x080094c7
 8009338:	080094c7 	.word	0x080094c7
 800933c:	08009485 	.word	0x08009485
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f998 	bl	800967c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699a      	ldr	r2, [r3, #24]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0208 	orr.w	r2, r2, #8
 800935a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 0204 	bic.w	r2, r2, #4
 800936a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6999      	ldr	r1, [r3, #24]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	691a      	ldr	r2, [r3, #16]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	619a      	str	r2, [r3, #24]
      break;
 800937e:	e0a5      	b.n	80094cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68b9      	ldr	r1, [r7, #8]
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fa08 	bl	800979c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800939a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699a      	ldr	r2, [r3, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6999      	ldr	r1, [r3, #24]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	021a      	lsls	r2, r3, #8
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	619a      	str	r2, [r3, #24]
      break;
 80093c0:	e084      	b.n	80094cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fa71 	bl	80098b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69da      	ldr	r2, [r3, #28]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0208 	orr.w	r2, r2, #8
 80093dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69da      	ldr	r2, [r3, #28]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0204 	bic.w	r2, r2, #4
 80093ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69d9      	ldr	r1, [r3, #28]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	61da      	str	r2, [r3, #28]
      break;
 8009400:	e064      	b.n	80094cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fad9 	bl	80099c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800941c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69da      	ldr	r2, [r3, #28]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800942c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69d9      	ldr	r1, [r3, #28]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	021a      	lsls	r2, r3, #8
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	61da      	str	r2, [r3, #28]
      break;
 8009442:	e043      	b.n	80094cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fb22 	bl	8009a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0208 	orr.w	r2, r2, #8
 800945e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0204 	bic.w	r2, r2, #4
 800946e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009482:	e023      	b.n	80094cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68b9      	ldr	r1, [r7, #8]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fb66 	bl	8009b5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800949e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	021a      	lsls	r2, r3, #8
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094c4:	e002      	b.n	80094cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop

080094e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a44      	ldr	r2, [pc, #272]	; (8009654 <TIM_Base_SetConfig+0x124>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d013      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954e:	d00f      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a41      	ldr	r2, [pc, #260]	; (8009658 <TIM_Base_SetConfig+0x128>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00b      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a40      	ldr	r2, [pc, #256]	; (800965c <TIM_Base_SetConfig+0x12c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d007      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a3f      	ldr	r2, [pc, #252]	; (8009660 <TIM_Base_SetConfig+0x130>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d003      	beq.n	8009570 <TIM_Base_SetConfig+0x40>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a3e      	ldr	r2, [pc, #248]	; (8009664 <TIM_Base_SetConfig+0x134>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d108      	bne.n	8009582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a33      	ldr	r2, [pc, #204]	; (8009654 <TIM_Base_SetConfig+0x124>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d027      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009590:	d023      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a30      	ldr	r2, [pc, #192]	; (8009658 <TIM_Base_SetConfig+0x128>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d01f      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a2f      	ldr	r2, [pc, #188]	; (800965c <TIM_Base_SetConfig+0x12c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d01b      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a2e      	ldr	r2, [pc, #184]	; (8009660 <TIM_Base_SetConfig+0x130>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d017      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a2d      	ldr	r2, [pc, #180]	; (8009664 <TIM_Base_SetConfig+0x134>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d013      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a2c      	ldr	r2, [pc, #176]	; (8009668 <TIM_Base_SetConfig+0x138>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00f      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a2b      	ldr	r2, [pc, #172]	; (800966c <TIM_Base_SetConfig+0x13c>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00b      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a2a      	ldr	r2, [pc, #168]	; (8009670 <TIM_Base_SetConfig+0x140>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d007      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a29      	ldr	r2, [pc, #164]	; (8009674 <TIM_Base_SetConfig+0x144>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d003      	beq.n	80095da <TIM_Base_SetConfig+0xaa>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a28      	ldr	r2, [pc, #160]	; (8009678 <TIM_Base_SetConfig+0x148>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d108      	bne.n	80095ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	689a      	ldr	r2, [r3, #8]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <TIM_Base_SetConfig+0x124>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d00f      	beq.n	8009638 <TIM_Base_SetConfig+0x108>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a12      	ldr	r2, [pc, #72]	; (8009664 <TIM_Base_SetConfig+0x134>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00b      	beq.n	8009638 <TIM_Base_SetConfig+0x108>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a11      	ldr	r2, [pc, #68]	; (8009668 <TIM_Base_SetConfig+0x138>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d007      	beq.n	8009638 <TIM_Base_SetConfig+0x108>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a10      	ldr	r2, [pc, #64]	; (800966c <TIM_Base_SetConfig+0x13c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d003      	beq.n	8009638 <TIM_Base_SetConfig+0x108>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a0f      	ldr	r2, [pc, #60]	; (8009670 <TIM_Base_SetConfig+0x140>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d103      	bne.n	8009640 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	615a      	str	r2, [r3, #20]
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	40010000 	.word	0x40010000
 8009658:	40000400 	.word	0x40000400
 800965c:	40000800 	.word	0x40000800
 8009660:	40000c00 	.word	0x40000c00
 8009664:	40010400 	.word	0x40010400
 8009668:	40014000 	.word	0x40014000
 800966c:	40014400 	.word	0x40014400
 8009670:	40014800 	.word	0x40014800
 8009674:	4000e000 	.word	0x4000e000
 8009678:	4000e400 	.word	0x4000e400

0800967c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	f023 0201 	bic.w	r2, r3, #1
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4b37      	ldr	r3, [pc, #220]	; (8009784 <TIM_OC1_SetConfig+0x108>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0303 	bic.w	r3, r3, #3
 80096b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f023 0302 	bic.w	r3, r3, #2
 80096c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a2d      	ldr	r2, [pc, #180]	; (8009788 <TIM_OC1_SetConfig+0x10c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00f      	beq.n	80096f8 <TIM_OC1_SetConfig+0x7c>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a2c      	ldr	r2, [pc, #176]	; (800978c <TIM_OC1_SetConfig+0x110>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d00b      	beq.n	80096f8 <TIM_OC1_SetConfig+0x7c>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a2b      	ldr	r2, [pc, #172]	; (8009790 <TIM_OC1_SetConfig+0x114>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d007      	beq.n	80096f8 <TIM_OC1_SetConfig+0x7c>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a2a      	ldr	r2, [pc, #168]	; (8009794 <TIM_OC1_SetConfig+0x118>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d003      	beq.n	80096f8 <TIM_OC1_SetConfig+0x7c>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a29      	ldr	r2, [pc, #164]	; (8009798 <TIM_OC1_SetConfig+0x11c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d10c      	bne.n	8009712 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f023 0308 	bic.w	r3, r3, #8
 80096fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	4313      	orrs	r3, r2
 8009708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f023 0304 	bic.w	r3, r3, #4
 8009710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a1c      	ldr	r2, [pc, #112]	; (8009788 <TIM_OC1_SetConfig+0x10c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00f      	beq.n	800973a <TIM_OC1_SetConfig+0xbe>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1b      	ldr	r2, [pc, #108]	; (800978c <TIM_OC1_SetConfig+0x110>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d00b      	beq.n	800973a <TIM_OC1_SetConfig+0xbe>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a1a      	ldr	r2, [pc, #104]	; (8009790 <TIM_OC1_SetConfig+0x114>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d007      	beq.n	800973a <TIM_OC1_SetConfig+0xbe>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a19      	ldr	r2, [pc, #100]	; (8009794 <TIM_OC1_SetConfig+0x118>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d003      	beq.n	800973a <TIM_OC1_SetConfig+0xbe>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a18      	ldr	r2, [pc, #96]	; (8009798 <TIM_OC1_SetConfig+0x11c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d111      	bne.n	800975e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	4313      	orrs	r3, r2
 8009752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	4313      	orrs	r3, r2
 800975c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	621a      	str	r2, [r3, #32]
}
 8009778:	bf00      	nop
 800977a:	371c      	adds	r7, #28
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	fffeff8f 	.word	0xfffeff8f
 8009788:	40010000 	.word	0x40010000
 800978c:	40010400 	.word	0x40010400
 8009790:	40014000 	.word	0x40014000
 8009794:	40014400 	.word	0x40014400
 8009798:	40014800 	.word	0x40014800

0800979c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	f023 0210 	bic.w	r2, r3, #16
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4b34      	ldr	r3, [pc, #208]	; (8009898 <TIM_OC2_SetConfig+0xfc>)
 80097c8:	4013      	ands	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f023 0320 	bic.w	r3, r3, #32
 80097e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	011b      	lsls	r3, r3, #4
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a29      	ldr	r2, [pc, #164]	; (800989c <TIM_OC2_SetConfig+0x100>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d003      	beq.n	8009804 <TIM_OC2_SetConfig+0x68>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a28      	ldr	r2, [pc, #160]	; (80098a0 <TIM_OC2_SetConfig+0x104>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d10d      	bne.n	8009820 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800980a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800981e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a1e      	ldr	r2, [pc, #120]	; (800989c <TIM_OC2_SetConfig+0x100>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d00f      	beq.n	8009848 <TIM_OC2_SetConfig+0xac>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1d      	ldr	r2, [pc, #116]	; (80098a0 <TIM_OC2_SetConfig+0x104>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00b      	beq.n	8009848 <TIM_OC2_SetConfig+0xac>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a1c      	ldr	r2, [pc, #112]	; (80098a4 <TIM_OC2_SetConfig+0x108>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d007      	beq.n	8009848 <TIM_OC2_SetConfig+0xac>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a1b      	ldr	r2, [pc, #108]	; (80098a8 <TIM_OC2_SetConfig+0x10c>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d003      	beq.n	8009848 <TIM_OC2_SetConfig+0xac>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a1a      	ldr	r2, [pc, #104]	; (80098ac <TIM_OC2_SetConfig+0x110>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d113      	bne.n	8009870 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800984e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	4313      	orrs	r3, r2
 8009862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4313      	orrs	r3, r2
 800986e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	feff8fff 	.word	0xfeff8fff
 800989c:	40010000 	.word	0x40010000
 80098a0:	40010400 	.word	0x40010400
 80098a4:	40014000 	.word	0x40014000
 80098a8:	40014400 	.word	0x40014400
 80098ac:	40014800 	.word	0x40014800

080098b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4b33      	ldr	r3, [pc, #204]	; (80099a8 <TIM_OC3_SetConfig+0xf8>)
 80098dc:	4013      	ands	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 0303 	bic.w	r3, r3, #3
 80098e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	021b      	lsls	r3, r3, #8
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a28      	ldr	r2, [pc, #160]	; (80099ac <TIM_OC3_SetConfig+0xfc>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d003      	beq.n	8009916 <TIM_OC3_SetConfig+0x66>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a27      	ldr	r2, [pc, #156]	; (80099b0 <TIM_OC3_SetConfig+0x100>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d10d      	bne.n	8009932 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800991c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	4313      	orrs	r3, r2
 8009928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a1d      	ldr	r2, [pc, #116]	; (80099ac <TIM_OC3_SetConfig+0xfc>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00f      	beq.n	800995a <TIM_OC3_SetConfig+0xaa>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a1c      	ldr	r2, [pc, #112]	; (80099b0 <TIM_OC3_SetConfig+0x100>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d00b      	beq.n	800995a <TIM_OC3_SetConfig+0xaa>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a1b      	ldr	r2, [pc, #108]	; (80099b4 <TIM_OC3_SetConfig+0x104>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d007      	beq.n	800995a <TIM_OC3_SetConfig+0xaa>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a1a      	ldr	r2, [pc, #104]	; (80099b8 <TIM_OC3_SetConfig+0x108>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d003      	beq.n	800995a <TIM_OC3_SetConfig+0xaa>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a19      	ldr	r2, [pc, #100]	; (80099bc <TIM_OC3_SetConfig+0x10c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d113      	bne.n	8009982 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4313      	orrs	r3, r2
 8009974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	4313      	orrs	r3, r2
 8009980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	621a      	str	r2, [r3, #32]
}
 800999c:	bf00      	nop
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	fffeff8f 	.word	0xfffeff8f
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40010400 	.word	0x40010400
 80099b4:	40014000 	.word	0x40014000
 80099b8:	40014400 	.word	0x40014400
 80099bc:	40014800 	.word	0x40014800

080099c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	69db      	ldr	r3, [r3, #28]
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4b24      	ldr	r3, [pc, #144]	; (8009a7c <TIM_OC4_SetConfig+0xbc>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	031b      	lsls	r3, r3, #12
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a19      	ldr	r2, [pc, #100]	; (8009a80 <TIM_OC4_SetConfig+0xc0>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d00f      	beq.n	8009a40 <TIM_OC4_SetConfig+0x80>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a18      	ldr	r2, [pc, #96]	; (8009a84 <TIM_OC4_SetConfig+0xc4>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00b      	beq.n	8009a40 <TIM_OC4_SetConfig+0x80>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <TIM_OC4_SetConfig+0xc8>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d007      	beq.n	8009a40 <TIM_OC4_SetConfig+0x80>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a16      	ldr	r2, [pc, #88]	; (8009a8c <TIM_OC4_SetConfig+0xcc>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d003      	beq.n	8009a40 <TIM_OC4_SetConfig+0x80>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a15      	ldr	r2, [pc, #84]	; (8009a90 <TIM_OC4_SetConfig+0xd0>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d109      	bne.n	8009a54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	019b      	lsls	r3, r3, #6
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	621a      	str	r2, [r3, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	feff8fff 	.word	0xfeff8fff
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40010400 	.word	0x40010400
 8009a88:	40014000 	.word	0x40014000
 8009a8c:	40014400 	.word	0x40014400
 8009a90:	40014800 	.word	0x40014800

08009a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4b21      	ldr	r3, [pc, #132]	; (8009b44 <TIM_OC5_SetConfig+0xb0>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	041b      	lsls	r3, r3, #16
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a18      	ldr	r2, [pc, #96]	; (8009b48 <TIM_OC5_SetConfig+0xb4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d00f      	beq.n	8009b0a <TIM_OC5_SetConfig+0x76>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a17      	ldr	r2, [pc, #92]	; (8009b4c <TIM_OC5_SetConfig+0xb8>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00b      	beq.n	8009b0a <TIM_OC5_SetConfig+0x76>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a16      	ldr	r2, [pc, #88]	; (8009b50 <TIM_OC5_SetConfig+0xbc>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d007      	beq.n	8009b0a <TIM_OC5_SetConfig+0x76>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a15      	ldr	r2, [pc, #84]	; (8009b54 <TIM_OC5_SetConfig+0xc0>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d003      	beq.n	8009b0a <TIM_OC5_SetConfig+0x76>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a14      	ldr	r2, [pc, #80]	; (8009b58 <TIM_OC5_SetConfig+0xc4>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d109      	bne.n	8009b1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	021b      	lsls	r3, r3, #8
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	621a      	str	r2, [r3, #32]
}
 8009b38:	bf00      	nop
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	fffeff8f 	.word	0xfffeff8f
 8009b48:	40010000 	.word	0x40010000
 8009b4c:	40010400 	.word	0x40010400
 8009b50:	40014000 	.word	0x40014000
 8009b54:	40014400 	.word	0x40014400
 8009b58:	40014800 	.word	0x40014800

08009b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4b22      	ldr	r3, [pc, #136]	; (8009c10 <TIM_OC6_SetConfig+0xb4>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	021b      	lsls	r3, r3, #8
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	051b      	lsls	r3, r3, #20
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a19      	ldr	r2, [pc, #100]	; (8009c14 <TIM_OC6_SetConfig+0xb8>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d00f      	beq.n	8009bd4 <TIM_OC6_SetConfig+0x78>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a18      	ldr	r2, [pc, #96]	; (8009c18 <TIM_OC6_SetConfig+0xbc>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d00b      	beq.n	8009bd4 <TIM_OC6_SetConfig+0x78>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a17      	ldr	r2, [pc, #92]	; (8009c1c <TIM_OC6_SetConfig+0xc0>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d007      	beq.n	8009bd4 <TIM_OC6_SetConfig+0x78>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a16      	ldr	r2, [pc, #88]	; (8009c20 <TIM_OC6_SetConfig+0xc4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d003      	beq.n	8009bd4 <TIM_OC6_SetConfig+0x78>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a15      	ldr	r2, [pc, #84]	; (8009c24 <TIM_OC6_SetConfig+0xc8>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d109      	bne.n	8009be8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	029b      	lsls	r3, r3, #10
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	621a      	str	r2, [r3, #32]
}
 8009c02:	bf00      	nop
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	feff8fff 	.word	0xfeff8fff
 8009c14:	40010000 	.word	0x40010000
 8009c18:	40010400 	.word	0x40010400
 8009c1c:	40014000 	.word	0x40014000
 8009c20:	40014400 	.word	0x40014400
 8009c24:	40014800 	.word	0x40014800

08009c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f003 031f 	and.w	r3, r3, #31
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a1a      	ldr	r2, [r3, #32]
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	43db      	mvns	r3, r3
 8009c4a:	401a      	ands	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a1a      	ldr	r2, [r3, #32]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f003 031f 	and.w	r3, r3, #31
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c60:	431a      	orrs	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	621a      	str	r2, [r3, #32]
}
 8009c66:	bf00      	nop
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d101      	bne.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e077      	b.n	8009d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2202      	movs	r2, #2
 8009c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a35      	ldr	r2, [pc, #212]	; (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d004      	beq.n	8009cc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a34      	ldr	r2, [pc, #208]	; (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d108      	bne.n	8009cd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009cc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a25      	ldr	r2, [pc, #148]	; (8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d02c      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfe:	d027      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a22      	ldr	r2, [pc, #136]	; (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d022      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a21      	ldr	r2, [pc, #132]	; (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d01d      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1f      	ldr	r2, [pc, #124]	; (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d018      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a1a      	ldr	r2, [pc, #104]	; (8009d8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d013      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a1b      	ldr	r2, [pc, #108]	; (8009d9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d00e      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a1a      	ldr	r2, [pc, #104]	; (8009da0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d009      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a18      	ldr	r2, [pc, #96]	; (8009da4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d004      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a17      	ldr	r2, [pc, #92]	; (8009da8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10c      	bne.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	40010400 	.word	0x40010400
 8009d90:	40000400 	.word	0x40000400
 8009d94:	40000800 	.word	0x40000800
 8009d98:	40000c00 	.word	0x40000c00
 8009d9c:	40001800 	.word	0x40001800
 8009da0:	40014000 	.word	0x40014000
 8009da4:	4000e000 	.word	0x4000e000
 8009da8:	4000e400 	.word	0x4000e400

08009dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e042      	b.n	8009e80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d106      	bne.n	8009e12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7f7 f9dd 	bl	80011cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2224      	movs	r2, #36	; 0x24
 8009e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f022 0201 	bic.w	r2, r2, #1
 8009e28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f82c 	bl	8009e88 <UART_SetConfig>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e022      	b.n	8009e80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fe7e 	bl	800ab44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f042 0201 	orr.w	r2, r2, #1
 8009e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 ff05 	bl	800ac88 <UART_CheckIdleState>
 8009e7e:	4603      	mov	r3, r0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e88:	b5b0      	push	{r4, r5, r7, lr}
 8009e8a:	b08e      	sub	sp, #56	; 0x38
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	4bbf      	ldr	r3, [pc, #764]	; (800a1b4 <UART_SetConfig+0x32c>)
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	6812      	ldr	r2, [r2, #0]
 8009ebc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4ab5      	ldr	r2, [pc, #724]	; (800a1b8 <UART_SetConfig+0x330>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d004      	beq.n	8009ef2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	4bb0      	ldr	r3, [pc, #704]	; (800a1bc <UART_SetConfig+0x334>)
 8009efa:	4013      	ands	r3, r2
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f02:	430b      	orrs	r3, r1
 8009f04:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0c:	f023 010f 	bic.w	r1, r3, #15
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4aa7      	ldr	r2, [pc, #668]	; (800a1c0 <UART_SetConfig+0x338>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d176      	bne.n	800a014 <UART_SetConfig+0x18c>
 8009f26:	4ba7      	ldr	r3, [pc, #668]	; (800a1c4 <UART_SetConfig+0x33c>)
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f2e:	2b28      	cmp	r3, #40	; 0x28
 8009f30:	d86c      	bhi.n	800a00c <UART_SetConfig+0x184>
 8009f32:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <UART_SetConfig+0xb0>)
 8009f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f38:	08009fdd 	.word	0x08009fdd
 8009f3c:	0800a00d 	.word	0x0800a00d
 8009f40:	0800a00d 	.word	0x0800a00d
 8009f44:	0800a00d 	.word	0x0800a00d
 8009f48:	0800a00d 	.word	0x0800a00d
 8009f4c:	0800a00d 	.word	0x0800a00d
 8009f50:	0800a00d 	.word	0x0800a00d
 8009f54:	0800a00d 	.word	0x0800a00d
 8009f58:	08009fe5 	.word	0x08009fe5
 8009f5c:	0800a00d 	.word	0x0800a00d
 8009f60:	0800a00d 	.word	0x0800a00d
 8009f64:	0800a00d 	.word	0x0800a00d
 8009f68:	0800a00d 	.word	0x0800a00d
 8009f6c:	0800a00d 	.word	0x0800a00d
 8009f70:	0800a00d 	.word	0x0800a00d
 8009f74:	0800a00d 	.word	0x0800a00d
 8009f78:	08009fed 	.word	0x08009fed
 8009f7c:	0800a00d 	.word	0x0800a00d
 8009f80:	0800a00d 	.word	0x0800a00d
 8009f84:	0800a00d 	.word	0x0800a00d
 8009f88:	0800a00d 	.word	0x0800a00d
 8009f8c:	0800a00d 	.word	0x0800a00d
 8009f90:	0800a00d 	.word	0x0800a00d
 8009f94:	0800a00d 	.word	0x0800a00d
 8009f98:	08009ff5 	.word	0x08009ff5
 8009f9c:	0800a00d 	.word	0x0800a00d
 8009fa0:	0800a00d 	.word	0x0800a00d
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	0800a00d 	.word	0x0800a00d
 8009fac:	0800a00d 	.word	0x0800a00d
 8009fb0:	0800a00d 	.word	0x0800a00d
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	08009ffd 	.word	0x08009ffd
 8009fbc:	0800a00d 	.word	0x0800a00d
 8009fc0:	0800a00d 	.word	0x0800a00d
 8009fc4:	0800a00d 	.word	0x0800a00d
 8009fc8:	0800a00d 	.word	0x0800a00d
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a00d 	.word	0x0800a00d
 8009fd4:	0800a00d 	.word	0x0800a00d
 8009fd8:	0800a005 	.word	0x0800a005
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe2:	e326      	b.n	800a632 <UART_SetConfig+0x7aa>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fea:	e322      	b.n	800a632 <UART_SetConfig+0x7aa>
 8009fec:	2308      	movs	r3, #8
 8009fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff2:	e31e      	b.n	800a632 <UART_SetConfig+0x7aa>
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffa:	e31a      	b.n	800a632 <UART_SetConfig+0x7aa>
 8009ffc:	2320      	movs	r3, #32
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a002:	e316      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a004:	2340      	movs	r3, #64	; 0x40
 800a006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00a:	e312      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a00c:	2380      	movs	r3, #128	; 0x80
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a012:	e30e      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a6b      	ldr	r2, [pc, #428]	; (800a1c8 <UART_SetConfig+0x340>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d130      	bne.n	800a080 <UART_SetConfig+0x1f8>
 800a01e:	4b69      	ldr	r3, [pc, #420]	; (800a1c4 <UART_SetConfig+0x33c>)
 800a020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	2b05      	cmp	r3, #5
 800a028:	d826      	bhi.n	800a078 <UART_SetConfig+0x1f0>
 800a02a:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <UART_SetConfig+0x1a8>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a049 	.word	0x0800a049
 800a034:	0800a051 	.word	0x0800a051
 800a038:	0800a059 	.word	0x0800a059
 800a03c:	0800a061 	.word	0x0800a061
 800a040:	0800a069 	.word	0x0800a069
 800a044:	0800a071 	.word	0x0800a071
 800a048:	2300      	movs	r3, #0
 800a04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a04e:	e2f0      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a050:	2304      	movs	r3, #4
 800a052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a056:	e2ec      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a058:	2308      	movs	r3, #8
 800a05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05e:	e2e8      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a060:	2310      	movs	r3, #16
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a066:	e2e4      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a068:	2320      	movs	r3, #32
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06e:	e2e0      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a070:	2340      	movs	r3, #64	; 0x40
 800a072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a076:	e2dc      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a078:	2380      	movs	r3, #128	; 0x80
 800a07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07e:	e2d8      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a51      	ldr	r2, [pc, #324]	; (800a1cc <UART_SetConfig+0x344>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d130      	bne.n	800a0ec <UART_SetConfig+0x264>
 800a08a:	4b4e      	ldr	r3, [pc, #312]	; (800a1c4 <UART_SetConfig+0x33c>)
 800a08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	2b05      	cmp	r3, #5
 800a094:	d826      	bhi.n	800a0e4 <UART_SetConfig+0x25c>
 800a096:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <UART_SetConfig+0x214>)
 800a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09c:	0800a0b5 	.word	0x0800a0b5
 800a0a0:	0800a0bd 	.word	0x0800a0bd
 800a0a4:	0800a0c5 	.word	0x0800a0c5
 800a0a8:	0800a0cd 	.word	0x0800a0cd
 800a0ac:	0800a0d5 	.word	0x0800a0d5
 800a0b0:	0800a0dd 	.word	0x0800a0dd
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ba:	e2ba      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a0bc:	2304      	movs	r3, #4
 800a0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0c2:	e2b6      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ca:	e2b2      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0d2:	e2ae      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a0d4:	2320      	movs	r3, #32
 800a0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0da:	e2aa      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0e2:	e2a6      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a0e4:	2380      	movs	r3, #128	; 0x80
 800a0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ea:	e2a2      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a37      	ldr	r2, [pc, #220]	; (800a1d0 <UART_SetConfig+0x348>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d130      	bne.n	800a158 <UART_SetConfig+0x2d0>
 800a0f6:	4b33      	ldr	r3, [pc, #204]	; (800a1c4 <UART_SetConfig+0x33c>)
 800a0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0fa:	f003 0307 	and.w	r3, r3, #7
 800a0fe:	2b05      	cmp	r3, #5
 800a100:	d826      	bhi.n	800a150 <UART_SetConfig+0x2c8>
 800a102:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <UART_SetConfig+0x280>)
 800a104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a108:	0800a121 	.word	0x0800a121
 800a10c:	0800a129 	.word	0x0800a129
 800a110:	0800a131 	.word	0x0800a131
 800a114:	0800a139 	.word	0x0800a139
 800a118:	0800a141 	.word	0x0800a141
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	2300      	movs	r3, #0
 800a122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a126:	e284      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a128:	2304      	movs	r3, #4
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a12e:	e280      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a130:	2308      	movs	r3, #8
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e27c      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a138:	2310      	movs	r3, #16
 800a13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13e:	e278      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a140:	2320      	movs	r3, #32
 800a142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a146:	e274      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14e:	e270      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a150:	2380      	movs	r3, #128	; 0x80
 800a152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a156:	e26c      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a1d      	ldr	r2, [pc, #116]	; (800a1d4 <UART_SetConfig+0x34c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d142      	bne.n	800a1e8 <UART_SetConfig+0x360>
 800a162:	4b18      	ldr	r3, [pc, #96]	; (800a1c4 <UART_SetConfig+0x33c>)
 800a164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b05      	cmp	r3, #5
 800a16c:	d838      	bhi.n	800a1e0 <UART_SetConfig+0x358>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <UART_SetConfig+0x2ec>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a18d 	.word	0x0800a18d
 800a178:	0800a195 	.word	0x0800a195
 800a17c:	0800a19d 	.word	0x0800a19d
 800a180:	0800a1a5 	.word	0x0800a1a5
 800a184:	0800a1ad 	.word	0x0800a1ad
 800a188:	0800a1d9 	.word	0x0800a1d9
 800a18c:	2300      	movs	r3, #0
 800a18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a192:	e24e      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a194:	2304      	movs	r3, #4
 800a196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a19a:	e24a      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a19c:	2308      	movs	r3, #8
 800a19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a2:	e246      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1aa:	e242      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a1ac:	2320      	movs	r3, #32
 800a1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b2:	e23e      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a1b4:	cfff69f3 	.word	0xcfff69f3
 800a1b8:	58000c00 	.word	0x58000c00
 800a1bc:	11fff4ff 	.word	0x11fff4ff
 800a1c0:	40011000 	.word	0x40011000
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	40004400 	.word	0x40004400
 800a1cc:	40004800 	.word	0x40004800
 800a1d0:	40004c00 	.word	0x40004c00
 800a1d4:	40005000 	.word	0x40005000
 800a1d8:	2340      	movs	r3, #64	; 0x40
 800a1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1de:	e228      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a1e0:	2380      	movs	r3, #128	; 0x80
 800a1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e6:	e224      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4ab1      	ldr	r2, [pc, #708]	; (800a4b4 <UART_SetConfig+0x62c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d176      	bne.n	800a2e0 <UART_SetConfig+0x458>
 800a1f2:	4bb1      	ldr	r3, [pc, #708]	; (800a4b8 <UART_SetConfig+0x630>)
 800a1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1fa:	2b28      	cmp	r3, #40	; 0x28
 800a1fc:	d86c      	bhi.n	800a2d8 <UART_SetConfig+0x450>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <UART_SetConfig+0x37c>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a2a9 	.word	0x0800a2a9
 800a208:	0800a2d9 	.word	0x0800a2d9
 800a20c:	0800a2d9 	.word	0x0800a2d9
 800a210:	0800a2d9 	.word	0x0800a2d9
 800a214:	0800a2d9 	.word	0x0800a2d9
 800a218:	0800a2d9 	.word	0x0800a2d9
 800a21c:	0800a2d9 	.word	0x0800a2d9
 800a220:	0800a2d9 	.word	0x0800a2d9
 800a224:	0800a2b1 	.word	0x0800a2b1
 800a228:	0800a2d9 	.word	0x0800a2d9
 800a22c:	0800a2d9 	.word	0x0800a2d9
 800a230:	0800a2d9 	.word	0x0800a2d9
 800a234:	0800a2d9 	.word	0x0800a2d9
 800a238:	0800a2d9 	.word	0x0800a2d9
 800a23c:	0800a2d9 	.word	0x0800a2d9
 800a240:	0800a2d9 	.word	0x0800a2d9
 800a244:	0800a2b9 	.word	0x0800a2b9
 800a248:	0800a2d9 	.word	0x0800a2d9
 800a24c:	0800a2d9 	.word	0x0800a2d9
 800a250:	0800a2d9 	.word	0x0800a2d9
 800a254:	0800a2d9 	.word	0x0800a2d9
 800a258:	0800a2d9 	.word	0x0800a2d9
 800a25c:	0800a2d9 	.word	0x0800a2d9
 800a260:	0800a2d9 	.word	0x0800a2d9
 800a264:	0800a2c1 	.word	0x0800a2c1
 800a268:	0800a2d9 	.word	0x0800a2d9
 800a26c:	0800a2d9 	.word	0x0800a2d9
 800a270:	0800a2d9 	.word	0x0800a2d9
 800a274:	0800a2d9 	.word	0x0800a2d9
 800a278:	0800a2d9 	.word	0x0800a2d9
 800a27c:	0800a2d9 	.word	0x0800a2d9
 800a280:	0800a2d9 	.word	0x0800a2d9
 800a284:	0800a2c9 	.word	0x0800a2c9
 800a288:	0800a2d9 	.word	0x0800a2d9
 800a28c:	0800a2d9 	.word	0x0800a2d9
 800a290:	0800a2d9 	.word	0x0800a2d9
 800a294:	0800a2d9 	.word	0x0800a2d9
 800a298:	0800a2d9 	.word	0x0800a2d9
 800a29c:	0800a2d9 	.word	0x0800a2d9
 800a2a0:	0800a2d9 	.word	0x0800a2d9
 800a2a4:	0800a2d1 	.word	0x0800a2d1
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ae:	e1c0      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a2b0:	2304      	movs	r3, #4
 800a2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b6:	e1bc      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a2b8:	2308      	movs	r3, #8
 800a2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2be:	e1b8      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c6:	e1b4      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ce:	e1b0      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a2d0:	2340      	movs	r3, #64	; 0x40
 800a2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d6:	e1ac      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a2d8:	2380      	movs	r3, #128	; 0x80
 800a2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2de:	e1a8      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a75      	ldr	r2, [pc, #468]	; (800a4bc <UART_SetConfig+0x634>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d130      	bne.n	800a34c <UART_SetConfig+0x4c4>
 800a2ea:	4b73      	ldr	r3, [pc, #460]	; (800a4b8 <UART_SetConfig+0x630>)
 800a2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	d826      	bhi.n	800a344 <UART_SetConfig+0x4bc>
 800a2f6:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <UART_SetConfig+0x474>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a315 	.word	0x0800a315
 800a300:	0800a31d 	.word	0x0800a31d
 800a304:	0800a325 	.word	0x0800a325
 800a308:	0800a32d 	.word	0x0800a32d
 800a30c:	0800a335 	.word	0x0800a335
 800a310:	0800a33d 	.word	0x0800a33d
 800a314:	2300      	movs	r3, #0
 800a316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31a:	e18a      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a31c:	2304      	movs	r3, #4
 800a31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a322:	e186      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a324:	2308      	movs	r3, #8
 800a326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32a:	e182      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a32c:	2310      	movs	r3, #16
 800a32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a332:	e17e      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a334:	2320      	movs	r3, #32
 800a336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33a:	e17a      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a33c:	2340      	movs	r3, #64	; 0x40
 800a33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a342:	e176      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a344:	2380      	movs	r3, #128	; 0x80
 800a346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34a:	e172      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a5b      	ldr	r2, [pc, #364]	; (800a4c0 <UART_SetConfig+0x638>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d130      	bne.n	800a3b8 <UART_SetConfig+0x530>
 800a356:	4b58      	ldr	r3, [pc, #352]	; (800a4b8 <UART_SetConfig+0x630>)
 800a358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35a:	f003 0307 	and.w	r3, r3, #7
 800a35e:	2b05      	cmp	r3, #5
 800a360:	d826      	bhi.n	800a3b0 <UART_SetConfig+0x528>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <UART_SetConfig+0x4e0>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a381 	.word	0x0800a381
 800a36c:	0800a389 	.word	0x0800a389
 800a370:	0800a391 	.word	0x0800a391
 800a374:	0800a399 	.word	0x0800a399
 800a378:	0800a3a1 	.word	0x0800a3a1
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	2300      	movs	r3, #0
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	e154      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a388:	2304      	movs	r3, #4
 800a38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38e:	e150      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a390:	2308      	movs	r3, #8
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e14c      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a398:	2310      	movs	r3, #16
 800a39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39e:	e148      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a6:	e144      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ae:	e140      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a3b0:	2380      	movs	r3, #128	; 0x80
 800a3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b6:	e13c      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a41      	ldr	r2, [pc, #260]	; (800a4c4 <UART_SetConfig+0x63c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	f040 8082 	bne.w	800a4c8 <UART_SetConfig+0x640>
 800a3c4:	4b3c      	ldr	r3, [pc, #240]	; (800a4b8 <UART_SetConfig+0x630>)
 800a3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3cc:	2b28      	cmp	r3, #40	; 0x28
 800a3ce:	d86d      	bhi.n	800a4ac <UART_SetConfig+0x624>
 800a3d0:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <UART_SetConfig+0x550>)
 800a3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d6:	bf00      	nop
 800a3d8:	0800a47d 	.word	0x0800a47d
 800a3dc:	0800a4ad 	.word	0x0800a4ad
 800a3e0:	0800a4ad 	.word	0x0800a4ad
 800a3e4:	0800a4ad 	.word	0x0800a4ad
 800a3e8:	0800a4ad 	.word	0x0800a4ad
 800a3ec:	0800a4ad 	.word	0x0800a4ad
 800a3f0:	0800a4ad 	.word	0x0800a4ad
 800a3f4:	0800a4ad 	.word	0x0800a4ad
 800a3f8:	0800a485 	.word	0x0800a485
 800a3fc:	0800a4ad 	.word	0x0800a4ad
 800a400:	0800a4ad 	.word	0x0800a4ad
 800a404:	0800a4ad 	.word	0x0800a4ad
 800a408:	0800a4ad 	.word	0x0800a4ad
 800a40c:	0800a4ad 	.word	0x0800a4ad
 800a410:	0800a4ad 	.word	0x0800a4ad
 800a414:	0800a4ad 	.word	0x0800a4ad
 800a418:	0800a48d 	.word	0x0800a48d
 800a41c:	0800a4ad 	.word	0x0800a4ad
 800a420:	0800a4ad 	.word	0x0800a4ad
 800a424:	0800a4ad 	.word	0x0800a4ad
 800a428:	0800a4ad 	.word	0x0800a4ad
 800a42c:	0800a4ad 	.word	0x0800a4ad
 800a430:	0800a4ad 	.word	0x0800a4ad
 800a434:	0800a4ad 	.word	0x0800a4ad
 800a438:	0800a495 	.word	0x0800a495
 800a43c:	0800a4ad 	.word	0x0800a4ad
 800a440:	0800a4ad 	.word	0x0800a4ad
 800a444:	0800a4ad 	.word	0x0800a4ad
 800a448:	0800a4ad 	.word	0x0800a4ad
 800a44c:	0800a4ad 	.word	0x0800a4ad
 800a450:	0800a4ad 	.word	0x0800a4ad
 800a454:	0800a4ad 	.word	0x0800a4ad
 800a458:	0800a49d 	.word	0x0800a49d
 800a45c:	0800a4ad 	.word	0x0800a4ad
 800a460:	0800a4ad 	.word	0x0800a4ad
 800a464:	0800a4ad 	.word	0x0800a4ad
 800a468:	0800a4ad 	.word	0x0800a4ad
 800a46c:	0800a4ad 	.word	0x0800a4ad
 800a470:	0800a4ad 	.word	0x0800a4ad
 800a474:	0800a4ad 	.word	0x0800a4ad
 800a478:	0800a4a5 	.word	0x0800a4a5
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e0d6      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a484:	2304      	movs	r3, #4
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	e0d2      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a48c:	2308      	movs	r3, #8
 800a48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a492:	e0ce      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a494:	2310      	movs	r3, #16
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49a:	e0ca      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a49c:	2320      	movs	r3, #32
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e0c6      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a4a4:	2340      	movs	r3, #64	; 0x40
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e0c2      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a4ac:	2380      	movs	r3, #128	; 0x80
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b2:	e0be      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a4b4:	40011400 	.word	0x40011400
 800a4b8:	58024400 	.word	0x58024400
 800a4bc:	40007800 	.word	0x40007800
 800a4c0:	40007c00 	.word	0x40007c00
 800a4c4:	40011800 	.word	0x40011800
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4aad      	ldr	r2, [pc, #692]	; (800a784 <UART_SetConfig+0x8fc>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d176      	bne.n	800a5c0 <UART_SetConfig+0x738>
 800a4d2:	4bad      	ldr	r3, [pc, #692]	; (800a788 <UART_SetConfig+0x900>)
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4da:	2b28      	cmp	r3, #40	; 0x28
 800a4dc:	d86c      	bhi.n	800a5b8 <UART_SetConfig+0x730>
 800a4de:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <UART_SetConfig+0x65c>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a589 	.word	0x0800a589
 800a4e8:	0800a5b9 	.word	0x0800a5b9
 800a4ec:	0800a5b9 	.word	0x0800a5b9
 800a4f0:	0800a5b9 	.word	0x0800a5b9
 800a4f4:	0800a5b9 	.word	0x0800a5b9
 800a4f8:	0800a5b9 	.word	0x0800a5b9
 800a4fc:	0800a5b9 	.word	0x0800a5b9
 800a500:	0800a5b9 	.word	0x0800a5b9
 800a504:	0800a591 	.word	0x0800a591
 800a508:	0800a5b9 	.word	0x0800a5b9
 800a50c:	0800a5b9 	.word	0x0800a5b9
 800a510:	0800a5b9 	.word	0x0800a5b9
 800a514:	0800a5b9 	.word	0x0800a5b9
 800a518:	0800a5b9 	.word	0x0800a5b9
 800a51c:	0800a5b9 	.word	0x0800a5b9
 800a520:	0800a5b9 	.word	0x0800a5b9
 800a524:	0800a599 	.word	0x0800a599
 800a528:	0800a5b9 	.word	0x0800a5b9
 800a52c:	0800a5b9 	.word	0x0800a5b9
 800a530:	0800a5b9 	.word	0x0800a5b9
 800a534:	0800a5b9 	.word	0x0800a5b9
 800a538:	0800a5b9 	.word	0x0800a5b9
 800a53c:	0800a5b9 	.word	0x0800a5b9
 800a540:	0800a5b9 	.word	0x0800a5b9
 800a544:	0800a5a1 	.word	0x0800a5a1
 800a548:	0800a5b9 	.word	0x0800a5b9
 800a54c:	0800a5b9 	.word	0x0800a5b9
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a5b9 	.word	0x0800a5b9
 800a558:	0800a5b9 	.word	0x0800a5b9
 800a55c:	0800a5b9 	.word	0x0800a5b9
 800a560:	0800a5b9 	.word	0x0800a5b9
 800a564:	0800a5a9 	.word	0x0800a5a9
 800a568:	0800a5b9 	.word	0x0800a5b9
 800a56c:	0800a5b9 	.word	0x0800a5b9
 800a570:	0800a5b9 	.word	0x0800a5b9
 800a574:	0800a5b9 	.word	0x0800a5b9
 800a578:	0800a5b9 	.word	0x0800a5b9
 800a57c:	0800a5b9 	.word	0x0800a5b9
 800a580:	0800a5b9 	.word	0x0800a5b9
 800a584:	0800a5b1 	.word	0x0800a5b1
 800a588:	2301      	movs	r3, #1
 800a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58e:	e050      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a590:	2304      	movs	r3, #4
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e04c      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a598:	2308      	movs	r3, #8
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59e:	e048      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a6:	e044      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a5a8:	2320      	movs	r3, #32
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e040      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a5b0:	2340      	movs	r3, #64	; 0x40
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	e03c      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a5b8:	2380      	movs	r3, #128	; 0x80
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5be:	e038      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a71      	ldr	r2, [pc, #452]	; (800a78c <UART_SetConfig+0x904>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d130      	bne.n	800a62c <UART_SetConfig+0x7a4>
 800a5ca:	4b6f      	ldr	r3, [pc, #444]	; (800a788 <UART_SetConfig+0x900>)
 800a5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	2b05      	cmp	r3, #5
 800a5d4:	d826      	bhi.n	800a624 <UART_SetConfig+0x79c>
 800a5d6:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <UART_SetConfig+0x754>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a5f5 	.word	0x0800a5f5
 800a5e0:	0800a5fd 	.word	0x0800a5fd
 800a5e4:	0800a605 	.word	0x0800a605
 800a5e8:	0800a60d 	.word	0x0800a60d
 800a5ec:	0800a615 	.word	0x0800a615
 800a5f0:	0800a61d 	.word	0x0800a61d
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e01a      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e016      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a604:	2308      	movs	r3, #8
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60a:	e012      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a60c:	2310      	movs	r3, #16
 800a60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a612:	e00e      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a614:	2320      	movs	r3, #32
 800a616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61a:	e00a      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a622:	e006      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a624:	2380      	movs	r3, #128	; 0x80
 800a626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62a:	e002      	b.n	800a632 <UART_SetConfig+0x7aa>
 800a62c:	2380      	movs	r3, #128	; 0x80
 800a62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a55      	ldr	r2, [pc, #340]	; (800a78c <UART_SetConfig+0x904>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	f040 80f0 	bne.w	800a81e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a63e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a642:	2b20      	cmp	r3, #32
 800a644:	dc46      	bgt.n	800a6d4 <UART_SetConfig+0x84c>
 800a646:	2b02      	cmp	r3, #2
 800a648:	db75      	blt.n	800a736 <UART_SetConfig+0x8ae>
 800a64a:	3b02      	subs	r3, #2
 800a64c:	2b1e      	cmp	r3, #30
 800a64e:	d872      	bhi.n	800a736 <UART_SetConfig+0x8ae>
 800a650:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <UART_SetConfig+0x7d0>)
 800a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a6db 	.word	0x0800a6db
 800a65c:	0800a737 	.word	0x0800a737
 800a660:	0800a6e3 	.word	0x0800a6e3
 800a664:	0800a737 	.word	0x0800a737
 800a668:	0800a737 	.word	0x0800a737
 800a66c:	0800a737 	.word	0x0800a737
 800a670:	0800a6f3 	.word	0x0800a6f3
 800a674:	0800a737 	.word	0x0800a737
 800a678:	0800a737 	.word	0x0800a737
 800a67c:	0800a737 	.word	0x0800a737
 800a680:	0800a737 	.word	0x0800a737
 800a684:	0800a737 	.word	0x0800a737
 800a688:	0800a737 	.word	0x0800a737
 800a68c:	0800a737 	.word	0x0800a737
 800a690:	0800a703 	.word	0x0800a703
 800a694:	0800a737 	.word	0x0800a737
 800a698:	0800a737 	.word	0x0800a737
 800a69c:	0800a737 	.word	0x0800a737
 800a6a0:	0800a737 	.word	0x0800a737
 800a6a4:	0800a737 	.word	0x0800a737
 800a6a8:	0800a737 	.word	0x0800a737
 800a6ac:	0800a737 	.word	0x0800a737
 800a6b0:	0800a737 	.word	0x0800a737
 800a6b4:	0800a737 	.word	0x0800a737
 800a6b8:	0800a737 	.word	0x0800a737
 800a6bc:	0800a737 	.word	0x0800a737
 800a6c0:	0800a737 	.word	0x0800a737
 800a6c4:	0800a737 	.word	0x0800a737
 800a6c8:	0800a737 	.word	0x0800a737
 800a6cc:	0800a737 	.word	0x0800a737
 800a6d0:	0800a729 	.word	0x0800a729
 800a6d4:	2b40      	cmp	r3, #64	; 0x40
 800a6d6:	d02a      	beq.n	800a72e <UART_SetConfig+0x8a6>
 800a6d8:	e02d      	b.n	800a736 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6da:	f7fc f8a1 	bl	8006820 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a6e0:	e02f      	b.n	800a742 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e2:	f107 0314 	add.w	r3, r7, #20
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fc f8b0 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6f0:	e027      	b.n	800a742 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6f2:	f107 0308 	add.w	r3, r7, #8
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fc f9fc 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a700:	e01f      	b.n	800a742 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a702:	4b21      	ldr	r3, [pc, #132]	; (800a788 <UART_SetConfig+0x900>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0320 	and.w	r3, r3, #32
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d009      	beq.n	800a722 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a70e:	4b1e      	ldr	r3, [pc, #120]	; (800a788 <UART_SetConfig+0x900>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	08db      	lsrs	r3, r3, #3
 800a714:	f003 0303 	and.w	r3, r3, #3
 800a718:	4a1d      	ldr	r2, [pc, #116]	; (800a790 <UART_SetConfig+0x908>)
 800a71a:	fa22 f303 	lsr.w	r3, r2, r3
 800a71e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a720:	e00f      	b.n	800a742 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a722:	4b1b      	ldr	r3, [pc, #108]	; (800a790 <UART_SetConfig+0x908>)
 800a724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a726:	e00c      	b.n	800a742 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a728:	4b1a      	ldr	r3, [pc, #104]	; (800a794 <UART_SetConfig+0x90c>)
 800a72a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a72c:	e009      	b.n	800a742 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a72e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a734:	e005      	b.n	800a742 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a736:	2300      	movs	r3, #0
 800a738:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a740:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 81e6 	beq.w	800ab16 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	4a12      	ldr	r2, [pc, #72]	; (800a798 <UART_SetConfig+0x910>)
 800a750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a754:	461a      	mov	r2, r3
 800a756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a758:	fbb3 f3f2 	udiv	r3, r3, r2
 800a75c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	4613      	mov	r3, r2
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	4413      	add	r3, r2
 800a768:	6a3a      	ldr	r2, [r7, #32]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d305      	bcc.n	800a77a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a774:	6a3a      	ldr	r2, [r7, #32]
 800a776:	429a      	cmp	r2, r3
 800a778:	d910      	bls.n	800a79c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a780:	e1c9      	b.n	800ab16 <UART_SetConfig+0xc8e>
 800a782:	bf00      	nop
 800a784:	40011c00 	.word	0x40011c00
 800a788:	58024400 	.word	0x58024400
 800a78c:	58000c00 	.word	0x58000c00
 800a790:	03d09000 	.word	0x03d09000
 800a794:	003d0900 	.word	0x003d0900
 800a798:	0800dea0 	.word	0x0800dea0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f04f 0100 	mov.w	r1, #0
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	4ac1      	ldr	r2, [pc, #772]	; (800aab0 <UART_SetConfig+0xc28>)
 800a7aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	f04f 0300 	mov.w	r3, #0
 800a7b4:	f7f5 fdac 	bl	8000310 <__aeabi_uldivmod>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4619      	mov	r1, r3
 800a7c0:	f04f 0200 	mov.w	r2, #0
 800a7c4:	f04f 0300 	mov.w	r3, #0
 800a7c8:	020b      	lsls	r3, r1, #8
 800a7ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7ce:	0202      	lsls	r2, r0, #8
 800a7d0:	6879      	ldr	r1, [r7, #4]
 800a7d2:	6849      	ldr	r1, [r1, #4]
 800a7d4:	0849      	lsrs	r1, r1, #1
 800a7d6:	4608      	mov	r0, r1
 800a7d8:	f04f 0100 	mov.w	r1, #0
 800a7dc:	1814      	adds	r4, r2, r0
 800a7de:	eb43 0501 	adc.w	r5, r3, r1
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f04f 0300 	mov.w	r3, #0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7f5 fd8e 	bl	8000310 <__aeabi_uldivmod>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a802:	d308      	bcc.n	800a816 <UART_SetConfig+0x98e>
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a80a:	d204      	bcs.n	800a816 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a812:	60da      	str	r2, [r3, #12]
 800a814:	e17f      	b.n	800ab16 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a81c:	e17b      	b.n	800ab16 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	69db      	ldr	r3, [r3, #28]
 800a822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a826:	f040 80bd 	bne.w	800a9a4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a82a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a82e:	2b20      	cmp	r3, #32
 800a830:	dc48      	bgt.n	800a8c4 <UART_SetConfig+0xa3c>
 800a832:	2b00      	cmp	r3, #0
 800a834:	db7b      	blt.n	800a92e <UART_SetConfig+0xaa6>
 800a836:	2b20      	cmp	r3, #32
 800a838:	d879      	bhi.n	800a92e <UART_SetConfig+0xaa6>
 800a83a:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <UART_SetConfig+0x9b8>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a8cb 	.word	0x0800a8cb
 800a844:	0800a8d3 	.word	0x0800a8d3
 800a848:	0800a92f 	.word	0x0800a92f
 800a84c:	0800a92f 	.word	0x0800a92f
 800a850:	0800a8db 	.word	0x0800a8db
 800a854:	0800a92f 	.word	0x0800a92f
 800a858:	0800a92f 	.word	0x0800a92f
 800a85c:	0800a92f 	.word	0x0800a92f
 800a860:	0800a8eb 	.word	0x0800a8eb
 800a864:	0800a92f 	.word	0x0800a92f
 800a868:	0800a92f 	.word	0x0800a92f
 800a86c:	0800a92f 	.word	0x0800a92f
 800a870:	0800a92f 	.word	0x0800a92f
 800a874:	0800a92f 	.word	0x0800a92f
 800a878:	0800a92f 	.word	0x0800a92f
 800a87c:	0800a92f 	.word	0x0800a92f
 800a880:	0800a8fb 	.word	0x0800a8fb
 800a884:	0800a92f 	.word	0x0800a92f
 800a888:	0800a92f 	.word	0x0800a92f
 800a88c:	0800a92f 	.word	0x0800a92f
 800a890:	0800a92f 	.word	0x0800a92f
 800a894:	0800a92f 	.word	0x0800a92f
 800a898:	0800a92f 	.word	0x0800a92f
 800a89c:	0800a92f 	.word	0x0800a92f
 800a8a0:	0800a92f 	.word	0x0800a92f
 800a8a4:	0800a92f 	.word	0x0800a92f
 800a8a8:	0800a92f 	.word	0x0800a92f
 800a8ac:	0800a92f 	.word	0x0800a92f
 800a8b0:	0800a92f 	.word	0x0800a92f
 800a8b4:	0800a92f 	.word	0x0800a92f
 800a8b8:	0800a92f 	.word	0x0800a92f
 800a8bc:	0800a92f 	.word	0x0800a92f
 800a8c0:	0800a921 	.word	0x0800a921
 800a8c4:	2b40      	cmp	r3, #64	; 0x40
 800a8c6:	d02e      	beq.n	800a926 <UART_SetConfig+0xa9e>
 800a8c8:	e031      	b.n	800a92e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ca:	f7fa fc1d 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 800a8ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8d0:	e033      	b.n	800a93a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8d2:	f7fa fc2f 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 800a8d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8d8:	e02f      	b.n	800a93a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8da:	f107 0314 	add.w	r3, r7, #20
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fb ffb4 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8e8:	e027      	b.n	800a93a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ea:	f107 0308 	add.w	r3, r7, #8
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fc f900 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8f8:	e01f      	b.n	800a93a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8fa:	4b6e      	ldr	r3, [pc, #440]	; (800aab4 <UART_SetConfig+0xc2c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b00      	cmp	r3, #0
 800a904:	d009      	beq.n	800a91a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a906:	4b6b      	ldr	r3, [pc, #428]	; (800aab4 <UART_SetConfig+0xc2c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	08db      	lsrs	r3, r3, #3
 800a90c:	f003 0303 	and.w	r3, r3, #3
 800a910:	4a69      	ldr	r2, [pc, #420]	; (800aab8 <UART_SetConfig+0xc30>)
 800a912:	fa22 f303 	lsr.w	r3, r2, r3
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a918:	e00f      	b.n	800a93a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a91a:	4b67      	ldr	r3, [pc, #412]	; (800aab8 <UART_SetConfig+0xc30>)
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a91e:	e00c      	b.n	800a93a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a920:	4b66      	ldr	r3, [pc, #408]	; (800aabc <UART_SetConfig+0xc34>)
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a924:	e009      	b.n	800a93a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a92a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a92c:	e005      	b.n	800a93a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 80ea 	beq.w	800ab16 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	4a5a      	ldr	r2, [pc, #360]	; (800aab0 <UART_SetConfig+0xc28>)
 800a948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a94c:	461a      	mov	r2, r3
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	fbb3 f3f2 	udiv	r3, r3, r2
 800a954:	005a      	lsls	r2, r3, #1
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	085b      	lsrs	r3, r3, #1
 800a95c:	441a      	add	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	fbb2 f3f3 	udiv	r3, r2, r3
 800a966:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	2b0f      	cmp	r3, #15
 800a96c:	d916      	bls.n	800a99c <UART_SetConfig+0xb14>
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a974:	d212      	bcs.n	800a99c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a978:	b29b      	uxth	r3, r3
 800a97a:	f023 030f 	bic.w	r3, r3, #15
 800a97e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	b29b      	uxth	r3, r3
 800a986:	f003 0307 	and.w	r3, r3, #7
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a98e:	4313      	orrs	r3, r2
 800a990:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a998:	60da      	str	r2, [r3, #12]
 800a99a:	e0bc      	b.n	800ab16 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a9a2:	e0b8      	b.n	800ab16 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	dc4b      	bgt.n	800aa44 <UART_SetConfig+0xbbc>
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f2c0 8087 	blt.w	800aac0 <UART_SetConfig+0xc38>
 800a9b2:	2b20      	cmp	r3, #32
 800a9b4:	f200 8084 	bhi.w	800aac0 <UART_SetConfig+0xc38>
 800a9b8:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <UART_SetConfig+0xb38>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800aa4b 	.word	0x0800aa4b
 800a9c4:	0800aa53 	.word	0x0800aa53
 800a9c8:	0800aac1 	.word	0x0800aac1
 800a9cc:	0800aac1 	.word	0x0800aac1
 800a9d0:	0800aa5b 	.word	0x0800aa5b
 800a9d4:	0800aac1 	.word	0x0800aac1
 800a9d8:	0800aac1 	.word	0x0800aac1
 800a9dc:	0800aac1 	.word	0x0800aac1
 800a9e0:	0800aa6b 	.word	0x0800aa6b
 800a9e4:	0800aac1 	.word	0x0800aac1
 800a9e8:	0800aac1 	.word	0x0800aac1
 800a9ec:	0800aac1 	.word	0x0800aac1
 800a9f0:	0800aac1 	.word	0x0800aac1
 800a9f4:	0800aac1 	.word	0x0800aac1
 800a9f8:	0800aac1 	.word	0x0800aac1
 800a9fc:	0800aac1 	.word	0x0800aac1
 800aa00:	0800aa7b 	.word	0x0800aa7b
 800aa04:	0800aac1 	.word	0x0800aac1
 800aa08:	0800aac1 	.word	0x0800aac1
 800aa0c:	0800aac1 	.word	0x0800aac1
 800aa10:	0800aac1 	.word	0x0800aac1
 800aa14:	0800aac1 	.word	0x0800aac1
 800aa18:	0800aac1 	.word	0x0800aac1
 800aa1c:	0800aac1 	.word	0x0800aac1
 800aa20:	0800aac1 	.word	0x0800aac1
 800aa24:	0800aac1 	.word	0x0800aac1
 800aa28:	0800aac1 	.word	0x0800aac1
 800aa2c:	0800aac1 	.word	0x0800aac1
 800aa30:	0800aac1 	.word	0x0800aac1
 800aa34:	0800aac1 	.word	0x0800aac1
 800aa38:	0800aac1 	.word	0x0800aac1
 800aa3c:	0800aac1 	.word	0x0800aac1
 800aa40:	0800aaa1 	.word	0x0800aaa1
 800aa44:	2b40      	cmp	r3, #64	; 0x40
 800aa46:	d02e      	beq.n	800aaa6 <UART_SetConfig+0xc1e>
 800aa48:	e03a      	b.n	800aac0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa4a:	f7fa fb5d 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 800aa4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa50:	e03c      	b.n	800aacc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa52:	f7fa fb6f 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 800aa56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa58:	e038      	b.n	800aacc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa5a:	f107 0314 	add.w	r3, r7, #20
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fb fef4 	bl	800684c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa68:	e030      	b.n	800aacc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa6a:	f107 0308 	add.w	r3, r7, #8
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fc f840 	bl	8006af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa78:	e028      	b.n	800aacc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa7a:	4b0e      	ldr	r3, [pc, #56]	; (800aab4 <UART_SetConfig+0xc2c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0320 	and.w	r3, r3, #32
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d009      	beq.n	800aa9a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa86:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <UART_SetConfig+0xc2c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	08db      	lsrs	r3, r3, #3
 800aa8c:	f003 0303 	and.w	r3, r3, #3
 800aa90:	4a09      	ldr	r2, [pc, #36]	; (800aab8 <UART_SetConfig+0xc30>)
 800aa92:	fa22 f303 	lsr.w	r3, r2, r3
 800aa96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa98:	e018      	b.n	800aacc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800aa9a:	4b07      	ldr	r3, [pc, #28]	; (800aab8 <UART_SetConfig+0xc30>)
 800aa9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa9e:	e015      	b.n	800aacc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaa0:	4b06      	ldr	r3, [pc, #24]	; (800aabc <UART_SetConfig+0xc34>)
 800aaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaa4:	e012      	b.n	800aacc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaac:	e00e      	b.n	800aacc <UART_SetConfig+0xc44>
 800aaae:	bf00      	nop
 800aab0:	0800dea0 	.word	0x0800dea0
 800aab4:	58024400 	.word	0x58024400
 800aab8:	03d09000 	.word	0x03d09000
 800aabc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aaca:	bf00      	nop
    }

    if (pclk != 0U)
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d021      	beq.n	800ab16 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	4a1a      	ldr	r2, [pc, #104]	; (800ab40 <UART_SetConfig+0xcb8>)
 800aad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aadc:	461a      	mov	r2, r3
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	fbb3 f2f2 	udiv	r2, r3, r2
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	085b      	lsrs	r3, r3, #1
 800aaea:	441a      	add	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	2b0f      	cmp	r3, #15
 800aafa:	d909      	bls.n	800ab10 <UART_SetConfig+0xc88>
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab02:	d205      	bcs.n	800ab10 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	60da      	str	r2, [r3, #12]
 800ab0e:	e002      	b.n	800ab16 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3738      	adds	r7, #56	; 0x38
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bdb0      	pop	{r4, r5, r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	0800dea0 	.word	0x0800dea0

0800ab44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00a      	beq.n	800ab6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00a      	beq.n	800abb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb6:	f003 0308 	and.w	r3, r3, #8
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00a      	beq.n	800abd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	430a      	orrs	r2, r1
 800abd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd8:	f003 0310 	and.w	r3, r3, #16
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00a      	beq.n	800abf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	430a      	orrs	r2, r1
 800abf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00a      	beq.n	800ac18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	430a      	orrs	r2, r1
 800ac16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01a      	beq.n	800ac5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac42:	d10a      	bne.n	800ac5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00a      	beq.n	800ac7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	430a      	orrs	r2, r1
 800ac7a:	605a      	str	r2, [r3, #4]
  }
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac98:	f7f6 fc90 	bl	80015bc <HAL_GetTick>
 800ac9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0308 	and.w	r3, r3, #8
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d10e      	bne.n	800acca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f82f 	bl	800ad1e <UART_WaitOnFlagUntilTimeout>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e025      	b.n	800ad16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d10e      	bne.n	800acf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f819 	bl	800ad1e <UART_WaitOnFlagUntilTimeout>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acf2:	2303      	movs	r3, #3
 800acf4:	e00f      	b.n	800ad16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2220      	movs	r2, #32
 800ad02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b09c      	sub	sp, #112	; 0x70
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	603b      	str	r3, [r7, #0]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad2e:	e0a9      	b.n	800ae84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad36:	f000 80a5 	beq.w	800ae84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad3a:	f7f6 fc3f 	bl	80015bc <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d302      	bcc.n	800ad50 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d140      	bne.n	800add2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad64:	667b      	str	r3, [r7, #100]	; 0x64
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e6      	bne.n	800ad50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	3308      	adds	r3, #8
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	f023 0301 	bic.w	r3, r3, #1
 800ad98:	663b      	str	r3, [r7, #96]	; 0x60
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3308      	adds	r3, #8
 800ada0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ada2:	64ba      	str	r2, [r7, #72]	; 0x48
 800ada4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ada8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800adb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e5      	bne.n	800ad82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e069      	b.n	800aea6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b00      	cmp	r3, #0
 800adde:	d051      	beq.n	800ae84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	69db      	ldr	r3, [r3, #28]
 800ade6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adee:	d149      	bne.n	800ae84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	e853 3f00 	ldrex	r3, [r3]
 800ae06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	461a      	mov	r2, r3
 800ae16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae18:	637b      	str	r3, [r7, #52]	; 0x34
 800ae1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae20:	e841 2300 	strex	r3, r2, [r1]
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1e6      	bne.n	800adfa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	3308      	adds	r3, #8
 800ae32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	e853 3f00 	ldrex	r3, [r3]
 800ae3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f023 0301 	bic.w	r3, r3, #1
 800ae42:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3308      	adds	r3, #8
 800ae4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae4c:	623a      	str	r2, [r7, #32]
 800ae4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae50:	69f9      	ldr	r1, [r7, #28]
 800ae52:	6a3a      	ldr	r2, [r7, #32]
 800ae54:	e841 2300 	strex	r3, r2, [r1]
 800ae58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e5      	bne.n	800ae2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2220      	movs	r2, #32
 800ae64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2220      	movs	r2, #32
 800ae74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	e010      	b.n	800aea6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	69da      	ldr	r2, [r3, #28]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	bf0c      	ite	eq
 800ae94:	2301      	moveq	r3, #1
 800ae96:	2300      	movne	r3, #0
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	f43f af46 	beq.w	800ad30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3770      	adds	r7, #112	; 0x70
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <HAL_UARTEx_DisableFifoMode+0x16>
 800aec0:	2302      	movs	r3, #2
 800aec2:	e027      	b.n	800af14 <HAL_UARTEx_DisableFifoMode+0x66>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2224      	movs	r2, #36	; 0x24
 800aed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f022 0201 	bic.w	r2, r2, #1
 800aeea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aef2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2220      	movs	r2, #32
 800af06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af30:	2b01      	cmp	r3, #1
 800af32:	d101      	bne.n	800af38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af34:	2302      	movs	r3, #2
 800af36:	e02d      	b.n	800af94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2224      	movs	r2, #36	; 0x24
 800af44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0201 	bic.w	r2, r2, #1
 800af5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	430a      	orrs	r2, r1
 800af72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f84f 	bl	800b018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2220      	movs	r2, #32
 800af86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afb0:	2302      	movs	r3, #2
 800afb2:	e02d      	b.n	800b010 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2224      	movs	r2, #36	; 0x24
 800afc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0201 	bic.w	r2, r2, #1
 800afda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f811 	bl	800b018 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2220      	movs	r2, #32
 800b002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b024:	2b00      	cmp	r3, #0
 800b026:	d108      	bne.n	800b03a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b038:	e031      	b.n	800b09e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b03a:	2310      	movs	r3, #16
 800b03c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b03e:	2310      	movs	r3, #16
 800b040:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	0e5b      	lsrs	r3, r3, #25
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f003 0307 	and.w	r3, r3, #7
 800b050:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	0f5b      	lsrs	r3, r3, #29
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	f003 0307 	and.w	r3, r3, #7
 800b060:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	7b3a      	ldrb	r2, [r7, #12]
 800b066:	4911      	ldr	r1, [pc, #68]	; (800b0ac <UARTEx_SetNbDataToProcess+0x94>)
 800b068:	5c8a      	ldrb	r2, [r1, r2]
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b06e:	7b3a      	ldrb	r2, [r7, #12]
 800b070:	490f      	ldr	r1, [pc, #60]	; (800b0b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b072:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b074:	fb93 f3f2 	sdiv	r3, r3, r2
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	7b7a      	ldrb	r2, [r7, #13]
 800b084:	4909      	ldr	r1, [pc, #36]	; (800b0ac <UARTEx_SetNbDataToProcess+0x94>)
 800b086:	5c8a      	ldrb	r2, [r1, r2]
 800b088:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b08c:	7b7a      	ldrb	r2, [r7, #13]
 800b08e:	4908      	ldr	r1, [pc, #32]	; (800b0b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b090:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b092:	fb93 f3f2 	sdiv	r3, r3, r2
 800b096:	b29a      	uxth	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b09e:	bf00      	nop
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	0800deb8 	.word	0x0800deb8
 800b0b0:	0800dec0 	.word	0x0800dec0

0800b0b4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	b480      	push	{r7}
 800b0b8:	b085      	sub	sp, #20
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	f107 001c 	add.w	r0, r7, #28
 800b0c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b0ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b0ce:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b0d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b0d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b0da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	4b07      	ldr	r3, [pc, #28]	; (800b104 <SDMMC_Init+0x50>)
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	b004      	add	sp, #16
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	ffc02c00 	.word	0xffc02c00

0800b108 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f043 0203 	orr.w	r2, r3, #3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0303 	and.w	r3, r3, #3
}
 800b176:	4618      	mov	r0, r3
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
	...

0800b184 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b1a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b1a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b1ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68da      	ldr	r2, [r3, #12]
 800b1ba:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <SDMMC_SendCommand+0x50>)
 800b1bc:	4013      	ands	r3, r2
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	fffee0c0 	.word	0xfffee0c0

0800b1d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	b2db      	uxtb	r3, r3
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b085      	sub	sp, #20
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3314      	adds	r3, #20
 800b200:	461a      	mov	r2, r3
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	4413      	add	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b23e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b244:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b24a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4313      	orrs	r3, r2
 800b250:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	431a      	orrs	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b262:	2300      	movs	r3, #0

}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b27e:	2310      	movs	r3, #16
 800b280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b282:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b288:	2300      	movs	r3, #0
 800b28a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b28c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b292:	f107 0308 	add.w	r3, r7, #8
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff ff73 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b29e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a2:	2110      	movs	r1, #16
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fa5f 	bl	800b768 <SDMMC_GetCmdResp1>
 800b2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b088      	sub	sp, #32
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b2c4:	2311      	movs	r3, #17
 800b2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2d8:	f107 0308 	add.w	r3, r7, #8
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7ff ff50 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e8:	2111      	movs	r1, #17
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fa3c 	bl	800b768 <SDMMC_GetCmdResp1>
 800b2f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2f2:	69fb      	ldr	r3, [r7, #28]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3720      	adds	r7, #32
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b30a:	2312      	movs	r3, #18
 800b30c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b30e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b31c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b31e:	f107 0308 	add.w	r3, r7, #8
 800b322:	4619      	mov	r1, r3
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff ff2d 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b32a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b32e:	2112      	movs	r1, #18
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fa19 	bl	800b768 <SDMMC_GetCmdResp1>
 800b336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b338:	69fb      	ldr	r3, [r7, #28]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3720      	adds	r7, #32
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b088      	sub	sp, #32
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b350:	2318      	movs	r3, #24
 800b352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b354:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b35a:	2300      	movs	r3, #0
 800b35c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b35e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b362:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b364:	f107 0308 	add.w	r3, r7, #8
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7ff ff0a 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b370:	f241 3288 	movw	r2, #5000	; 0x1388
 800b374:	2118      	movs	r1, #24
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f9f6 	bl	800b768 <SDMMC_GetCmdResp1>
 800b37c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b37e:	69fb      	ldr	r3, [r7, #28]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3720      	adds	r7, #32
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b396:	2319      	movs	r3, #25
 800b398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b39a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b39e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3aa:	f107 0308 	add.w	r3, r7, #8
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff fee7 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b3b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ba:	2119      	movs	r1, #25
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f9d3 	bl	800b768 <SDMMC_GetCmdResp1>
 800b3c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c4:	69fb      	ldr	r3, [r7, #28]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3720      	adds	r7, #32
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
	...

0800b3d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b3dc:	230c      	movs	r3, #12
 800b3de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3ee:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b408:	f107 0308 	add.w	r3, r7, #8
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7ff feb8 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b414:	4a0b      	ldr	r2, [pc, #44]	; (800b444 <SDMMC_CmdStopTransfer+0x74>)
 800b416:	210c      	movs	r1, #12
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 f9a5 	bl	800b768 <SDMMC_GetCmdResp1>
 800b41e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b432:	d101      	bne.n	800b438 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b434:	2300      	movs	r3, #0
 800b436:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b438:	69fb      	ldr	r3, [r7, #28]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	05f5e100 	.word	0x05f5e100

0800b448 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b088      	sub	sp, #32
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b456:	2307      	movs	r3, #7
 800b458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b45a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b45e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b460:	2300      	movs	r3, #0
 800b462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b468:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b46a:	f107 0308 	add.w	r3, r7, #8
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fe87 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b476:	f241 3288 	movw	r2, #5000	; 0x1388
 800b47a:	2107      	movs	r1, #7
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f973 	bl	800b768 <SDMMC_GetCmdResp1>
 800b482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b484:	69fb      	ldr	r3, [r7, #28]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3720      	adds	r7, #32
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b088      	sub	sp, #32
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b49a:	2300      	movs	r3, #0
 800b49c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ac:	f107 0308 	add.w	r3, r7, #8
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7ff fe66 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fb97 	bl	800bbec <SDMMC_GetCmdError>
 800b4be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b088      	sub	sp, #32
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b4d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b4d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b4d8:	2308      	movs	r3, #8
 800b4da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ec:	f107 0308 	add.w	r3, r7, #8
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff fe46 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fb29 	bl	800bb50 <SDMMC_GetCmdResp7>
 800b4fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b500:	69fb      	ldr	r3, [r7, #28]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3720      	adds	r7, #32
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b088      	sub	sp, #32
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b518:	2337      	movs	r3, #55	; 0x37
 800b51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b51c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b52a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b52c:	f107 0308 	add.w	r3, r7, #8
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff fe26 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b538:	f241 3288 	movw	r2, #5000	; 0x1388
 800b53c:	2137      	movs	r1, #55	; 0x37
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f912 	bl	800b768 <SDMMC_GetCmdResp1>
 800b544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b546:	69fb      	ldr	r3, [r7, #28]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3720      	adds	r7, #32
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b088      	sub	sp, #32
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b55e:	2329      	movs	r3, #41	; 0x29
 800b560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b562:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b568:	2300      	movs	r3, #0
 800b56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b56c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b570:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b572:	f107 0308 	add.w	r3, r7, #8
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff fe03 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fa2e 	bl	800b9e0 <SDMMC_GetCmdResp3>
 800b584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b586:	69fb      	ldr	r3, [r7, #28]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3720      	adds	r7, #32
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b59e:	2306      	movs	r3, #6
 800b5a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5b2:	f107 0308 	add.w	r3, r7, #8
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff fde3 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b5be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c2:	2106      	movs	r1, #6
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f8cf 	bl	800b768 <SDMMC_GetCmdResp1>
 800b5ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5cc:	69fb      	ldr	r3, [r7, #28]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3720      	adds	r7, #32
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b088      	sub	sp, #32
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b5e2:	2333      	movs	r3, #51	; 0x33
 800b5e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5f6:	f107 0308 	add.w	r3, r7, #8
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff fdc1 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b602:	f241 3288 	movw	r2, #5000	; 0x1388
 800b606:	2133      	movs	r1, #51	; 0x33
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f8ad 	bl	800b768 <SDMMC_GetCmdResp1>
 800b60e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b610:	69fb      	ldr	r3, [r7, #28]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3720      	adds	r7, #32
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b088      	sub	sp, #32
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b622:	2300      	movs	r3, #0
 800b624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b626:	2302      	movs	r3, #2
 800b628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b62a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b62e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b630:	2300      	movs	r3, #0
 800b632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b63a:	f107 0308 	add.w	r3, r7, #8
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff fd9f 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f980 	bl	800b94c <SDMMC_GetCmdResp2>
 800b64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b64e:	69fb      	ldr	r3, [r7, #28]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3720      	adds	r7, #32
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b666:	2309      	movs	r3, #9
 800b668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b66a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b670:	2300      	movs	r3, #0
 800b672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b67a:	f107 0308 	add.w	r3, r7, #8
 800b67e:	4619      	mov	r1, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7ff fd7f 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f960 	bl	800b94c <SDMMC_GetCmdResp2>
 800b68c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b68e:	69fb      	ldr	r3, [r7, #28]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3720      	adds	r7, #32
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ba:	f107 0308 	add.w	r3, r7, #8
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff fd5f 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	2103      	movs	r1, #3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f9c8 	bl	800ba60 <SDMMC_GetCmdResp6>
 800b6d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3720      	adds	r7, #32
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b6ea:	230d      	movs	r3, #13
 800b6ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6fe:	f107 0308 	add.w	r3, r7, #8
 800b702:	4619      	mov	r1, r3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f7ff fd3d 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b70a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b70e:	210d      	movs	r1, #13
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f829 	bl	800b768 <SDMMC_GetCmdResp1>
 800b716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b718:	69fb      	ldr	r3, [r7, #28]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3720      	adds	r7, #32
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b088      	sub	sp, #32
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b72e:	230d      	movs	r3, #13
 800b730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b732:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b738:	2300      	movs	r3, #0
 800b73a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b73c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b742:	f107 0308 	add.w	r3, r7, #8
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff fd1b 	bl	800b184 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b74e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b752:	210d      	movs	r1, #13
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f807 	bl	800b768 <SDMMC_GetCmdResp1>
 800b75a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b75c:	69fb      	ldr	r3, [r7, #28]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3720      	adds	r7, #32
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	460b      	mov	r3, r1
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b776:	4b70      	ldr	r3, [pc, #448]	; (800b938 <SDMMC_GetCmdResp1+0x1d0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a70      	ldr	r2, [pc, #448]	; (800b93c <SDMMC_GetCmdResp1+0x1d4>)
 800b77c:	fba2 2303 	umull	r2, r3, r2, r3
 800b780:	0a5a      	lsrs	r2, r3, #9
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	fb02 f303 	mul.w	r3, r2, r3
 800b788:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	1e5a      	subs	r2, r3, #1
 800b78e:	61fa      	str	r2, [r7, #28]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b798:	e0c9      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	4b67      	ldr	r3, [pc, #412]	; (800b940 <SDMMC_GetCmdResp1+0x1d8>)
 800b7a4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d0ef      	beq.n	800b78a <SDMMC_GetCmdResp1+0x22>
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1ea      	bne.n	800b78a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b8:	f003 0304 	and.w	r3, r3, #4
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d004      	beq.n	800b7ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2204      	movs	r2, #4
 800b7c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7c6:	2304      	movs	r3, #4
 800b7c8:	e0b1      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d004      	beq.n	800b7e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e0a6      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4a58      	ldr	r2, [pc, #352]	; (800b944 <SDMMC_GetCmdResp1+0x1dc>)
 800b7e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f7ff fcf6 	bl	800b1d8 <SDMMC_GetCommandResponse>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	7afb      	ldrb	r3, [r7, #11]
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d001      	beq.n	800b7fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e099      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f7ff fcf8 	bl	800b1f2 <SDMMC_GetResponse>
 800b802:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	4b50      	ldr	r3, [pc, #320]	; (800b948 <SDMMC_GetCmdResp1+0x1e0>)
 800b808:	4013      	ands	r3, r2
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b80e:	2300      	movs	r3, #0
 800b810:	e08d      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b00      	cmp	r3, #0
 800b816:	da02      	bge.n	800b81e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b818:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b81c:	e087      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b828:	2340      	movs	r3, #64	; 0x40
 800b82a:	e080      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b836:	2380      	movs	r3, #128	; 0x80
 800b838:	e079      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b844:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b848:	e071      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b854:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b858:	e069      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b868:	e061      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b878:	e059      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b888:	e051      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b898:	e049      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b8a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b8a8:	e041      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b8b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8b8:	e039      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b8c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b8c8:	e031      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b8d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b8d8:	e029      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d002      	beq.n	800b8ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b8e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8e8:	e021      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b8f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b8f8:	e019      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b904:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b908:	e011      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b914:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b918:	e009      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f003 0308 	and.w	r3, r3, #8
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b924:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b928:	e001      	b.n	800b92e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b92a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3720      	adds	r7, #32
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	24008000 	.word	0x24008000
 800b93c:	10624dd3 	.word	0x10624dd3
 800b940:	00200045 	.word	0x00200045
 800b944:	002000c5 	.word	0x002000c5
 800b948:	fdffe008 	.word	0xfdffe008

0800b94c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b954:	4b1f      	ldr	r3, [pc, #124]	; (800b9d4 <SDMMC_GetCmdResp2+0x88>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a1f      	ldr	r2, [pc, #124]	; (800b9d8 <SDMMC_GetCmdResp2+0x8c>)
 800b95a:	fba2 2303 	umull	r2, r3, r2, r3
 800b95e:	0a5b      	lsrs	r3, r3, #9
 800b960:	f241 3288 	movw	r2, #5000	; 0x1388
 800b964:	fb02 f303 	mul.w	r3, r2, r3
 800b968:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	1e5a      	subs	r2, r3, #1
 800b96e:	60fa      	str	r2, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d102      	bne.n	800b97a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b974:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b978:	e026      	b.n	800b9c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0ef      	beq.n	800b96a <SDMMC_GetCmdResp2+0x1e>
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1ea      	bne.n	800b96a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b998:	f003 0304 	and.w	r3, r3, #4
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d004      	beq.n	800b9aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2204      	movs	r2, #4
 800b9a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9a6:	2304      	movs	r3, #4
 800b9a8:	e00e      	b.n	800b9c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d004      	beq.n	800b9c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e003      	b.n	800b9c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a06      	ldr	r2, [pc, #24]	; (800b9dc <SDMMC_GetCmdResp2+0x90>)
 800b9c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	24008000 	.word	0x24008000
 800b9d8:	10624dd3 	.word	0x10624dd3
 800b9dc:	002000c5 	.word	0x002000c5

0800b9e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b9e8:	4b1a      	ldr	r3, [pc, #104]	; (800ba54 <SDMMC_GetCmdResp3+0x74>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a1a      	ldr	r2, [pc, #104]	; (800ba58 <SDMMC_GetCmdResp3+0x78>)
 800b9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f2:	0a5b      	lsrs	r3, r3, #9
 800b9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f8:	fb02 f303 	mul.w	r3, r2, r3
 800b9fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	1e5a      	subs	r2, r3, #1
 800ba02:	60fa      	str	r2, [r7, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba0c:	e01b      	b.n	800ba46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d0ef      	beq.n	800b9fe <SDMMC_GetCmdResp3+0x1e>
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1ea      	bne.n	800b9fe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d004      	beq.n	800ba3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2204      	movs	r2, #4
 800ba38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba3a:	2304      	movs	r3, #4
 800ba3c:	e003      	b.n	800ba46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a06      	ldr	r2, [pc, #24]	; (800ba5c <SDMMC_GetCmdResp3+0x7c>)
 800ba42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	24008000 	.word	0x24008000
 800ba58:	10624dd3 	.word	0x10624dd3
 800ba5c:	002000c5 	.word	0x002000c5

0800ba60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba6e:	4b35      	ldr	r3, [pc, #212]	; (800bb44 <SDMMC_GetCmdResp6+0xe4>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a35      	ldr	r2, [pc, #212]	; (800bb48 <SDMMC_GetCmdResp6+0xe8>)
 800ba74:	fba2 2303 	umull	r2, r3, r2, r3
 800ba78:	0a5b      	lsrs	r3, r3, #9
 800ba7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba7e:	fb02 f303 	mul.w	r3, r2, r3
 800ba82:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	1e5a      	subs	r2, r3, #1
 800ba88:	61fa      	str	r2, [r7, #28]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba92:	e052      	b.n	800bb3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba98:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0ef      	beq.n	800ba84 <SDMMC_GetCmdResp6+0x24>
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1ea      	bne.n	800ba84 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab2:	f003 0304 	and.w	r3, r3, #4
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d004      	beq.n	800bac4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2204      	movs	r2, #4
 800babe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bac0:	2304      	movs	r3, #4
 800bac2:	e03a      	b.n	800bb3a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d004      	beq.n	800bada <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2201      	movs	r2, #1
 800bad4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e02f      	b.n	800bb3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff fb7c 	bl	800b1d8 <SDMMC_GetCommandResponse>
 800bae0:	4603      	mov	r3, r0
 800bae2:	461a      	mov	r2, r3
 800bae4:	7afb      	ldrb	r3, [r7, #11]
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d001      	beq.n	800baee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baea:	2301      	movs	r3, #1
 800baec:	e025      	b.n	800bb3a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4a16      	ldr	r2, [pc, #88]	; (800bb4c <SDMMC_GetCmdResp6+0xec>)
 800baf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800baf4:	2100      	movs	r1, #0
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f7ff fb7b 	bl	800b1f2 <SDMMC_GetResponse>
 800bafc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d106      	bne.n	800bb16 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	0c1b      	lsrs	r3, r3, #16
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e011      	b.n	800bb3a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb24:	e009      	b.n	800bb3a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb34:	e001      	b.n	800bb3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3720      	adds	r7, #32
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	24008000 	.word	0x24008000
 800bb48:	10624dd3 	.word	0x10624dd3
 800bb4c:	002000c5 	.word	0x002000c5

0800bb50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb58:	4b22      	ldr	r3, [pc, #136]	; (800bbe4 <SDMMC_GetCmdResp7+0x94>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a22      	ldr	r2, [pc, #136]	; (800bbe8 <SDMMC_GetCmdResp7+0x98>)
 800bb5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb62:	0a5b      	lsrs	r3, r3, #9
 800bb64:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb68:	fb02 f303 	mul.w	r3, r2, r3
 800bb6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	1e5a      	subs	r2, r3, #1
 800bb72:	60fa      	str	r2, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb7c:	e02c      	b.n	800bbd8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb82:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0ef      	beq.n	800bb6e <SDMMC_GetCmdResp7+0x1e>
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1ea      	bne.n	800bb6e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d004      	beq.n	800bbae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2204      	movs	r2, #4
 800bba8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbaa:	2304      	movs	r3, #4
 800bbac:	e014      	b.n	800bbd8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d004      	beq.n	800bbc4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e009      	b.n	800bbd8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2240      	movs	r2, #64	; 0x40
 800bbd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bbd6:	2300      	movs	r3, #0

}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr
 800bbe4:	24008000 	.word	0x24008000
 800bbe8:	10624dd3 	.word	0x10624dd3

0800bbec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bbf4:	4b11      	ldr	r3, [pc, #68]	; (800bc3c <SDMMC_GetCmdError+0x50>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a11      	ldr	r2, [pc, #68]	; (800bc40 <SDMMC_GetCmdError+0x54>)
 800bbfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfe:	0a5b      	lsrs	r3, r3, #9
 800bc00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc04:	fb02 f303 	mul.w	r3, r2, r3
 800bc08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	1e5a      	subs	r2, r3, #1
 800bc0e:	60fa      	str	r2, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d102      	bne.n	800bc1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc18:	e009      	b.n	800bc2e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d0f1      	beq.n	800bc0a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a06      	ldr	r2, [pc, #24]	; (800bc44 <SDMMC_GetCmdError+0x58>)
 800bc2a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	24008000 	.word	0x24008000
 800bc40:	10624dd3 	.word	0x10624dd3
 800bc44:	002000c5 	.word	0x002000c5

0800bc48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bc4c:	4904      	ldr	r1, [pc, #16]	; (800bc60 <MX_FATFS_Init+0x18>)
 800bc4e:	4805      	ldr	r0, [pc, #20]	; (800bc64 <MX_FATFS_Init+0x1c>)
 800bc50:	f000 faa6 	bl	800c1a0 <FATFS_LinkDriver>
 800bc54:	4603      	mov	r3, r0
 800bc56:	461a      	mov	r2, r3
 800bc58:	4b03      	ldr	r3, [pc, #12]	; (800bc68 <MX_FATFS_Init+0x20>)
 800bc5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bc5c:	bf00      	nop
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	2400c810 	.word	0x2400c810
 800bc64:	0800dec8 	.word	0x0800dec8
 800bc68:	2400c80c 	.word	0x2400c80c

0800bc6c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc76:	f000 f885 	bl	800bd84 <BSP_SD_IsDetected>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d001      	beq.n	800bc84 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bc80:	2302      	movs	r3, #2
 800bc82:	e012      	b.n	800bcaa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bc84:	480b      	ldr	r0, [pc, #44]	; (800bcb4 <BSP_SD_Init+0x48>)
 800bc86:	f7fb fb3f 	bl	8007308 <HAL_SD_Init>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d109      	bne.n	800bca8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bc94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bc98:	4806      	ldr	r0, [pc, #24]	; (800bcb4 <BSP_SD_Init+0x48>)
 800bc9a:	f7fc f9ed 	bl	8008078 <HAL_SD_ConfigWideBusOperation>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bca8:	79fb      	ldrb	r3, [r7, #7]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	2400c360 	.word	0x2400c360

0800bcb8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	68f9      	ldr	r1, [r7, #12]
 800bcce:	4806      	ldr	r0, [pc, #24]	; (800bce8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bcd0:	f7fb fc34 	bl	800753c <HAL_SD_ReadBlocks_DMA>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	2400c360 	.word	0x2400c360

0800bcec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	68f9      	ldr	r1, [r7, #12]
 800bd02:	4806      	ldr	r0, [pc, #24]	; (800bd1c <BSP_SD_WriteBlocks_DMA+0x30>)
 800bd04:	f7fb fcc2 	bl	800768c <HAL_SD_WriteBlocks_DMA>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	2400c360 	.word	0x2400c360

0800bd20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bd24:	4805      	ldr	r0, [pc, #20]	; (800bd3c <BSP_SD_GetCardState+0x1c>)
 800bd26:	f7fc fab9 	bl	800829c <HAL_SD_GetCardState>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b04      	cmp	r3, #4
 800bd2e:	bf14      	ite	ne
 800bd30:	2301      	movne	r3, #1
 800bd32:	2300      	moveq	r3, #0
 800bd34:	b2db      	uxtb	r3, r3
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	2400c360 	.word	0x2400c360

0800bd40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	4803      	ldr	r0, [pc, #12]	; (800bd58 <BSP_SD_GetCardInfo+0x18>)
 800bd4c:	f7fc f968 	bl	8008020 <HAL_SD_GetCardInfo>
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	2400c360 	.word	0x2400c360

0800bd5c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bd64:	f000 f9ac 	bl	800c0c0 <BSP_SD_WriteCpltCallback>
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bd78:	f000 f9b4 	bl	800c0e4 <BSP_SD_ReadCpltCallback>
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bd8e:	f000 f80b 	bl	800bda8 <BSP_PlatformIsDetected>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	b2db      	uxtb	r3, r3
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bdb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bdb6:	4806      	ldr	r0, [pc, #24]	; (800bdd0 <BSP_PlatformIsDetected+0x28>)
 800bdb8:	f7f7 ffa2 	bl	8003d00 <HAL_GPIO_ReadPin>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	58020800 	.word	0x58020800

0800bdd4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800bddc:	f000 fa22 	bl	800c224 <osKernelGetTickCount>
 800bde0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800bde2:	e006      	b.n	800bdf2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bde4:	f7ff ff9c 	bl	800bd20 <BSP_SD_GetCardState>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	e009      	b.n	800be06 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800bdf2:	f000 fa17 	bl	800c224 <osKernelGetTickCount>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d8f0      	bhi.n	800bde4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800be02:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be1a:	4b0b      	ldr	r3, [pc, #44]	; (800be48 <SD_CheckStatus+0x38>)
 800be1c:	2201      	movs	r2, #1
 800be1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be20:	f7ff ff7e 	bl	800bd20 <BSP_SD_GetCardState>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d107      	bne.n	800be3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be2a:	4b07      	ldr	r3, [pc, #28]	; (800be48 <SD_CheckStatus+0x38>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	f023 0301 	bic.w	r3, r3, #1
 800be34:	b2da      	uxtb	r2, r3
 800be36:	4b04      	ldr	r3, [pc, #16]	; (800be48 <SD_CheckStatus+0x38>)
 800be38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800be3a:	4b03      	ldr	r3, [pc, #12]	; (800be48 <SD_CheckStatus+0x38>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	b2db      	uxtb	r3, r3
}
 800be40:	4618      	mov	r0, r3
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	2400800d 	.word	0x2400800d

0800be4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800be56:	4b1c      	ldr	r3, [pc, #112]	; (800bec8 <SD_initialize+0x7c>)
 800be58:	2201      	movs	r2, #1
 800be5a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800be5c:	f000 f9c0 	bl	800c1e0 <osKernelGetState>
 800be60:	4603      	mov	r3, r0
 800be62:	2b02      	cmp	r3, #2
 800be64:	d129      	bne.n	800beba <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800be66:	f7ff ff01 	bl	800bc6c <BSP_SD_Init>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d107      	bne.n	800be80 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff ffcc 	bl	800be10 <SD_CheckStatus>
 800be78:	4603      	mov	r3, r0
 800be7a:	461a      	mov	r2, r3
 800be7c:	4b12      	ldr	r3, [pc, #72]	; (800bec8 <SD_initialize+0x7c>)
 800be7e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800be80:	4b11      	ldr	r3, [pc, #68]	; (800bec8 <SD_initialize+0x7c>)
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b01      	cmp	r3, #1
 800be88:	d017      	beq.n	800beba <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800be8a:	4b10      	ldr	r3, [pc, #64]	; (800becc <SD_initialize+0x80>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d107      	bne.n	800bea2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800be92:	2200      	movs	r2, #0
 800be94:	2102      	movs	r1, #2
 800be96:	200a      	movs	r0, #10
 800be98:	f000 f9d9 	bl	800c24e <osMessageQueueNew>
 800be9c:	4603      	mov	r3, r0
 800be9e:	4a0b      	ldr	r2, [pc, #44]	; (800becc <SD_initialize+0x80>)
 800bea0:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800bea2:	4b0a      	ldr	r3, [pc, #40]	; (800becc <SD_initialize+0x80>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d107      	bne.n	800beba <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800beaa:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <SD_initialize+0x7c>)
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	f043 0301 	orr.w	r3, r3, #1
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <SD_initialize+0x7c>)
 800beb8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800beba:	4b03      	ldr	r3, [pc, #12]	; (800bec8 <SD_initialize+0x7c>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	b2db      	uxtb	r3, r3
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	2400800d 	.word	0x2400800d
 800becc:	2400815c 	.word	0x2400815c

0800bed0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	4603      	mov	r3, r0
 800bed8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	4618      	mov	r0, r3
 800bede:	f7ff ff97 	bl	800be10 <SD_CheckStatus>
 800bee2:	4603      	mov	r3, r0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	607a      	str	r2, [r7, #4]
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	4603      	mov	r3, r0
 800befa:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf00:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf04:	f7ff ff66 	bl	800bdd4 <SD_CheckStatusWithTimeout>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da01      	bge.n	800bf12 <SD_read+0x26>
  {
    return res;
 800bf0e:	7ffb      	ldrb	r3, [r7, #31]
 800bf10:	e02f      	b.n	800bf72 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	68b8      	ldr	r0, [r7, #8]
 800bf18:	f7ff fece 	bl	800bcb8 <BSP_SD_ReadBlocks_DMA>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800bf20:	7fbb      	ldrb	r3, [r7, #30]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d124      	bne.n	800bf70 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bf26:	4b15      	ldr	r3, [pc, #84]	; (800bf7c <SD_read+0x90>)
 800bf28:	6818      	ldr	r0, [r3, #0]
 800bf2a:	f107 0112 	add.w	r1, r7, #18
 800bf2e:	f247 5330 	movw	r3, #30000	; 0x7530
 800bf32:	2200      	movs	r2, #0
 800bf34:	f000 fa5e 	bl	800c3f4 <osMessageQueueGet>
 800bf38:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d117      	bne.n	800bf70 <SD_read+0x84>
 800bf40:	8a7b      	ldrh	r3, [r7, #18]
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d114      	bne.n	800bf70 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bf46:	f000 f96d 	bl	800c224 <osKernelGetTickCount>
 800bf4a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bf4c:	e007      	b.n	800bf5e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf4e:	f7ff fee7 	bl	800bd20 <BSP_SD_GetCardState>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <SD_read+0x72>
              {
                res = RES_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bf5c:	e008      	b.n	800bf70 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bf5e:	f000 f961 	bl	800c224 <osKernelGetTickCount>
 800bf62:	4602      	mov	r2, r0
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d9ee      	bls.n	800bf4e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bf70:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3720      	adds	r7, #32
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	2400815c 	.word	0x2400815c

0800bf80 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b088      	sub	sp, #32
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60b9      	str	r1, [r7, #8]
 800bf88:	607a      	str	r2, [r7, #4]
 800bf8a:	603b      	str	r3, [r7, #0]
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf94:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf98:	f7ff ff1c 	bl	800bdd4 <SD_CheckStatusWithTimeout>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	da01      	bge.n	800bfa6 <SD_write+0x26>
  {
    return res;
 800bfa2:	7ffb      	ldrb	r3, [r7, #31]
 800bfa4:	e02d      	b.n	800c002 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	68b8      	ldr	r0, [r7, #8]
 800bfac:	f7ff fe9e 	bl	800bcec <BSP_SD_WriteBlocks_DMA>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d124      	bne.n	800c000 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bfb6:	4b15      	ldr	r3, [pc, #84]	; (800c00c <SD_write+0x8c>)
 800bfb8:	6818      	ldr	r0, [r3, #0]
 800bfba:	f107 0112 	add.w	r1, r7, #18
 800bfbe:	f247 5330 	movw	r3, #30000	; 0x7530
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f000 fa16 	bl	800c3f4 <osMessageQueueGet>
 800bfc8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d117      	bne.n	800c000 <SD_write+0x80>
 800bfd0:	8a7b      	ldrh	r3, [r7, #18]
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d114      	bne.n	800c000 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800bfd6:	f000 f925 	bl	800c224 <osKernelGetTickCount>
 800bfda:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bfdc:	e007      	b.n	800bfee <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bfde:	f7ff fe9f 	bl	800bd20 <BSP_SD_GetCardState>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d102      	bne.n	800bfee <SD_write+0x6e>
          {
            res = RES_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	77fb      	strb	r3, [r7, #31]
            break;
 800bfec:	e008      	b.n	800c000 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bfee:	f000 f919 	bl	800c224 <osKernelGetTickCount>
 800bff2:	4602      	mov	r2, r0
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	f247 522f 	movw	r2, #29999	; 0x752f
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d9ee      	bls.n	800bfde <SD_write+0x5e>
    }

  }
#endif

  return res;
 800c000:	7ffb      	ldrb	r3, [r7, #31]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3720      	adds	r7, #32
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	2400815c 	.word	0x2400815c

0800c010 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b08c      	sub	sp, #48	; 0x30
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	603a      	str	r2, [r7, #0]
 800c01a:	71fb      	strb	r3, [r7, #7]
 800c01c:	460b      	mov	r3, r1
 800c01e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c026:	4b25      	ldr	r3, [pc, #148]	; (800c0bc <SD_ioctl+0xac>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <SD_ioctl+0x28>
 800c034:	2303      	movs	r3, #3
 800c036:	e03c      	b.n	800c0b2 <SD_ioctl+0xa2>

  switch (cmd)
 800c038:	79bb      	ldrb	r3, [r7, #6]
 800c03a:	2b03      	cmp	r3, #3
 800c03c:	d834      	bhi.n	800c0a8 <SD_ioctl+0x98>
 800c03e:	a201      	add	r2, pc, #4	; (adr r2, 800c044 <SD_ioctl+0x34>)
 800c040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c044:	0800c055 	.word	0x0800c055
 800c048:	0800c05d 	.word	0x0800c05d
 800c04c:	0800c075 	.word	0x0800c075
 800c050:	0800c08f 	.word	0x0800c08f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c05a:	e028      	b.n	800c0ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c05c:	f107 0308 	add.w	r3, r7, #8
 800c060:	4618      	mov	r0, r3
 800c062:	f7ff fe6d 	bl	800bd40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c066:	6a3a      	ldr	r2, [r7, #32]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c072:	e01c      	b.n	800c0ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c074:	f107 0308 	add.w	r3, r7, #8
 800c078:	4618      	mov	r0, r3
 800c07a:	f7ff fe61 	bl	800bd40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c080:	b29a      	uxth	r2, r3
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c08c:	e00f      	b.n	800c0ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c08e:	f107 0308 	add.w	r3, r7, #8
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff fe54 	bl	800bd40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	0a5a      	lsrs	r2, r3, #9
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0a6:	e002      	b.n	800c0ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c0a8:	2304      	movs	r3, #4
 800c0aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c0ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3730      	adds	r7, #48	; 0x30
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2400800d 	.word	0x2400800d

0800c0c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c0ca:	4b05      	ldr	r3, [pc, #20]	; (800c0e0 <BSP_SD_WriteCpltCallback+0x20>)
 800c0cc:	6818      	ldr	r0, [r3, #0]
 800c0ce:	1db9      	adds	r1, r7, #6
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f000 f92e 	bl	800c334 <osMessageQueuePut>
#endif
}
 800c0d8:	bf00      	nop
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	2400815c 	.word	0x2400815c

0800c0e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c0ee:	4b05      	ldr	r3, [pc, #20]	; (800c104 <BSP_SD_ReadCpltCallback+0x20>)
 800c0f0:	6818      	ldr	r0, [r3, #0]
 800c0f2:	1db9      	adds	r1, r7, #6
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f000 f91c 	bl	800c334 <osMessageQueuePut>
#endif
}
 800c0fc:	bf00      	nop
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	2400815c 	.word	0x2400815c

0800c108 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c108:	b480      	push	{r7}
 800c10a:	b087      	sub	sp, #28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	4613      	mov	r3, r2
 800c114:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c116:	2301      	movs	r3, #1
 800c118:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c11e:	4b1f      	ldr	r3, [pc, #124]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c120:	7a5b      	ldrb	r3, [r3, #9]
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d131      	bne.n	800c18c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c128:	4b1c      	ldr	r3, [pc, #112]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c12a:	7a5b      	ldrb	r3, [r3, #9]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	461a      	mov	r2, r3
 800c130:	4b1a      	ldr	r3, [pc, #104]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c132:	2100      	movs	r1, #0
 800c134:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c136:	4b19      	ldr	r3, [pc, #100]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c138:	7a5b      	ldrb	r3, [r3, #9]
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	4a17      	ldr	r2, [pc, #92]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c146:	4b15      	ldr	r3, [pc, #84]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c148:	7a5b      	ldrb	r3, [r3, #9]
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	461a      	mov	r2, r3
 800c14e:	4b13      	ldr	r3, [pc, #76]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c150:	4413      	add	r3, r2
 800c152:	79fa      	ldrb	r2, [r7, #7]
 800c154:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c156:	4b11      	ldr	r3, [pc, #68]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c158:	7a5b      	ldrb	r3, [r3, #9]
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	b2d1      	uxtb	r1, r2
 800c160:	4a0e      	ldr	r2, [pc, #56]	; (800c19c <FATFS_LinkDriverEx+0x94>)
 800c162:	7251      	strb	r1, [r2, #9]
 800c164:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c166:	7dbb      	ldrb	r3, [r7, #22]
 800c168:	3330      	adds	r3, #48	; 0x30
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	3301      	adds	r3, #1
 800c174:	223a      	movs	r2, #58	; 0x3a
 800c176:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	3302      	adds	r3, #2
 800c17c:	222f      	movs	r2, #47	; 0x2f
 800c17e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	3303      	adds	r3, #3
 800c184:	2200      	movs	r2, #0
 800c186:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c18c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	371c      	adds	r7, #28
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	24008160 	.word	0x24008160

0800c1a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff ffaa 	bl	800c108 <FATFS_LinkDriverEx>
 800c1b4:	4603      	mov	r3, r0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c1c4:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <SysTick_Handler+0x1c>)
 800c1c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c1c8:	f001 faa4 	bl	800d714 <xTaskGetSchedulerState>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d001      	beq.n	800c1d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c1d2:	f001 fc29 	bl	800da28 <xPortSysTickHandler>
  }
}
 800c1d6:	bf00      	nop
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	e000e010 	.word	0xe000e010

0800c1e0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c1e6:	f001 fa95 	bl	800d714 <xTaskGetSchedulerState>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d004      	beq.n	800c1fa <osKernelGetState+0x1a>
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d105      	bne.n	800c200 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	607b      	str	r3, [r7, #4]
      break;
 800c1f8:	e00c      	b.n	800c214 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	607b      	str	r3, [r7, #4]
      break;
 800c1fe:	e009      	b.n	800c214 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c200:	4b07      	ldr	r3, [pc, #28]	; (800c220 <osKernelGetState+0x40>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d102      	bne.n	800c20e <osKernelGetState+0x2e>
        state = osKernelReady;
 800c208:	2301      	movs	r3, #1
 800c20a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c20c:	e001      	b.n	800c212 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c20e:	2300      	movs	r3, #0
 800c210:	607b      	str	r3, [r7, #4]
      break;
 800c212:	bf00      	nop
  }

  return (state);
 800c214:	687b      	ldr	r3, [r7, #4]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	2400816c 	.word	0x2400816c

0800c224 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c22a:	f3ef 8305 	mrs	r3, IPSR
 800c22e:	603b      	str	r3, [r7, #0]
  return(result);
 800c230:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c232:	2b00      	cmp	r3, #0
 800c234:	d003      	beq.n	800c23e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c236:	f001 f811 	bl	800d25c <xTaskGetTickCountFromISR>
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	e002      	b.n	800c244 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c23e:	f000 fffd 	bl	800d23c <xTaskGetTickCount>
 800c242:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c244:	687b      	ldr	r3, [r7, #4]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c24e:	b580      	push	{r7, lr}
 800c250:	b08a      	sub	sp, #40	; 0x28
 800c252:	af02      	add	r7, sp, #8
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	60b9      	str	r1, [r7, #8]
 800c258:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c25a:	2300      	movs	r3, #0
 800c25c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c25e:	f3ef 8305 	mrs	r3, IPSR
 800c262:	613b      	str	r3, [r7, #16]
  return(result);
 800c264:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c266:	2b00      	cmp	r3, #0
 800c268:	d15f      	bne.n	800c32a <osMessageQueueNew+0xdc>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d05c      	beq.n	800c32a <osMessageQueueNew+0xdc>
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d059      	beq.n	800c32a <osMessageQueueNew+0xdc>
    mem = -1;
 800c276:	f04f 33ff 	mov.w	r3, #4294967295
 800c27a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d029      	beq.n	800c2d6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d012      	beq.n	800c2b0 <osMessageQueueNew+0x62>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	2b4f      	cmp	r3, #79	; 0x4f
 800c290:	d90e      	bls.n	800c2b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00a      	beq.n	800c2b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	695a      	ldr	r2, [r3, #20]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	68b9      	ldr	r1, [r7, #8]
 800c2a2:	fb01 f303 	mul.w	r3, r1, r3
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d302      	bcc.n	800c2b0 <osMessageQueueNew+0x62>
        mem = 1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	61bb      	str	r3, [r7, #24]
 800c2ae:	e014      	b.n	800c2da <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d110      	bne.n	800c2da <osMessageQueueNew+0x8c>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10c      	bne.n	800c2da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d108      	bne.n	800c2da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d104      	bne.n	800c2da <osMessageQueueNew+0x8c>
          mem = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	61bb      	str	r3, [r7, #24]
 800c2d4:	e001      	b.n	800c2da <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d10b      	bne.n	800c2f8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691a      	ldr	r2, [r3, #16]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	9100      	str	r1, [sp, #0]
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 f9ee 	bl	800c6d0 <xQueueGenericCreateStatic>
 800c2f4:	61f8      	str	r0, [r7, #28]
 800c2f6:	e008      	b.n	800c30a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d105      	bne.n	800c30a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c2fe:	2200      	movs	r2, #0
 800c300:	68b9      	ldr	r1, [r7, #8]
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f000 fa5c 	bl	800c7c0 <xQueueGenericCreate>
 800c308:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00c      	beq.n	800c32a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <osMessageQueueNew+0xd0>
        name = attr->name;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	617b      	str	r3, [r7, #20]
 800c31c:	e001      	b.n	800c322 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c31e:	2300      	movs	r3, #0
 800c320:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c322:	6979      	ldr	r1, [r7, #20]
 800c324:	69f8      	ldr	r0, [r7, #28]
 800c326:	f000 feb3 	bl	800d090 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c32a:	69fb      	ldr	r3, [r7, #28]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3720      	adds	r7, #32
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c334:	b580      	push	{r7, lr}
 800c336:	b088      	sub	sp, #32
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	4613      	mov	r3, r2
 800c342:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c348:	2300      	movs	r3, #0
 800c34a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c34c:	f3ef 8305 	mrs	r3, IPSR
 800c350:	617b      	str	r3, [r7, #20]
  return(result);
 800c352:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c354:	2b00      	cmp	r3, #0
 800c356:	d028      	beq.n	800c3aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d005      	beq.n	800c36a <osMessageQueuePut+0x36>
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <osMessageQueuePut+0x36>
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c36a:	f06f 0303 	mvn.w	r3, #3
 800c36e:	61fb      	str	r3, [r7, #28]
 800c370:	e038      	b.n	800c3e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c372:	2300      	movs	r3, #0
 800c374:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c376:	f107 0210 	add.w	r2, r7, #16
 800c37a:	2300      	movs	r3, #0
 800c37c:	68b9      	ldr	r1, [r7, #8]
 800c37e:	69b8      	ldr	r0, [r7, #24]
 800c380:	f000 fb7a 	bl	800ca78 <xQueueGenericSendFromISR>
 800c384:	4603      	mov	r3, r0
 800c386:	2b01      	cmp	r3, #1
 800c388:	d003      	beq.n	800c392 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c38a:	f06f 0302 	mvn.w	r3, #2
 800c38e:	61fb      	str	r3, [r7, #28]
 800c390:	e028      	b.n	800c3e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d025      	beq.n	800c3e4 <osMessageQueuePut+0xb0>
 800c398:	4b15      	ldr	r3, [pc, #84]	; (800c3f0 <osMessageQueuePut+0xbc>)
 800c39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c39e:	601a      	str	r2, [r3, #0]
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	e01c      	b.n	800c3e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <osMessageQueuePut+0x82>
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d103      	bne.n	800c3be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c3b6:	f06f 0303 	mvn.w	r3, #3
 800c3ba:	61fb      	str	r3, [r7, #28]
 800c3bc:	e012      	b.n	800c3e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c3be:	2300      	movs	r3, #0
 800c3c0:	683a      	ldr	r2, [r7, #0]
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	69b8      	ldr	r0, [r7, #24]
 800c3c6:	f000 fa59 	bl	800c87c <xQueueGenericSend>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d009      	beq.n	800c3e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d003      	beq.n	800c3de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c3d6:	f06f 0301 	mvn.w	r3, #1
 800c3da:	61fb      	str	r3, [r7, #28]
 800c3dc:	e002      	b.n	800c3e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c3de:	f06f 0302 	mvn.w	r3, #2
 800c3e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c3e4:	69fb      	ldr	r3, [r7, #28]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3720      	adds	r7, #32
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	e000ed04 	.word	0xe000ed04

0800c3f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b088      	sub	sp, #32
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
 800c400:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c406:	2300      	movs	r3, #0
 800c408:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c40a:	f3ef 8305 	mrs	r3, IPSR
 800c40e:	617b      	str	r3, [r7, #20]
  return(result);
 800c410:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c412:	2b00      	cmp	r3, #0
 800c414:	d028      	beq.n	800c468 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d005      	beq.n	800c428 <osMessageQueueGet+0x34>
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d002      	beq.n	800c428 <osMessageQueueGet+0x34>
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d003      	beq.n	800c430 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c428:	f06f 0303 	mvn.w	r3, #3
 800c42c:	61fb      	str	r3, [r7, #28]
 800c42e:	e037      	b.n	800c4a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c430:	2300      	movs	r3, #0
 800c432:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c434:	f107 0310 	add.w	r3, r7, #16
 800c438:	461a      	mov	r2, r3
 800c43a:	68b9      	ldr	r1, [r7, #8]
 800c43c:	69b8      	ldr	r0, [r7, #24]
 800c43e:	f000 fc97 	bl	800cd70 <xQueueReceiveFromISR>
 800c442:	4603      	mov	r3, r0
 800c444:	2b01      	cmp	r3, #1
 800c446:	d003      	beq.n	800c450 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c448:	f06f 0302 	mvn.w	r3, #2
 800c44c:	61fb      	str	r3, [r7, #28]
 800c44e:	e027      	b.n	800c4a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d024      	beq.n	800c4a0 <osMessageQueueGet+0xac>
 800c456:	4b15      	ldr	r3, [pc, #84]	; (800c4ac <osMessageQueueGet+0xb8>)
 800c458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	e01b      	b.n	800c4a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d002      	beq.n	800c474 <osMessageQueueGet+0x80>
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d103      	bne.n	800c47c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c474:	f06f 0303 	mvn.w	r3, #3
 800c478:	61fb      	str	r3, [r7, #28]
 800c47a:	e011      	b.n	800c4a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	68b9      	ldr	r1, [r7, #8]
 800c480:	69b8      	ldr	r0, [r7, #24]
 800c482:	f000 fb95 	bl	800cbb0 <xQueueReceive>
 800c486:	4603      	mov	r3, r0
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d009      	beq.n	800c4a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d003      	beq.n	800c49a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c492:	f06f 0301 	mvn.w	r3, #1
 800c496:	61fb      	str	r3, [r7, #28]
 800c498:	e002      	b.n	800c4a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c49a:	f06f 0302 	mvn.w	r3, #2
 800c49e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c4a0:	69fb      	ldr	r3, [r7, #28]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3720      	adds	r7, #32
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	e000ed04 	.word	0xe000ed04

0800c4b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f103 0208 	add.w	r2, r3, #8
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f103 0208 	add.w	r2, r3, #8
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f103 0208 	add.w	r2, r3, #8
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	689a      	ldr	r2, [r3, #8]
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	601a      	str	r2, [r3, #0]
}
 800c52c:	bf00      	nop
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54e:	d103      	bne.n	800c558 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	e00c      	b.n	800c572 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	3308      	adds	r3, #8
 800c55c:	60fb      	str	r3, [r7, #12]
 800c55e:	e002      	b.n	800c566 <vListInsert+0x2e>
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d2f6      	bcs.n	800c560 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	601a      	str	r2, [r3, #0]
}
 800c59e:	bf00      	nop
 800c5a0:	3714      	adds	r7, #20
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b085      	sub	sp, #20
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	6892      	ldr	r2, [r2, #8]
 800c5c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	6852      	ldr	r2, [r2, #4]
 800c5ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d103      	bne.n	800c5de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	1e5a      	subs	r2, r3, #1
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
	...

0800c600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10a      	bne.n	800c62a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c626:	bf00      	nop
 800c628:	e7fe      	b.n	800c628 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c62a:	f001 f96d 	bl	800d908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c636:	68f9      	ldr	r1, [r7, #12]
 800c638:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c63a:	fb01 f303 	mul.w	r3, r1, r3
 800c63e:	441a      	add	r2, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c65a:	3b01      	subs	r3, #1
 800c65c:	68f9      	ldr	r1, [r7, #12]
 800c65e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c660:	fb01 f303 	mul.w	r3, r1, r3
 800c664:	441a      	add	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	22ff      	movs	r2, #255	; 0xff
 800c66e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	22ff      	movs	r2, #255	; 0xff
 800c676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d114      	bne.n	800c6aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01a      	beq.n	800c6be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3310      	adds	r3, #16
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 ff39 	bl	800d504 <xTaskRemoveFromEventList>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d012      	beq.n	800c6be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c698:	4b0c      	ldr	r3, [pc, #48]	; (800c6cc <xQueueGenericReset+0xcc>)
 800c69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c69e:	601a      	str	r2, [r3, #0]
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	e009      	b.n	800c6be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	3310      	adds	r3, #16
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff fefe 	bl	800c4b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3324      	adds	r3, #36	; 0x24
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff fef9 	bl	800c4b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c6be:	f001 f953 	bl	800d968 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c6c2:	2301      	movs	r3, #1
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	e000ed04 	.word	0xe000ed04

0800c6d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b08e      	sub	sp, #56	; 0x38
 800c6d4:	af02      	add	r7, sp, #8
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10a      	bne.n	800c6fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c6f6:	bf00      	nop
 800c6f8:	e7fe      	b.n	800c6f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10a      	bne.n	800c716 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c712:	bf00      	nop
 800c714:	e7fe      	b.n	800c714 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <xQueueGenericCreateStatic+0x52>
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d001      	beq.n	800c726 <xQueueGenericCreateStatic+0x56>
 800c722:	2301      	movs	r3, #1
 800c724:	e000      	b.n	800c728 <xQueueGenericCreateStatic+0x58>
 800c726:	2300      	movs	r3, #0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10a      	bne.n	800c742 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	623b      	str	r3, [r7, #32]
}
 800c73e:	bf00      	nop
 800c740:	e7fe      	b.n	800c740 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d102      	bne.n	800c74e <xQueueGenericCreateStatic+0x7e>
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d101      	bne.n	800c752 <xQueueGenericCreateStatic+0x82>
 800c74e:	2301      	movs	r3, #1
 800c750:	e000      	b.n	800c754 <xQueueGenericCreateStatic+0x84>
 800c752:	2300      	movs	r3, #0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10a      	bne.n	800c76e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	61fb      	str	r3, [r7, #28]
}
 800c76a:	bf00      	nop
 800c76c:	e7fe      	b.n	800c76c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c76e:	2350      	movs	r3, #80	; 0x50
 800c770:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2b50      	cmp	r3, #80	; 0x50
 800c776:	d00a      	beq.n	800c78e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	61bb      	str	r3, [r7, #24]
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c78e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00d      	beq.n	800c7b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	68b9      	ldr	r1, [r7, #8]
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f000 f83f 	bl	800c834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3730      	adds	r7, #48	; 0x30
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08a      	sub	sp, #40	; 0x28
 800c7c4:	af02      	add	r7, sp, #8
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <xQueueGenericCreate+0x2a>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	f383 8811 	msr	BASEPRI, r3
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	f3bf 8f4f 	dsb	sy
 800c7e4:	613b      	str	r3, [r7, #16]
}
 800c7e6:	bf00      	nop
 800c7e8:	e7fe      	b.n	800c7e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	fb02 f303 	mul.w	r3, r2, r3
 800c7f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	3350      	adds	r3, #80	; 0x50
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f001 f977 	bl	800daec <pvPortMalloc>
 800c7fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d011      	beq.n	800c82a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	3350      	adds	r3, #80	; 0x50
 800c80e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c818:	79fa      	ldrb	r2, [r7, #7]
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	4613      	mov	r3, r2
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	68b9      	ldr	r1, [r7, #8]
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f000 f805 	bl	800c834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c82a:	69bb      	ldr	r3, [r7, #24]
	}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3720      	adds	r7, #32
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
 800c840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d103      	bne.n	800c850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	69ba      	ldr	r2, [r7, #24]
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	e002      	b.n	800c856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c862:	2101      	movs	r1, #1
 800c864:	69b8      	ldr	r0, [r7, #24]
 800c866:	f7ff fecb 	bl	800c600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	78fa      	ldrb	r2, [r7, #3]
 800c86e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
	...

0800c87c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08e      	sub	sp, #56	; 0x38
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c88a:	2300      	movs	r3, #0
 800c88c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <xQueueGenericSend+0x32>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d103      	bne.n	800c8bc <xQueueGenericSend+0x40>
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <xQueueGenericSend+0x44>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e000      	b.n	800c8c2 <xQueueGenericSend+0x46>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10a      	bne.n	800c8dc <xQueueGenericSend+0x60>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8d8:	bf00      	nop
 800c8da:	e7fe      	b.n	800c8da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d103      	bne.n	800c8ea <xQueueGenericSend+0x6e>
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d101      	bne.n	800c8ee <xQueueGenericSend+0x72>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e000      	b.n	800c8f0 <xQueueGenericSend+0x74>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10a      	bne.n	800c90a <xQueueGenericSend+0x8e>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	623b      	str	r3, [r7, #32]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c90a:	f000 ff03 	bl	800d714 <xTaskGetSchedulerState>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d102      	bne.n	800c91a <xQueueGenericSend+0x9e>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d101      	bne.n	800c91e <xQueueGenericSend+0xa2>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <xQueueGenericSend+0xa4>
 800c91e:	2300      	movs	r3, #0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10a      	bne.n	800c93a <xQueueGenericSend+0xbe>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	61fb      	str	r3, [r7, #28]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c93a:	f000 ffe5 	bl	800d908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c946:	429a      	cmp	r2, r3
 800c948:	d302      	bcc.n	800c950 <xQueueGenericSend+0xd4>
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d129      	bne.n	800c9a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	68b9      	ldr	r1, [r7, #8]
 800c954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c956:	f000 fa8b 	bl	800ce70 <prvCopyDataToQueue>
 800c95a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c960:	2b00      	cmp	r3, #0
 800c962:	d010      	beq.n	800c986 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	3324      	adds	r3, #36	; 0x24
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fdcb 	bl	800d504 <xTaskRemoveFromEventList>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d013      	beq.n	800c99c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c974:	4b3f      	ldr	r3, [pc, #252]	; (800ca74 <xQueueGenericSend+0x1f8>)
 800c976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c97a:	601a      	str	r2, [r3, #0]
 800c97c:	f3bf 8f4f 	dsb	sy
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	e00a      	b.n	800c99c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d007      	beq.n	800c99c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c98c:	4b39      	ldr	r3, [pc, #228]	; (800ca74 <xQueueGenericSend+0x1f8>)
 800c98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c99c:	f000 ffe4 	bl	800d968 <vPortExitCritical>
				return pdPASS;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e063      	b.n	800ca6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d103      	bne.n	800c9b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9aa:	f000 ffdd 	bl	800d968 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e05c      	b.n	800ca6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9b8:	f107 0314 	add.w	r3, r7, #20
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 fe05 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9c6:	f000 ffcf 	bl	800d968 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9ca:	f000 fb8b 	bl	800d0e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9ce:	f000 ff9b 	bl	800d908 <vPortEnterCritical>
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9d8:	b25b      	sxtb	r3, r3
 800c9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9de:	d103      	bne.n	800c9e8 <xQueueGenericSend+0x16c>
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9ee:	b25b      	sxtb	r3, r3
 800c9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f4:	d103      	bne.n	800c9fe <xQueueGenericSend+0x182>
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9fe:	f000 ffb3 	bl	800d968 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca02:	1d3a      	adds	r2, r7, #4
 800ca04:	f107 0314 	add.w	r3, r7, #20
 800ca08:	4611      	mov	r1, r2
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f000 fdf4 	bl	800d5f8 <xTaskCheckForTimeOut>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d124      	bne.n	800ca60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca18:	f000 fb22 	bl	800d060 <prvIsQueueFull>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d018      	beq.n	800ca54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca24:	3310      	adds	r3, #16
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	4611      	mov	r1, r2
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f000 fd46 	bl	800d4bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca32:	f000 faad 	bl	800cf90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca36:	f000 fb63 	bl	800d100 <xTaskResumeAll>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f47f af7c 	bne.w	800c93a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ca42:	4b0c      	ldr	r3, [pc, #48]	; (800ca74 <xQueueGenericSend+0x1f8>)
 800ca44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	e772      	b.n	800c93a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca56:	f000 fa9b 	bl	800cf90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca5a:	f000 fb51 	bl	800d100 <xTaskResumeAll>
 800ca5e:	e76c      	b.n	800c93a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca62:	f000 fa95 	bl	800cf90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca66:	f000 fb4b 	bl	800d100 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3738      	adds	r7, #56	; 0x38
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	e000ed04 	.word	0xe000ed04

0800ca78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b090      	sub	sp, #64	; 0x40
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
 800ca84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10a      	bne.n	800caa6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800caa2:	bf00      	nop
 800caa4:	e7fe      	b.n	800caa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d103      	bne.n	800cab4 <xQueueGenericSendFromISR+0x3c>
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d101      	bne.n	800cab8 <xQueueGenericSendFromISR+0x40>
 800cab4:	2301      	movs	r3, #1
 800cab6:	e000      	b.n	800caba <xQueueGenericSendFromISR+0x42>
 800cab8:	2300      	movs	r3, #0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cad0:	bf00      	nop
 800cad2:	e7fe      	b.n	800cad2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d103      	bne.n	800cae2 <xQueueGenericSendFromISR+0x6a>
 800cada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d101      	bne.n	800cae6 <xQueueGenericSendFromISR+0x6e>
 800cae2:	2301      	movs	r3, #1
 800cae4:	e000      	b.n	800cae8 <xQueueGenericSendFromISR+0x70>
 800cae6:	2300      	movs	r3, #0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	623b      	str	r3, [r7, #32]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb02:	f000 ffb3 	bl	800da6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb06:	f3ef 8211 	mrs	r2, BASEPRI
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	61fa      	str	r2, [r7, #28]
 800cb1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d302      	bcc.n	800cb34 <xQueueGenericSendFromISR+0xbc>
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d12f      	bne.n	800cb94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	68b9      	ldr	r1, [r7, #8]
 800cb48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb4a:	f000 f991 	bl	800ce70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb56:	d112      	bne.n	800cb7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d016      	beq.n	800cb8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	3324      	adds	r3, #36	; 0x24
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 fccd 	bl	800d504 <xTaskRemoveFromEventList>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00e      	beq.n	800cb8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00b      	beq.n	800cb8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	e007      	b.n	800cb8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb82:	3301      	adds	r3, #1
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	b25a      	sxtb	r2, r3
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cb92:	e001      	b.n	800cb98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cba2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3740      	adds	r7, #64	; 0x40
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b08c      	sub	sp, #48	; 0x30
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <xQueueReceive+0x30>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	623b      	str	r3, [r7, #32]
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d103      	bne.n	800cbee <xQueueReceive+0x3e>
 800cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <xQueueReceive+0x42>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e000      	b.n	800cbf4 <xQueueReceive+0x44>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <xQueueReceive+0x5e>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	61fb      	str	r3, [r7, #28]
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc0e:	f000 fd81 	bl	800d714 <xTaskGetSchedulerState>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <xQueueReceive+0x6e>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d101      	bne.n	800cc22 <xQueueReceive+0x72>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e000      	b.n	800cc24 <xQueueReceive+0x74>
 800cc22:	2300      	movs	r3, #0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10a      	bne.n	800cc3e <xQueueReceive+0x8e>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	61bb      	str	r3, [r7, #24]
}
 800cc3a:	bf00      	nop
 800cc3c:	e7fe      	b.n	800cc3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc3e:	f000 fe63 	bl	800d908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d01f      	beq.n	800cc8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc4e:	68b9      	ldr	r1, [r7, #8]
 800cc50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc52:	f000 f977 	bl	800cf44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc58:	1e5a      	subs	r2, r3, #1
 800cc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00f      	beq.n	800cc86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	3310      	adds	r3, #16
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 fc4a 	bl	800d504 <xTaskRemoveFromEventList>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc76:	4b3d      	ldr	r3, [pc, #244]	; (800cd6c <xQueueReceive+0x1bc>)
 800cc78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc7c:	601a      	str	r2, [r3, #0]
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc86:	f000 fe6f 	bl	800d968 <vPortExitCritical>
				return pdPASS;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e069      	b.n	800cd62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d103      	bne.n	800cc9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc94:	f000 fe68 	bl	800d968 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	e062      	b.n	800cd62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d106      	bne.n	800ccb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cca2:	f107 0310 	add.w	r3, r7, #16
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 fc90 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccac:	2301      	movs	r3, #1
 800ccae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ccb0:	f000 fe5a 	bl	800d968 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccb4:	f000 fa16 	bl	800d0e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ccb8:	f000 fe26 	bl	800d908 <vPortEnterCritical>
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccc2:	b25b      	sxtb	r3, r3
 800ccc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc8:	d103      	bne.n	800ccd2 <xQueueReceive+0x122>
 800ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccd8:	b25b      	sxtb	r3, r3
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccde:	d103      	bne.n	800cce8 <xQueueReceive+0x138>
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cce8:	f000 fe3e 	bl	800d968 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccec:	1d3a      	adds	r2, r7, #4
 800ccee:	f107 0310 	add.w	r3, r7, #16
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 fc7f 	bl	800d5f8 <xTaskCheckForTimeOut>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d123      	bne.n	800cd48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd02:	f000 f997 	bl	800d034 <prvIsQueueEmpty>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d017      	beq.n	800cd3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	3324      	adds	r3, #36	; 0x24
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	4611      	mov	r1, r2
 800cd14:	4618      	mov	r0, r3
 800cd16:	f000 fbd1 	bl	800d4bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd1c:	f000 f938 	bl	800cf90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd20:	f000 f9ee 	bl	800d100 <xTaskResumeAll>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d189      	bne.n	800cc3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cd2a:	4b10      	ldr	r3, [pc, #64]	; (800cd6c <xQueueReceive+0x1bc>)
 800cd2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd30:	601a      	str	r2, [r3, #0]
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	e780      	b.n	800cc3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cd3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd3e:	f000 f927 	bl	800cf90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd42:	f000 f9dd 	bl	800d100 <xTaskResumeAll>
 800cd46:	e77a      	b.n	800cc3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cd48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd4a:	f000 f921 	bl	800cf90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd4e:	f000 f9d7 	bl	800d100 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd54:	f000 f96e 	bl	800d034 <prvIsQueueEmpty>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f43f af6f 	beq.w	800cc3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3730      	adds	r7, #48	; 0x30
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	e000ed04 	.word	0xe000ed04

0800cd70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08e      	sub	sp, #56	; 0x38
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10a      	bne.n	800cd9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	623b      	str	r3, [r7, #32]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d103      	bne.n	800cdaa <xQueueReceiveFromISR+0x3a>
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <xQueueReceiveFromISR+0x3e>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e000      	b.n	800cdb0 <xQueueReceiveFromISR+0x40>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10a      	bne.n	800cdca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	61fb      	str	r3, [r7, #28]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdca:	f000 fe4f 	bl	800da6c <vPortValidateInterruptPriority>
	__asm volatile
 800cdce:	f3ef 8211 	mrs	r2, BASEPRI
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	61ba      	str	r2, [r7, #24]
 800cde4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cde6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cde8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d02f      	beq.n	800ce56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce00:	68b9      	ldr	r1, [r7, #8]
 800ce02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce04:	f000 f89e 	bl	800cf44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0a:	1e5a      	subs	r2, r3, #1
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ce10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce18:	d112      	bne.n	800ce40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d016      	beq.n	800ce50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce24:	3310      	adds	r3, #16
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 fb6c 	bl	800d504 <xTaskRemoveFromEventList>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00e      	beq.n	800ce50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00b      	beq.n	800ce50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	e007      	b.n	800ce50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce44:	3301      	adds	r3, #1
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	b25a      	sxtb	r2, r3
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce50:	2301      	movs	r3, #1
 800ce52:	637b      	str	r3, [r7, #52]	; 0x34
 800ce54:	e001      	b.n	800ce5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ce56:	2300      	movs	r3, #0
 800ce58:	637b      	str	r3, [r7, #52]	; 0x34
 800ce5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	f383 8811 	msr	BASEPRI, r3
}
 800ce64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3738      	adds	r7, #56	; 0x38
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10d      	bne.n	800ceaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d14d      	bne.n	800cf32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 fc58 	bl	800d750 <xTaskPriorityDisinherit>
 800cea0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	609a      	str	r2, [r3, #8]
 800cea8:	e043      	b.n	800cf32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d119      	bne.n	800cee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6858      	ldr	r0, [r3, #4]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb8:	461a      	mov	r2, r3
 800ceba:	68b9      	ldr	r1, [r7, #8]
 800cebc:	f000 ffc2 	bl	800de44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec8:	441a      	add	r2, r3
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	685a      	ldr	r2, [r3, #4]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d32b      	bcc.n	800cf32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	605a      	str	r2, [r3, #4]
 800cee2:	e026      	b.n	800cf32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	68d8      	ldr	r0, [r3, #12]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceec:	461a      	mov	r2, r3
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	f000 ffa8 	bl	800de44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	68da      	ldr	r2, [r3, #12]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	425b      	negs	r3, r3
 800cefe:	441a      	add	r2, r3
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	68da      	ldr	r2, [r3, #12]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d207      	bcs.n	800cf20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	689a      	ldr	r2, [r3, #8]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf18:	425b      	negs	r3, r3
 800cf1a:	441a      	add	r2, r3
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d105      	bne.n	800cf32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	1c5a      	adds	r2, r3, #1
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf3a:	697b      	ldr	r3, [r7, #20]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d018      	beq.n	800cf88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	68da      	ldr	r2, [r3, #12]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5e:	441a      	add	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	68da      	ldr	r2, [r3, #12]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d303      	bcc.n	800cf78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	68d9      	ldr	r1, [r3, #12]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf80:	461a      	mov	r2, r3
 800cf82:	6838      	ldr	r0, [r7, #0]
 800cf84:	f000 ff5e 	bl	800de44 <memcpy>
	}
}
 800cf88:	bf00      	nop
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cf98:	f000 fcb6 	bl	800d908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfa4:	e011      	b.n	800cfca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d012      	beq.n	800cfd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3324      	adds	r3, #36	; 0x24
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f000 faa6 	bl	800d504 <xTaskRemoveFromEventList>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfbe:	f000 fb7d 	bl	800d6bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	dce9      	bgt.n	800cfa6 <prvUnlockQueue+0x16>
 800cfd2:	e000      	b.n	800cfd6 <prvUnlockQueue+0x46>
					break;
 800cfd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	22ff      	movs	r2, #255	; 0xff
 800cfda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cfde:	f000 fcc3 	bl	800d968 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cfe2:	f000 fc91 	bl	800d908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cfee:	e011      	b.n	800d014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d012      	beq.n	800d01e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	3310      	adds	r3, #16
 800cffc:	4618      	mov	r0, r3
 800cffe:	f000 fa81 	bl	800d504 <xTaskRemoveFromEventList>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d008:	f000 fb58 	bl	800d6bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d00c:	7bbb      	ldrb	r3, [r7, #14]
 800d00e:	3b01      	subs	r3, #1
 800d010:	b2db      	uxtb	r3, r3
 800d012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	dce9      	bgt.n	800cff0 <prvUnlockQueue+0x60>
 800d01c:	e000      	b.n	800d020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d01e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	22ff      	movs	r2, #255	; 0xff
 800d024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d028:	f000 fc9e 	bl	800d968 <vPortExitCritical>
}
 800d02c:	bf00      	nop
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d03c:	f000 fc64 	bl	800d908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d044:	2b00      	cmp	r3, #0
 800d046:	d102      	bne.n	800d04e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d048:	2301      	movs	r3, #1
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	e001      	b.n	800d052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d04e:	2300      	movs	r3, #0
 800d050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d052:	f000 fc89 	bl	800d968 <vPortExitCritical>

	return xReturn;
 800d056:	68fb      	ldr	r3, [r7, #12]
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d068:	f000 fc4e 	bl	800d908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d074:	429a      	cmp	r2, r3
 800d076:	d102      	bne.n	800d07e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d078:	2301      	movs	r3, #1
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	e001      	b.n	800d082 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d07e:	2300      	movs	r3, #0
 800d080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d082:	f000 fc71 	bl	800d968 <vPortExitCritical>

	return xReturn;
 800d086:	68fb      	ldr	r3, [r7, #12]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d09a:	2300      	movs	r3, #0
 800d09c:	60fb      	str	r3, [r7, #12]
 800d09e:	e014      	b.n	800d0ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0a0:	4a0f      	ldr	r2, [pc, #60]	; (800d0e0 <vQueueAddToRegistry+0x50>)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10b      	bne.n	800d0c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0ac:	490c      	ldr	r1, [pc, #48]	; (800d0e0 <vQueueAddToRegistry+0x50>)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0b6:	4a0a      	ldr	r2, [pc, #40]	; (800d0e0 <vQueueAddToRegistry+0x50>)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	4413      	add	r3, r2
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0c2:	e006      	b.n	800d0d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	60fb      	str	r3, [r7, #12]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b07      	cmp	r3, #7
 800d0ce:	d9e7      	bls.n	800d0a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0d0:	bf00      	nop
 800d0d2:	bf00      	nop
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	2400cc78 	.word	0x2400cc78

0800d0e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d0e8:	4b04      	ldr	r3, [pc, #16]	; (800d0fc <vTaskSuspendAll+0x18>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	4a03      	ldr	r2, [pc, #12]	; (800d0fc <vTaskSuspendAll+0x18>)
 800d0f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d0f2:	bf00      	nop
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	24008624 	.word	0x24008624

0800d100 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d106:	2300      	movs	r3, #0
 800d108:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d10a:	2300      	movs	r3, #0
 800d10c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d10e:	4b42      	ldr	r3, [pc, #264]	; (800d218 <xTaskResumeAll+0x118>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10a      	bne.n	800d12c <xTaskResumeAll+0x2c>
	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	603b      	str	r3, [r7, #0]
}
 800d128:	bf00      	nop
 800d12a:	e7fe      	b.n	800d12a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d12c:	f000 fbec 	bl	800d908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d130:	4b39      	ldr	r3, [pc, #228]	; (800d218 <xTaskResumeAll+0x118>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3b01      	subs	r3, #1
 800d136:	4a38      	ldr	r2, [pc, #224]	; (800d218 <xTaskResumeAll+0x118>)
 800d138:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d13a:	4b37      	ldr	r3, [pc, #220]	; (800d218 <xTaskResumeAll+0x118>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d162      	bne.n	800d208 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d142:	4b36      	ldr	r3, [pc, #216]	; (800d21c <xTaskResumeAll+0x11c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d05e      	beq.n	800d208 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d14a:	e02f      	b.n	800d1ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d14c:	4b34      	ldr	r3, [pc, #208]	; (800d220 <xTaskResumeAll+0x120>)
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	3318      	adds	r3, #24
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff fa26 	bl	800c5aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3304      	adds	r3, #4
 800d162:	4618      	mov	r0, r3
 800d164:	f7ff fa21 	bl	800c5aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d16c:	4b2d      	ldr	r3, [pc, #180]	; (800d224 <xTaskResumeAll+0x124>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d903      	bls.n	800d17c <xTaskResumeAll+0x7c>
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d178:	4a2a      	ldr	r2, [pc, #168]	; (800d224 <xTaskResumeAll+0x124>)
 800d17a:	6013      	str	r3, [r2, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d180:	4613      	mov	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4a27      	ldr	r2, [pc, #156]	; (800d228 <xTaskResumeAll+0x128>)
 800d18a:	441a      	add	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3304      	adds	r3, #4
 800d190:	4619      	mov	r1, r3
 800d192:	4610      	mov	r0, r2
 800d194:	f7ff f9ac 	bl	800c4f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d19c:	4b23      	ldr	r3, [pc, #140]	; (800d22c <xTaskResumeAll+0x12c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d302      	bcc.n	800d1ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d1a6:	4b22      	ldr	r3, [pc, #136]	; (800d230 <xTaskResumeAll+0x130>)
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1ac:	4b1c      	ldr	r3, [pc, #112]	; (800d220 <xTaskResumeAll+0x120>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1cb      	bne.n	800d14c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d1ba:	f000 fa8b 	bl	800d6d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d1be:	4b1d      	ldr	r3, [pc, #116]	; (800d234 <xTaskResumeAll+0x134>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d010      	beq.n	800d1ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d1ca:	f000 f859 	bl	800d280 <xTaskIncrementTick>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d1d4:	4b16      	ldr	r3, [pc, #88]	; (800d230 <xTaskResumeAll+0x130>)
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1f1      	bne.n	800d1ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d1e6:	4b13      	ldr	r3, [pc, #76]	; (800d234 <xTaskResumeAll+0x134>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d1ec:	4b10      	ldr	r3, [pc, #64]	; (800d230 <xTaskResumeAll+0x130>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d009      	beq.n	800d208 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1f8:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <xTaskResumeAll+0x138>)
 800d1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d208:	f000 fbae 	bl	800d968 <vPortExitCritical>

	return xAlreadyYielded;
 800d20c:	68bb      	ldr	r3, [r7, #8]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	24008624 	.word	0x24008624
 800d21c:	24008604 	.word	0x24008604
 800d220:	240085dc 	.word	0x240085dc
 800d224:	2400860c 	.word	0x2400860c
 800d228:	24008174 	.word	0x24008174
 800d22c:	24008170 	.word	0x24008170
 800d230:	24008618 	.word	0x24008618
 800d234:	24008614 	.word	0x24008614
 800d238:	e000ed04 	.word	0xe000ed04

0800d23c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d242:	4b05      	ldr	r3, [pc, #20]	; (800d258 <xTaskGetTickCount+0x1c>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d248:	687b      	ldr	r3, [r7, #4]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	370c      	adds	r7, #12
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	24008608 	.word	0x24008608

0800d25c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d262:	f000 fc03 	bl	800da6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d266:	2300      	movs	r3, #0
 800d268:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d26a:	4b04      	ldr	r3, [pc, #16]	; (800d27c <xTaskGetTickCountFromISR+0x20>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d270:	683b      	ldr	r3, [r7, #0]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	24008608 	.word	0x24008608

0800d280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d286:	2300      	movs	r3, #0
 800d288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d28a:	4b4f      	ldr	r3, [pc, #316]	; (800d3c8 <xTaskIncrementTick+0x148>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f040 808f 	bne.w	800d3b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d294:	4b4d      	ldr	r3, [pc, #308]	; (800d3cc <xTaskIncrementTick+0x14c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3301      	adds	r3, #1
 800d29a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d29c:	4a4b      	ldr	r2, [pc, #300]	; (800d3cc <xTaskIncrementTick+0x14c>)
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d120      	bne.n	800d2ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d2a8:	4b49      	ldr	r3, [pc, #292]	; (800d3d0 <xTaskIncrementTick+0x150>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00a      	beq.n	800d2c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	603b      	str	r3, [r7, #0]
}
 800d2c4:	bf00      	nop
 800d2c6:	e7fe      	b.n	800d2c6 <xTaskIncrementTick+0x46>
 800d2c8:	4b41      	ldr	r3, [pc, #260]	; (800d3d0 <xTaskIncrementTick+0x150>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
 800d2ce:	4b41      	ldr	r3, [pc, #260]	; (800d3d4 <xTaskIncrementTick+0x154>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a3f      	ldr	r2, [pc, #252]	; (800d3d0 <xTaskIncrementTick+0x150>)
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	4a3f      	ldr	r2, [pc, #252]	; (800d3d4 <xTaskIncrementTick+0x154>)
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6013      	str	r3, [r2, #0]
 800d2dc:	4b3e      	ldr	r3, [pc, #248]	; (800d3d8 <xTaskIncrementTick+0x158>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	4a3d      	ldr	r2, [pc, #244]	; (800d3d8 <xTaskIncrementTick+0x158>)
 800d2e4:	6013      	str	r3, [r2, #0]
 800d2e6:	f000 f9f5 	bl	800d6d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d2ea:	4b3c      	ldr	r3, [pc, #240]	; (800d3dc <xTaskIncrementTick+0x15c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	693a      	ldr	r2, [r7, #16]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d349      	bcc.n	800d388 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2f4:	4b36      	ldr	r3, [pc, #216]	; (800d3d0 <xTaskIncrementTick+0x150>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d104      	bne.n	800d308 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2fe:	4b37      	ldr	r3, [pc, #220]	; (800d3dc <xTaskIncrementTick+0x15c>)
 800d300:	f04f 32ff 	mov.w	r2, #4294967295
 800d304:	601a      	str	r2, [r3, #0]
					break;
 800d306:	e03f      	b.n	800d388 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d308:	4b31      	ldr	r3, [pc, #196]	; (800d3d0 <xTaskIncrementTick+0x150>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d318:	693a      	ldr	r2, [r7, #16]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d203      	bcs.n	800d328 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d320:	4a2e      	ldr	r2, [pc, #184]	; (800d3dc <xTaskIncrementTick+0x15c>)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d326:	e02f      	b.n	800d388 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	3304      	adds	r3, #4
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff f93c 	bl	800c5aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d336:	2b00      	cmp	r3, #0
 800d338:	d004      	beq.n	800d344 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	3318      	adds	r3, #24
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff f933 	bl	800c5aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d348:	4b25      	ldr	r3, [pc, #148]	; (800d3e0 <xTaskIncrementTick+0x160>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d903      	bls.n	800d358 <xTaskIncrementTick+0xd8>
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d354:	4a22      	ldr	r2, [pc, #136]	; (800d3e0 <xTaskIncrementTick+0x160>)
 800d356:	6013      	str	r3, [r2, #0]
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35c:	4613      	mov	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4a1f      	ldr	r2, [pc, #124]	; (800d3e4 <xTaskIncrementTick+0x164>)
 800d366:	441a      	add	r2, r3
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	3304      	adds	r3, #4
 800d36c:	4619      	mov	r1, r3
 800d36e:	4610      	mov	r0, r2
 800d370:	f7ff f8be 	bl	800c4f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d378:	4b1b      	ldr	r3, [pc, #108]	; (800d3e8 <xTaskIncrementTick+0x168>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37e:	429a      	cmp	r2, r3
 800d380:	d3b8      	bcc.n	800d2f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d382:	2301      	movs	r3, #1
 800d384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d386:	e7b5      	b.n	800d2f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d388:	4b17      	ldr	r3, [pc, #92]	; (800d3e8 <xTaskIncrementTick+0x168>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38e:	4915      	ldr	r1, [pc, #84]	; (800d3e4 <xTaskIncrementTick+0x164>)
 800d390:	4613      	mov	r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	4413      	add	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	440b      	add	r3, r1
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d901      	bls.n	800d3a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d3a4:	4b11      	ldr	r3, [pc, #68]	; (800d3ec <xTaskIncrementTick+0x16c>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d007      	beq.n	800d3bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	617b      	str	r3, [r7, #20]
 800d3b0:	e004      	b.n	800d3bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d3b2:	4b0f      	ldr	r3, [pc, #60]	; (800d3f0 <xTaskIncrementTick+0x170>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	4a0d      	ldr	r2, [pc, #52]	; (800d3f0 <xTaskIncrementTick+0x170>)
 800d3ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d3bc:	697b      	ldr	r3, [r7, #20]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3718      	adds	r7, #24
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	24008624 	.word	0x24008624
 800d3cc:	24008608 	.word	0x24008608
 800d3d0:	240085d4 	.word	0x240085d4
 800d3d4:	240085d8 	.word	0x240085d8
 800d3d8:	2400861c 	.word	0x2400861c
 800d3dc:	24008620 	.word	0x24008620
 800d3e0:	2400860c 	.word	0x2400860c
 800d3e4:	24008174 	.word	0x24008174
 800d3e8:	24008170 	.word	0x24008170
 800d3ec:	24008618 	.word	0x24008618
 800d3f0:	24008614 	.word	0x24008614

0800d3f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3fa:	4b2a      	ldr	r3, [pc, #168]	; (800d4a4 <vTaskSwitchContext+0xb0>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d402:	4b29      	ldr	r3, [pc, #164]	; (800d4a8 <vTaskSwitchContext+0xb4>)
 800d404:	2201      	movs	r2, #1
 800d406:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d408:	e046      	b.n	800d498 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d40a:	4b27      	ldr	r3, [pc, #156]	; (800d4a8 <vTaskSwitchContext+0xb4>)
 800d40c:	2200      	movs	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d410:	4b26      	ldr	r3, [pc, #152]	; (800d4ac <vTaskSwitchContext+0xb8>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	60fb      	str	r3, [r7, #12]
 800d416:	e010      	b.n	800d43a <vTaskSwitchContext+0x46>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10a      	bne.n	800d434 <vTaskSwitchContext+0x40>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	607b      	str	r3, [r7, #4]
}
 800d430:	bf00      	nop
 800d432:	e7fe      	b.n	800d432 <vTaskSwitchContext+0x3e>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	3b01      	subs	r3, #1
 800d438:	60fb      	str	r3, [r7, #12]
 800d43a:	491d      	ldr	r1, [pc, #116]	; (800d4b0 <vTaskSwitchContext+0xbc>)
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	4613      	mov	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4413      	add	r3, r2
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	440b      	add	r3, r1
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d0e4      	beq.n	800d418 <vTaskSwitchContext+0x24>
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	4613      	mov	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4a15      	ldr	r2, [pc, #84]	; (800d4b0 <vTaskSwitchContext+0xbc>)
 800d45a:	4413      	add	r3, r2
 800d45c:	60bb      	str	r3, [r7, #8]
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	605a      	str	r2, [r3, #4]
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	685a      	ldr	r2, [r3, #4]
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	3308      	adds	r3, #8
 800d470:	429a      	cmp	r2, r3
 800d472:	d104      	bne.n	800d47e <vTaskSwitchContext+0x8a>
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	605a      	str	r2, [r3, #4]
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	4a0b      	ldr	r2, [pc, #44]	; (800d4b4 <vTaskSwitchContext+0xc0>)
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	4a08      	ldr	r2, [pc, #32]	; (800d4ac <vTaskSwitchContext+0xb8>)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d48e:	4b09      	ldr	r3, [pc, #36]	; (800d4b4 <vTaskSwitchContext+0xc0>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	3354      	adds	r3, #84	; 0x54
 800d494:	4a08      	ldr	r2, [pc, #32]	; (800d4b8 <vTaskSwitchContext+0xc4>)
 800d496:	6013      	str	r3, [r2, #0]
}
 800d498:	bf00      	nop
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	24008624 	.word	0x24008624
 800d4a8:	24008618 	.word	0x24008618
 800d4ac:	2400860c 	.word	0x2400860c
 800d4b0:	24008174 	.word	0x24008174
 800d4b4:	24008170 	.word	0x24008170
 800d4b8:	24008014 	.word	0x24008014

0800d4bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	60fb      	str	r3, [r7, #12]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4e2:	4b07      	ldr	r3, [pc, #28]	; (800d500 <vTaskPlaceOnEventList+0x44>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3318      	adds	r3, #24
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7ff f824 	bl	800c538 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4f0:	2101      	movs	r1, #1
 800d4f2:	6838      	ldr	r0, [r7, #0]
 800d4f4:	f000 f99a 	bl	800d82c <prvAddCurrentTaskToDelayedList>
}
 800d4f8:	bf00      	nop
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	24008170 	.word	0x24008170

0800d504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10a      	bne.n	800d530 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	60fb      	str	r3, [r7, #12]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	3318      	adds	r3, #24
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff f838 	bl	800c5aa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d53a:	4b1e      	ldr	r3, [pc, #120]	; (800d5b4 <xTaskRemoveFromEventList+0xb0>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d11d      	bne.n	800d57e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	3304      	adds	r3, #4
 800d546:	4618      	mov	r0, r3
 800d548:	f7ff f82f 	bl	800c5aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d550:	4b19      	ldr	r3, [pc, #100]	; (800d5b8 <xTaskRemoveFromEventList+0xb4>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d903      	bls.n	800d560 <xTaskRemoveFromEventList+0x5c>
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55c:	4a16      	ldr	r2, [pc, #88]	; (800d5b8 <xTaskRemoveFromEventList+0xb4>)
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d564:	4613      	mov	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4a13      	ldr	r2, [pc, #76]	; (800d5bc <xTaskRemoveFromEventList+0xb8>)
 800d56e:	441a      	add	r2, r3
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	3304      	adds	r3, #4
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7fe ffba 	bl	800c4f0 <vListInsertEnd>
 800d57c:	e005      	b.n	800d58a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	3318      	adds	r3, #24
 800d582:	4619      	mov	r1, r3
 800d584:	480e      	ldr	r0, [pc, #56]	; (800d5c0 <xTaskRemoveFromEventList+0xbc>)
 800d586:	f7fe ffb3 	bl	800c4f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58e:	4b0d      	ldr	r3, [pc, #52]	; (800d5c4 <xTaskRemoveFromEventList+0xc0>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	429a      	cmp	r2, r3
 800d596:	d905      	bls.n	800d5a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d598:	2301      	movs	r3, #1
 800d59a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d59c:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <xTaskRemoveFromEventList+0xc4>)
 800d59e:	2201      	movs	r2, #1
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	e001      	b.n	800d5a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d5a8:	697b      	ldr	r3, [r7, #20]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	24008624 	.word	0x24008624
 800d5b8:	2400860c 	.word	0x2400860c
 800d5bc:	24008174 	.word	0x24008174
 800d5c0:	240085dc 	.word	0x240085dc
 800d5c4:	24008170 	.word	0x24008170
 800d5c8:	24008618 	.word	0x24008618

0800d5cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5d4:	4b06      	ldr	r3, [pc, #24]	; (800d5f0 <vTaskInternalSetTimeOutState+0x24>)
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5dc:	4b05      	ldr	r3, [pc, #20]	; (800d5f4 <vTaskInternalSetTimeOutState+0x28>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	605a      	str	r2, [r3, #4]
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	2400861c 	.word	0x2400861c
 800d5f4:	24008608 	.word	0x24008608

0800d5f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b088      	sub	sp, #32
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10a      	bne.n	800d61e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	613b      	str	r3, [r7, #16]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	60fb      	str	r3, [r7, #12]
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d63a:	f000 f965 	bl	800d908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d63e:	4b1d      	ldr	r3, [pc, #116]	; (800d6b4 <xTaskCheckForTimeOut+0xbc>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	69ba      	ldr	r2, [r7, #24]
 800d64a:	1ad3      	subs	r3, r2, r3
 800d64c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d656:	d102      	bne.n	800d65e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d658:	2300      	movs	r3, #0
 800d65a:	61fb      	str	r3, [r7, #28]
 800d65c:	e023      	b.n	800d6a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	4b15      	ldr	r3, [pc, #84]	; (800d6b8 <xTaskCheckForTimeOut+0xc0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d007      	beq.n	800d67a <xTaskCheckForTimeOut+0x82>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	69ba      	ldr	r2, [r7, #24]
 800d670:	429a      	cmp	r2, r3
 800d672:	d302      	bcc.n	800d67a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d674:	2301      	movs	r3, #1
 800d676:	61fb      	str	r3, [r7, #28]
 800d678:	e015      	b.n	800d6a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	429a      	cmp	r2, r3
 800d682:	d20b      	bcs.n	800d69c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	1ad2      	subs	r2, r2, r3
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff ff9b 	bl	800d5cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d696:	2300      	movs	r3, #0
 800d698:	61fb      	str	r3, [r7, #28]
 800d69a:	e004      	b.n	800d6a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d6a6:	f000 f95f 	bl	800d968 <vPortExitCritical>

	return xReturn;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	24008608 	.word	0x24008608
 800d6b8:	2400861c 	.word	0x2400861c

0800d6bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d6bc:	b480      	push	{r7}
 800d6be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d6c0:	4b03      	ldr	r3, [pc, #12]	; (800d6d0 <vTaskMissedYield+0x14>)
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	601a      	str	r2, [r3, #0]
}
 800d6c6:	bf00      	nop
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	24008618 	.word	0x24008618

0800d6d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6da:	4b0c      	ldr	r3, [pc, #48]	; (800d70c <prvResetNextTaskUnblockTime+0x38>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d104      	bne.n	800d6ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6e4:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <prvResetNextTaskUnblockTime+0x3c>)
 800d6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6ec:	e008      	b.n	800d700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ee:	4b07      	ldr	r3, [pc, #28]	; (800d70c <prvResetNextTaskUnblockTime+0x38>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	4a04      	ldr	r2, [pc, #16]	; (800d710 <prvResetNextTaskUnblockTime+0x3c>)
 800d6fe:	6013      	str	r3, [r2, #0]
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	240085d4 	.word	0x240085d4
 800d710:	24008620 	.word	0x24008620

0800d714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d71a:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <xTaskGetSchedulerState+0x34>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d102      	bne.n	800d728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d722:	2301      	movs	r3, #1
 800d724:	607b      	str	r3, [r7, #4]
 800d726:	e008      	b.n	800d73a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d728:	4b08      	ldr	r3, [pc, #32]	; (800d74c <xTaskGetSchedulerState+0x38>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d102      	bne.n	800d736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d730:	2302      	movs	r3, #2
 800d732:	607b      	str	r3, [r7, #4]
 800d734:	e001      	b.n	800d73a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d736:	2300      	movs	r3, #0
 800d738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d73a:	687b      	ldr	r3, [r7, #4]
	}
 800d73c:	4618      	mov	r0, r3
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	24008610 	.word	0x24008610
 800d74c:	24008624 	.word	0x24008624

0800d750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d75c:	2300      	movs	r3, #0
 800d75e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d056      	beq.n	800d814 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d766:	4b2e      	ldr	r3, [pc, #184]	; (800d820 <xTaskPriorityDisinherit+0xd0>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	693a      	ldr	r2, [r7, #16]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d00a      	beq.n	800d786 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	60fb      	str	r3, [r7, #12]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10a      	bne.n	800d7a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	60bb      	str	r3, [r7, #8]
}
 800d7a0:	bf00      	nop
 800d7a2:	e7fe      	b.n	800d7a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7a8:	1e5a      	subs	r2, r3, #1
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d02c      	beq.n	800d814 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d128      	bne.n	800d814 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fe feef 	bl	800c5aa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e4:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <xTaskPriorityDisinherit+0xd4>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d903      	bls.n	800d7f4 <xTaskPriorityDisinherit+0xa4>
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	4a0c      	ldr	r2, [pc, #48]	; (800d824 <xTaskPriorityDisinherit+0xd4>)
 800d7f2:	6013      	str	r3, [r2, #0]
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4a09      	ldr	r2, [pc, #36]	; (800d828 <xTaskPriorityDisinherit+0xd8>)
 800d802:	441a      	add	r2, r3
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	3304      	adds	r3, #4
 800d808:	4619      	mov	r1, r3
 800d80a:	4610      	mov	r0, r2
 800d80c:	f7fe fe70 	bl	800c4f0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d814:	697b      	ldr	r3, [r7, #20]
	}
 800d816:	4618      	mov	r0, r3
 800d818:	3718      	adds	r7, #24
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	24008170 	.word	0x24008170
 800d824:	2400860c 	.word	0x2400860c
 800d828:	24008174 	.word	0x24008174

0800d82c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d836:	4b21      	ldr	r3, [pc, #132]	; (800d8bc <prvAddCurrentTaskToDelayedList+0x90>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d83c:	4b20      	ldr	r3, [pc, #128]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3304      	adds	r3, #4
 800d842:	4618      	mov	r0, r3
 800d844:	f7fe feb1 	bl	800c5aa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84e:	d10a      	bne.n	800d866 <prvAddCurrentTaskToDelayedList+0x3a>
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d007      	beq.n	800d866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d856:	4b1a      	ldr	r3, [pc, #104]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3304      	adds	r3, #4
 800d85c:	4619      	mov	r1, r3
 800d85e:	4819      	ldr	r0, [pc, #100]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d860:	f7fe fe46 	bl	800c4f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d864:	e026      	b.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4413      	add	r3, r2
 800d86c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d86e:	4b14      	ldr	r3, [pc, #80]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d209      	bcs.n	800d892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d87e:	4b12      	ldr	r3, [pc, #72]	; (800d8c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b0f      	ldr	r3, [pc, #60]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3304      	adds	r3, #4
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f7fe fe54 	bl	800c538 <vListInsert>
}
 800d890:	e010      	b.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d892:	4b0e      	ldr	r3, [pc, #56]	; (800d8cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	4b0a      	ldr	r3, [pc, #40]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f7fe fe4a 	bl	800c538 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8a4:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d202      	bcs.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d8ae:	4a08      	ldr	r2, [pc, #32]	; (800d8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6013      	str	r3, [r2, #0]
}
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	24008608 	.word	0x24008608
 800d8c0:	24008170 	.word	0x24008170
 800d8c4:	240085f0 	.word	0x240085f0
 800d8c8:	240085d8 	.word	0x240085d8
 800d8cc:	240085d4 	.word	0x240085d4
 800d8d0:	24008620 	.word	0x24008620
	...

0800d8e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d8e0:	4b07      	ldr	r3, [pc, #28]	; (800d900 <pxCurrentTCBConst2>)
 800d8e2:	6819      	ldr	r1, [r3, #0]
 800d8e4:	6808      	ldr	r0, [r1, #0]
 800d8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ea:	f380 8809 	msr	PSP, r0
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f04f 0000 	mov.w	r0, #0
 800d8f6:	f380 8811 	msr	BASEPRI, r0
 800d8fa:	4770      	bx	lr
 800d8fc:	f3af 8000 	nop.w

0800d900 <pxCurrentTCBConst2>:
 800d900:	24008170 	.word	0x24008170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d904:	bf00      	nop
 800d906:	bf00      	nop

0800d908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
	__asm volatile
 800d90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	607b      	str	r3, [r7, #4]
}
 800d920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d922:	4b0f      	ldr	r3, [pc, #60]	; (800d960 <vPortEnterCritical+0x58>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3301      	adds	r3, #1
 800d928:	4a0d      	ldr	r2, [pc, #52]	; (800d960 <vPortEnterCritical+0x58>)
 800d92a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d92c:	4b0c      	ldr	r3, [pc, #48]	; (800d960 <vPortEnterCritical+0x58>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d10f      	bne.n	800d954 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d934:	4b0b      	ldr	r3, [pc, #44]	; (800d964 <vPortEnterCritical+0x5c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00a      	beq.n	800d954 <vPortEnterCritical+0x4c>
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	603b      	str	r3, [r7, #0]
}
 800d950:	bf00      	nop
 800d952:	e7fe      	b.n	800d952 <vPortEnterCritical+0x4a>
	}
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr
 800d960:	24008010 	.word	0x24008010
 800d964:	e000ed04 	.word	0xe000ed04

0800d968 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d96e:	4b12      	ldr	r3, [pc, #72]	; (800d9b8 <vPortExitCritical+0x50>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d10a      	bne.n	800d98c <vPortExitCritical+0x24>
	__asm volatile
 800d976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	607b      	str	r3, [r7, #4]
}
 800d988:	bf00      	nop
 800d98a:	e7fe      	b.n	800d98a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d98c:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <vPortExitCritical+0x50>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3b01      	subs	r3, #1
 800d992:	4a09      	ldr	r2, [pc, #36]	; (800d9b8 <vPortExitCritical+0x50>)
 800d994:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d996:	4b08      	ldr	r3, [pc, #32]	; (800d9b8 <vPortExitCritical+0x50>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d105      	bne.n	800d9aa <vPortExitCritical+0x42>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	f383 8811 	msr	BASEPRI, r3
}
 800d9a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d9aa:	bf00      	nop
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	24008010 	.word	0x24008010
 800d9bc:	00000000 	.word	0x00000000

0800d9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9c0:	f3ef 8009 	mrs	r0, PSP
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	4b15      	ldr	r3, [pc, #84]	; (800da20 <pxCurrentTCBConst>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	f01e 0f10 	tst.w	lr, #16
 800d9d0:	bf08      	it	eq
 800d9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9da:	6010      	str	r0, [r2, #0]
 800d9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9e4:	f380 8811 	msr	BASEPRI, r0
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f7ff fd00 	bl	800d3f4 <vTaskSwitchContext>
 800d9f4:	f04f 0000 	mov.w	r0, #0
 800d9f8:	f380 8811 	msr	BASEPRI, r0
 800d9fc:	bc09      	pop	{r0, r3}
 800d9fe:	6819      	ldr	r1, [r3, #0]
 800da00:	6808      	ldr	r0, [r1, #0]
 800da02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da06:	f01e 0f10 	tst.w	lr, #16
 800da0a:	bf08      	it	eq
 800da0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da10:	f380 8809 	msr	PSP, r0
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	f3af 8000 	nop.w

0800da20 <pxCurrentTCBConst>:
 800da20:	24008170 	.word	0x24008170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop

0800da28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
	__asm volatile
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	607b      	str	r3, [r7, #4]
}
 800da40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da42:	f7ff fc1d 	bl	800d280 <xTaskIncrementTick>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da4c:	4b06      	ldr	r3, [pc, #24]	; (800da68 <xPortSysTickHandler+0x40>)
 800da4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	2300      	movs	r3, #0
 800da56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	f383 8811 	msr	BASEPRI, r3
}
 800da5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da60:	bf00      	nop
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	e000ed04 	.word	0xe000ed04

0800da6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da72:	f3ef 8305 	mrs	r3, IPSR
 800da76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b0f      	cmp	r3, #15
 800da7c:	d914      	bls.n	800daa8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da7e:	4a17      	ldr	r2, [pc, #92]	; (800dadc <vPortValidateInterruptPriority+0x70>)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	4413      	add	r3, r2
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da88:	4b15      	ldr	r3, [pc, #84]	; (800dae0 <vPortValidateInterruptPriority+0x74>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	7afa      	ldrb	r2, [r7, #11]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d20a      	bcs.n	800daa8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800da92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	607b      	str	r3, [r7, #4]
}
 800daa4:	bf00      	nop
 800daa6:	e7fe      	b.n	800daa6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800daa8:	4b0e      	ldr	r3, [pc, #56]	; (800dae4 <vPortValidateInterruptPriority+0x78>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dab0:	4b0d      	ldr	r3, [pc, #52]	; (800dae8 <vPortValidateInterruptPriority+0x7c>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d90a      	bls.n	800dace <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	603b      	str	r3, [r7, #0]
}
 800daca:	bf00      	nop
 800dacc:	e7fe      	b.n	800dacc <vPortValidateInterruptPriority+0x60>
	}
 800dace:	bf00      	nop
 800dad0:	3714      	adds	r7, #20
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	e000e3f0 	.word	0xe000e3f0
 800dae0:	24008628 	.word	0x24008628
 800dae4:	e000ed0c 	.word	0xe000ed0c
 800dae8:	2400862c 	.word	0x2400862c

0800daec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b08a      	sub	sp, #40	; 0x28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800daf4:	2300      	movs	r3, #0
 800daf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800daf8:	f7ff faf4 	bl	800d0e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dafc:	4b5b      	ldr	r3, [pc, #364]	; (800dc6c <pvPortMalloc+0x180>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db04:	f000 f8be 	bl	800dc84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db08:	4b59      	ldr	r3, [pc, #356]	; (800dc70 <pvPortMalloc+0x184>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4013      	ands	r3, r2
 800db10:	2b00      	cmp	r3, #0
 800db12:	f040 8093 	bne.w	800dc3c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d01d      	beq.n	800db58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db1c:	2208      	movs	r2, #8
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4413      	add	r3, r2
 800db22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f003 0307 	and.w	r3, r3, #7
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d014      	beq.n	800db58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f023 0307 	bic.w	r3, r3, #7
 800db34:	3308      	adds	r3, #8
 800db36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f003 0307 	and.w	r3, r3, #7
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00a      	beq.n	800db58 <pvPortMalloc+0x6c>
	__asm volatile
 800db42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	617b      	str	r3, [r7, #20]
}
 800db54:	bf00      	nop
 800db56:	e7fe      	b.n	800db56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d06e      	beq.n	800dc3c <pvPortMalloc+0x150>
 800db5e:	4b45      	ldr	r3, [pc, #276]	; (800dc74 <pvPortMalloc+0x188>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	429a      	cmp	r2, r3
 800db66:	d869      	bhi.n	800dc3c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db68:	4b43      	ldr	r3, [pc, #268]	; (800dc78 <pvPortMalloc+0x18c>)
 800db6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db6c:	4b42      	ldr	r3, [pc, #264]	; (800dc78 <pvPortMalloc+0x18c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db72:	e004      	b.n	800db7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	429a      	cmp	r2, r3
 800db86:	d903      	bls.n	800db90 <pvPortMalloc+0xa4>
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1f1      	bne.n	800db74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db90:	4b36      	ldr	r3, [pc, #216]	; (800dc6c <pvPortMalloc+0x180>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db96:	429a      	cmp	r2, r3
 800db98:	d050      	beq.n	800dc3c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db9a:	6a3b      	ldr	r3, [r7, #32]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2208      	movs	r2, #8
 800dba0:	4413      	add	r3, r2
 800dba2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	6a3b      	ldr	r3, [r7, #32]
 800dbaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	1ad2      	subs	r2, r2, r3
 800dbb4:	2308      	movs	r3, #8
 800dbb6:	005b      	lsls	r3, r3, #1
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d91f      	bls.n	800dbfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dbbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	f003 0307 	and.w	r3, r3, #7
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00a      	beq.n	800dbe4 <pvPortMalloc+0xf8>
	__asm volatile
 800dbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	613b      	str	r3, [r7, #16]
}
 800dbe0:	bf00      	nop
 800dbe2:	e7fe      	b.n	800dbe2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	685a      	ldr	r2, [r3, #4]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	1ad2      	subs	r2, r2, r3
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dbf6:	69b8      	ldr	r0, [r7, #24]
 800dbf8:	f000 f8a6 	bl	800dd48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dbfc:	4b1d      	ldr	r3, [pc, #116]	; (800dc74 <pvPortMalloc+0x188>)
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	4a1b      	ldr	r2, [pc, #108]	; (800dc74 <pvPortMalloc+0x188>)
 800dc08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc0a:	4b1a      	ldr	r3, [pc, #104]	; (800dc74 <pvPortMalloc+0x188>)
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	4b1b      	ldr	r3, [pc, #108]	; (800dc7c <pvPortMalloc+0x190>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d203      	bcs.n	800dc1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc16:	4b17      	ldr	r3, [pc, #92]	; (800dc74 <pvPortMalloc+0x188>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a18      	ldr	r2, [pc, #96]	; (800dc7c <pvPortMalloc+0x190>)
 800dc1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc20:	685a      	ldr	r2, [r3, #4]
 800dc22:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <pvPortMalloc+0x184>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	431a      	orrs	r2, r3
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	2200      	movs	r2, #0
 800dc30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc32:	4b13      	ldr	r3, [pc, #76]	; (800dc80 <pvPortMalloc+0x194>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3301      	adds	r3, #1
 800dc38:	4a11      	ldr	r2, [pc, #68]	; (800dc80 <pvPortMalloc+0x194>)
 800dc3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dc3c:	f7ff fa60 	bl	800d100 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	f003 0307 	and.w	r3, r3, #7
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00a      	beq.n	800dc60 <pvPortMalloc+0x174>
	__asm volatile
 800dc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4e:	f383 8811 	msr	BASEPRI, r3
 800dc52:	f3bf 8f6f 	isb	sy
 800dc56:	f3bf 8f4f 	dsb	sy
 800dc5a:	60fb      	str	r3, [r7, #12]
}
 800dc5c:	bf00      	nop
 800dc5e:	e7fe      	b.n	800dc5e <pvPortMalloc+0x172>
	return pvReturn;
 800dc60:	69fb      	ldr	r3, [r7, #28]
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3728      	adds	r7, #40	; 0x28
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	2400c238 	.word	0x2400c238
 800dc70:	2400c248 	.word	0x2400c248
 800dc74:	2400c23c 	.word	0x2400c23c
 800dc78:	2400c230 	.word	0x2400c230
 800dc7c:	2400c240 	.word	0x2400c240
 800dc80:	2400c244 	.word	0x2400c244

0800dc84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dc8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc90:	4b27      	ldr	r3, [pc, #156]	; (800dd30 <prvHeapInit+0xac>)
 800dc92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f003 0307 	and.w	r3, r3, #7
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00c      	beq.n	800dcb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3307      	adds	r3, #7
 800dca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f023 0307 	bic.w	r3, r3, #7
 800dcaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	4a1f      	ldr	r2, [pc, #124]	; (800dd30 <prvHeapInit+0xac>)
 800dcb4:	4413      	add	r3, r2
 800dcb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcbc:	4a1d      	ldr	r2, [pc, #116]	; (800dd34 <prvHeapInit+0xb0>)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcc2:	4b1c      	ldr	r3, [pc, #112]	; (800dd34 <prvHeapInit+0xb0>)
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	68ba      	ldr	r2, [r7, #8]
 800dccc:	4413      	add	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dcd0:	2208      	movs	r2, #8
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	1a9b      	subs	r3, r3, r2
 800dcd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f023 0307 	bic.w	r3, r3, #7
 800dcde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	4a15      	ldr	r2, [pc, #84]	; (800dd38 <prvHeapInit+0xb4>)
 800dce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dce6:	4b14      	ldr	r3, [pc, #80]	; (800dd38 <prvHeapInit+0xb4>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2200      	movs	r2, #0
 800dcec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dcee:	4b12      	ldr	r3, [pc, #72]	; (800dd38 <prvHeapInit+0xb4>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	1ad2      	subs	r2, r2, r3
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd04:	4b0c      	ldr	r3, [pc, #48]	; (800dd38 <prvHeapInit+0xb4>)
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	4a0a      	ldr	r2, [pc, #40]	; (800dd3c <prvHeapInit+0xb8>)
 800dd12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	4a09      	ldr	r2, [pc, #36]	; (800dd40 <prvHeapInit+0xbc>)
 800dd1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd1c:	4b09      	ldr	r3, [pc, #36]	; (800dd44 <prvHeapInit+0xc0>)
 800dd1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd22:	601a      	str	r2, [r3, #0]
}
 800dd24:	bf00      	nop
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	24008630 	.word	0x24008630
 800dd34:	2400c230 	.word	0x2400c230
 800dd38:	2400c238 	.word	0x2400c238
 800dd3c:	2400c240 	.word	0x2400c240
 800dd40:	2400c23c 	.word	0x2400c23c
 800dd44:	2400c248 	.word	0x2400c248

0800dd48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b085      	sub	sp, #20
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd50:	4b28      	ldr	r3, [pc, #160]	; (800ddf4 <prvInsertBlockIntoFreeList+0xac>)
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	e002      	b.n	800dd5c <prvInsertBlockIntoFreeList+0x14>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	60fb      	str	r3, [r7, #12]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d8f7      	bhi.n	800dd56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	4413      	add	r3, r2
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d108      	bne.n	800dd8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	441a      	add	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	441a      	add	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d118      	bne.n	800ddd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	4b15      	ldr	r3, [pc, #84]	; (800ddf8 <prvInsertBlockIntoFreeList+0xb0>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d00d      	beq.n	800ddc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	685a      	ldr	r2, [r3, #4]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	441a      	add	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	601a      	str	r2, [r3, #0]
 800ddc4:	e008      	b.n	800ddd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddc6:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <prvInsertBlockIntoFreeList+0xb0>)
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	601a      	str	r2, [r3, #0]
 800ddce:	e003      	b.n	800ddd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d002      	beq.n	800dde6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dde6:	bf00      	nop
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	2400c230 	.word	0x2400c230
 800ddf8:	2400c238 	.word	0x2400c238

0800ddfc <__libc_init_array>:
 800ddfc:	b570      	push	{r4, r5, r6, lr}
 800ddfe:	4d0d      	ldr	r5, [pc, #52]	; (800de34 <__libc_init_array+0x38>)
 800de00:	4c0d      	ldr	r4, [pc, #52]	; (800de38 <__libc_init_array+0x3c>)
 800de02:	1b64      	subs	r4, r4, r5
 800de04:	10a4      	asrs	r4, r4, #2
 800de06:	2600      	movs	r6, #0
 800de08:	42a6      	cmp	r6, r4
 800de0a:	d109      	bne.n	800de20 <__libc_init_array+0x24>
 800de0c:	4d0b      	ldr	r5, [pc, #44]	; (800de3c <__libc_init_array+0x40>)
 800de0e:	4c0c      	ldr	r4, [pc, #48]	; (800de40 <__libc_init_array+0x44>)
 800de10:	f000 f82e 	bl	800de70 <_init>
 800de14:	1b64      	subs	r4, r4, r5
 800de16:	10a4      	asrs	r4, r4, #2
 800de18:	2600      	movs	r6, #0
 800de1a:	42a6      	cmp	r6, r4
 800de1c:	d105      	bne.n	800de2a <__libc_init_array+0x2e>
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	f855 3b04 	ldr.w	r3, [r5], #4
 800de24:	4798      	blx	r3
 800de26:	3601      	adds	r6, #1
 800de28:	e7ee      	b.n	800de08 <__libc_init_array+0xc>
 800de2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de2e:	4798      	blx	r3
 800de30:	3601      	adds	r6, #1
 800de32:	e7f2      	b.n	800de1a <__libc_init_array+0x1e>
 800de34:	0800df44 	.word	0x0800df44
 800de38:	0800df44 	.word	0x0800df44
 800de3c:	0800df44 	.word	0x0800df44
 800de40:	0800df48 	.word	0x0800df48

0800de44 <memcpy>:
 800de44:	440a      	add	r2, r1
 800de46:	4291      	cmp	r1, r2
 800de48:	f100 33ff 	add.w	r3, r0, #4294967295
 800de4c:	d100      	bne.n	800de50 <memcpy+0xc>
 800de4e:	4770      	bx	lr
 800de50:	b510      	push	{r4, lr}
 800de52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de5a:	4291      	cmp	r1, r2
 800de5c:	d1f9      	bne.n	800de52 <memcpy+0xe>
 800de5e:	bd10      	pop	{r4, pc}

0800de60 <memset>:
 800de60:	4402      	add	r2, r0
 800de62:	4603      	mov	r3, r0
 800de64:	4293      	cmp	r3, r2
 800de66:	d100      	bne.n	800de6a <memset+0xa>
 800de68:	4770      	bx	lr
 800de6a:	f803 1b01 	strb.w	r1, [r3], #1
 800de6e:	e7f9      	b.n	800de64 <memset+0x4>

0800de70 <_init>:
 800de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de72:	bf00      	nop
 800de74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de76:	bc08      	pop	{r3}
 800de78:	469e      	mov	lr, r3
 800de7a:	4770      	bx	lr

0800de7c <_fini>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	bf00      	nop
 800de80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de82:	bc08      	pop	{r3}
 800de84:	469e      	mov	lr, r3
 800de86:	4770      	bx	lr
